
# Project Structure
This project is a monorepo. Keep that in mind when making edits or installing dependencies.

- packages: client SDKs - no need to deal with this unless you're explicitly making changes to the SDKs
  - shared: rarely changed, unless we're adding a exposing a new REST API enpdoint in the Flowglad SDKs
  - react
  - server: 
  - 
- platform: where most of the business logic lives. Usually where we want to be working
  - flowglad-next: the main webapp. A Next.js app that includes the merchant web portal, our admin app, and the REST API (at /api/v1/[...path])
  - hosted-billing: the hosted billing portal, which our customers can use to give their customers a way to access their invoices etc no-code
  - docs: the markdown files needed to host the mintlify docs 
- playground: demo webapps that allow us to test the Flowglad SDK integration

# Running the Apps

## Running flowglad-next
- cd platform/flowglad-next
- pnpm vercel:env-pull
- pnpm install-packages
- open localhost:3000

## Developing on packages
- first make sure platform/flowglad-next is running
At project root:
- pnpm install
- pnpm dev to get a watch process running
- Changes to packages will trigger incremental rebuilds. Note that often times you will need to make the change twice to see it. There is a build system issue we're still investigating as to why.

## Firm Assumptions
- When you're working on this codebase, you almost always will need platform/flowglad-next running on localhost:3000. So always start by booting up flowglad-next
- Other projects usually run on localhost:3001 or 3XXX, and will consume flowglad-next via an env variable that tells them where to make Flowglad API calls - to localhost:3000
- For each project, refer to its root README to get a sense of how the pieces fit together

# Code Review Guardrails

- **Shell scripts**: Ensure every tracked `.sh` file starts with either `#!/bin/bash` or `#!/usr/bin/env bash`, and that the first non-comment, non-empty line is exactly `set -euo pipefail`.
- **GitHub Actions `run` steps**:
  - Reject single-line `run:` commands that contain a pipe (`|`).
  - Require multi-line `run:` blocks to include `set -euo pipefail` as their first executable statement (ignoring comments and blank lines).
