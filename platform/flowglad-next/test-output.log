
> flowglad-next@0.1.0 test /Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next
> vitest --reporter=verbose --run

 Vitest  "deps.inline" is deprecated. If you rely on vite-node directly, use "server.deps.inline" instead. Otherwise, consider using "deps.optimizer.web.include"

 RUN  v3.0.5 /Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next

[90m11:20:15:840[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:15:831[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:15:922[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:15:922[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:15:922[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:15:922[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:15:858[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:15:854[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:15:869[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:15:848[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:15:952[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:15:952[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:15:952[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:15:952[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:15:848[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:15:956[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:15:956[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:15:956[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:15:956[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:15:860[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:15:960[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:15:961[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:15:961[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:15:961[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:15:965[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:15:965[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:15:862[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:15:965[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:15:966[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:15:967[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:15:967[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:15:967[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:15:967[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:15:968[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:15:968[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:15:969[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:15:969[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:15:970[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:15:970[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:15:970[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:15:970[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:15:980[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:15:980[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:15:980[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:15:980[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:15:980[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:15:980[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:15:980[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:15:980[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:15:990[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:15:990[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:15:990[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:15:990[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:15:996[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:15:996[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:15:996[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:15:996[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:15:892[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:16:22[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:16:22[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:16:22[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:16:22[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:15:893[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:16:6[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:16:6[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:16:6[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:16:6[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:16:3[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:16:3[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:16:3[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:16:3[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:16:5[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:16:5[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:16:5[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:16:5[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:16:134[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:16:134[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:16:135[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:16:135[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:16:134[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:16:134[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:16:135[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:16:135[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:16:145[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:16:145[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:16:145[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:16:145[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:16:145[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:16:145[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:16:145[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:16:145[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:16:134[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:16:135[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:16:135[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:16:135[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:16:135[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:16:135[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:16:135[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:16:135[0m [34m[setup-server][0m constructing the interceptor...
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/drizzle-zod@0.8.3_drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5__zod@4.1.5/node_modules/drizzle-zod/index.mjs" points to missing source files
[90m11:20:28:660[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:660[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:660[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:660[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:660[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:660[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:660[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:660[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:662[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:662[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:662[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:662[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:670[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:670[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:670[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:670[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:670[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:670[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:670[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:670[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:670[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:671[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:671[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:671[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:685[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:685[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:685[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:685[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:686[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:686[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:686[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:686[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:686[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:686[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:686[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:686[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:690[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:690[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:690[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:690[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:690[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:691[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:691[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:691[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:691[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:691[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:691[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:691[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:830[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:830[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:830[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:830[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:841[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:28:841[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:28:841[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:28:841[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:28:855[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:28:855[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:28:855[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:28:855[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:28:855[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:28:855[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:28:855[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:28:855[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:20:28:856[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:20:28:856[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:28:856[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:28:856[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:28:856[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:28:856[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:20:28:856[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:20:28:856[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:20:28:856[0m [34m[xhr][0m set global instance! xhr
[90m11:20:28:856[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:28:856[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:28:856[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:28:856[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:28:856[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:20:28:856[0m [34m[fetch][0m set global instance! fetch
[90m11:20:28:856[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:28:857[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:28:857[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:28:857[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:28:857[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:28:857[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:28:857[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:28:857[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:28:857[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:28:857[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:28:857[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:28:857[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:28:857[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:28:858[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:20:28:858[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:20:28:858[0m [34m[websocket][0m set global instance! websocket
[90m11:20:28:858[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:28:858[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:28:858[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:28:858[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:28:858[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:28:858[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:28:858[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:28:858[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:28:858[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:28:858[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:28:858[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:28:858[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:28:858[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:28:858[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:28:858[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:28:858[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:28:858[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:28:858[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:28:858[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:28:858[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:28:858[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:28:858[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:28:858[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:28:858[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:28:858[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:28:858[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:28:858[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:28:858[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:28:858[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:28:858[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:28:858[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:28:858[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:28:859[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:28:859[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:28:859[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:28:859[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:28:859[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:28:859[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:28:859[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:28:859[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:28:859[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:28:859[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:28:859[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:28:859[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:28:859[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:28:859[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:28:859[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:28:859[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:28:859[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:28:859[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:28:859[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:28:859[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:28:859[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:28:859[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:28:859[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:28:859[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:28:859[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:28:859[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:28:859[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:28:859[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:28:859[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:28:859[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:28:859[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:28:859[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:28:859[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:28:859[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:28:859[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:28:859[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:28:859[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:28:859[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:28:859[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:28:859[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:28:859[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:28:859[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:28:860[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:28:860[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:28:860[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:28:860[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:28:860[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:28:860[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:28:860[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:28:860[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:28:860[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:28:860[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:28:860[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:28:860[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:28:860[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:28:860[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:28:860[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:28:860[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:28:860[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:28:860[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:28:860[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:28:860[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:28:860[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:28:860[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:29:36[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:29:36[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:29:36[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:29:36[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:29:36[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:29:36[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:29:36[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:29:36[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:29:36[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:29:36[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:29:36[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:29:36[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:29:39[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:29:39[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:29:39[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:29:39[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:29:39[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:29:39[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:29:39[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:29:39[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:29:40[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:29:40[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:29:40[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:29:40[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:29:42[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:29:42[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:29:42[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:29:42[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:29:55[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:29:56[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:29:56[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:29:56[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > createUsageCreditApplicationsForUsageEvent > should return an empty array if there are no available credit balances
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/index.js" points to missing source files
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > createUsageCreditApplicationsForUsageEvent > should create one application if a single credit balance covers the entire usage event amount
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/config.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/cache.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/tasks.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/shared.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/retry.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/batch.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/wait.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/usage.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/tags.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/waitUntil.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/idempotencyKeys.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/timeout.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/metadata.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/webhooks.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/locals.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/otel.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/schedules/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/runs.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/envvars.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/auth.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/queues.js" points to missing source files
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > createUsageCreditApplicationsForUsageEvent > should create one application if a single credit balance is less than the usage event amount
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > createUsageCreditApplicationsForUsageEvent > should create multiple applications if multiple credit balances are needed to cover the usage event amount
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/tracer.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/v3/hooks.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/utils/ioSerialization.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/imports/uncrypto.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/errors.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/pagination.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/errors.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/clock-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/limits.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/logger-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/task-context-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/runtime-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/apiClientManager-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/trace-context-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/run-metadata-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/usage-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/run-timeline-metrics-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/wait-until-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/timeout-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/locals-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/lifecycle-hooks-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/semanticInternalAttributes.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/resource-catalog-api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/idempotencyKeys.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/types/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/jwt.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/links.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/utils/getEnv.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/streams/asyncIterableStream.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/tryCatch.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/utils/durations.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/eventFilterMatches.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/utils/omit.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/utils/flattenAttributes.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/utils/retries.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/utils/styleAttributes.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/utils/imageRef.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/version.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/types/schemas.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/utils/interval.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/zodfetch.js" points to missing source files
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > createUsageCreditApplicationsForUsageEvent > should create multiple applications if multiple credit balances cover less than the usage event amount
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+sdk@4.0.2_ai@4.0.21_react@19.0.0_zod@4.1.5__zod@4.1.5/node_modules/@trigger.dev/sdk/dist/esm/version.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/tracer.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/core.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/getBranch.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/version.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/runStream.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/build.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/messages.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/clock/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/utils.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/common.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/logger/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/taskContext/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/runtime/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/apiClientManager/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/traceContext/api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/runMetadata/operations.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/runMetadata/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/waitUntil/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/usage/api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/runTimelineMetrics/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/timeout/api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/locals/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/lifecycleHooks/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/tokens.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/resources.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/style.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/api.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/schemas.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/eventFilter.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/config.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/fetch.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/webhooks.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/checkpoints.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/warmStart.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/queues.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/openTelemetry.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/schemas/runEngine.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/resource-catalog/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/utils/crypto.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/types/tasks.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/types/tools.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/retry.js" points to missing source files
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > createUsageCreditApplicationsForUsageEvent > should skip credit balances that are zero and use subsequent non-zero balances
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/otel/utils.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/clock/simpleClock.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/runEngineWorker/supervisor/schemas.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/utils/globals.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/apiClient/stream.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/schemas/json.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/logger/taskLogger.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/runtime/noopRuntimeManager.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/runMetadata/noopManager.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/runTimelineMetrics/runTimelineMetricsManager.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/usage/noopUsageManager.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/lifecycleHooks/manager.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/locals/manager.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/resource-catalog/noopResourceCatalog.js" points to missing source files
11:20:30 AM [vite] (client) Failed to load source map for /Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@google-cloud+precise-date@4.0.0/node_modules/@google-cloud/precise-date/build/src/index.js.
Error: An error occurred while trying to read the map file at index.js.map
Error: ENOENT: no such file or directory, open '/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@google-cloud+precise-date@4.0.0/node_modules/@google-cloud/precise-date/build/src/index.js.map'
    at async open (node:internal/fs/promises:634:25)
    at async Object.readFile (node:internal/fs/promises:1238:14)
    at async extractSourcemapFromFile (file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/vite@6.0.11_@types+node@20.17.5_jiti@1.21.6_terser@5.36.0_tsx@4.19.2_yaml@2.6.0/node_modules/vite/dist/node/chunks/dep-M1IYMR16.js:14183:53)
    at async loadAndTransform (file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/vite@6.0.11_@types+node@20.17.5_jiti@1.21.6_terser@5.36.0_tsx@4.19.2_yaml@2.6.0/node_modules/vite/dist/node/chunks/dep-M1IYMR16.js:41160:27)
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/utils/platform.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/@trigger.dev+core@4.0.2/node_modules/@trigger.dev/core/dist/esm/v3/icons.js" points to missing source files
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > createLedgerEntryInsertsForUsageCreditApplications > should create a debit and a credit ledger entry insert for a single usage credit application
[90m11:20:30:263[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:263[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:263[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:263[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:264[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:264[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:264[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:30:264[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:264[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:20:30:264[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:264[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:264[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:264[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:30:264[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:264[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:20:30:264[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:20:30:264[0m [34m[xhr][0m set global instance! xhr
[90m11:20:30:264[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:264[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:264[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:265[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:30:265[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:265[0m [34m[fetch][0m set global instance! fetch
[90m11:20:30:265[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:265[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:265[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:265[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:265[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:265[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:266[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:266[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:266[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:30:266[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:266[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:20:30:266[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:266[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:266[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:266[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:30:266[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:266[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:20:30:266[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:20:30:266[0m [34m[xhr][0m set global instance! xhr
[90m11:20:30:266[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:266[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:266[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:267[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:30:267[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:267[0m [34m[fetch][0m set global instance! fetch
[90m11:20:30:267[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:267[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:267[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:30:267[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:30:267[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:30:267[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:30:267[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:30:267[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:30:267[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:30:267[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:30:267[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:30:268[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:268[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:268[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:20:30:268[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:268[0m [34m[websocket][0m set global instance! websocket
[90m11:20:30:268[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:268[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:268[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:268[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:268[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:268[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:268[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:30:268[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:30:268[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:268[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:268[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:268[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:30:268[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:30:268[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:268[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:268[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:268[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:30:268[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:30:268[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:268[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:268[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:30:268[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:30:268[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:30:268[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:30:268[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:30:268[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:30:268[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:30:268[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:30:268[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:30:268[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:268[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:268[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:30:269[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:269[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:269[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:269[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:269[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:269[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:269[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:30:269[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:30:269[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:269[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:269[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:269[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:30:269[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:30:269[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:269[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:269[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:269[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:30:269[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:30:269[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:269[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:269[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:30:269[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:30:269[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:30:269[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:30:269[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:30:269[0m [34m[[90m11:20:30:265[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:30:265[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:30:265[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:30:265[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:30:265[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:30:265[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:30:265[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:30:265[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:30:265[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:30:266[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:266[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:266[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:20:30:266[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:266[0m [34m[websocket][0m set global instance! websocket
[90m11:20:30:266[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:266[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:266[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:266[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:266[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:266[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:266[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:30:266[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:30:266[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:266[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:266[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:266[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:30:266[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:30:266[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:266[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:266[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:266[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:30:266[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:30:266[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:30:269[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:30:269[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:30:269[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:30:269[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:269[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:269[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:30:269[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:269[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:269[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:269[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:269[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:269[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:269[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:30:269[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:30:269[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:269[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:269[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:269[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:30:269[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:30:269[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:269[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:269[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:269[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:30:269[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:30:269[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:269[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:269[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:30:269[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:30:269[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:30:269[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:30:269[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:30:269[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:30:269[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:30:269[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:30:269[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:30:269[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:269[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:269[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > createLedgerEntryInsertsForUsageCreditApplications > should create debit and credit entries for multiple usage credit applications
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > createLedgerEntryInsertsForUsageCreditApplications > should return an empty array if the usageCreditApplications array is empty
[90m11:20:30:267[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:267[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:30:267[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:30:267[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:30:267[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:30:267[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:30:267[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:30:267[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:30:267[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:30:267[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:30:267[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:267[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:267[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:30:267[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:267[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:267[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:267[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:267[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:267[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:267[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:30:267[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:30:267[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:267[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:267[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:267[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:30:267[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:30:267[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:267[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:267[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:267[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:30:267[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:30:267[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:267[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:267[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:30:267[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:30:267[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:30:267[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:30:267[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:30:267[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:30:267[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:30:267[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:30:267[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:30:267[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:267[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:267[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:30:267[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:267[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:267[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:267[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:267[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:267[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:268[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:30:268[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:30:268[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:268[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:268[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:268[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:30:268[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:30:268[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:268[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:268[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:268[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:30:268[0m [34m[fetch:apply][ ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateActiveSubscribersByMonth > should return an empty array when there are no subscriptions
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateActiveSubscribersByMonth > should correctly count a single active subscription spanning the entire period
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > bulkInsertLedgerEntries > should return an empty array when given an empty array of entries
0m found a running instance, reusing...
[90m11:20:30:268[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:268[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:268[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:30:268[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:30:268[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:30:268[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:30:268[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:30:268[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:30:268[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:30:268[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:30:268[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:30:268[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:268[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:268[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateActiveSubscribersByMonth > should correctly count multiple subscriptions starting and ending on different dates
[90m11:20:30:618[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:618[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:618[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:618[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:618[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:618[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:618[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:30:619[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:619[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:20:30:619[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:619[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:619[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:619[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:30:619[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:619[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:20:30:619[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:20:30:619[0m [34m[xhr][0m set global instance! xhr
[90m11:20:30:619[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:619[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:619[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:619[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:30:619[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:620[0m [34m[fetch][0m set global instance! fetch
[90m11:20:30:620[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:620[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:620[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:30:620[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:30:620[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:30:620[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:30:620[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:30:620[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:30:620[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:30:620[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:30:620[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:30:618[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:619[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:619[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:619[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:619[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:619[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:619[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:30:619[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:619[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:20:30:619[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:619[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:619[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:619[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:30:619[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:620[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:20:30:620[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:20:30:620[0m [34m[xhr][0m set global instance! xhr
[90m11:20:30:620[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:620[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:620[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:620[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:30:620[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:620[0m [34m[fetch][0m set global instance! fetch
[90m11:20:30:620[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:620[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:620[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:30:620[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:30:620[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:30:620[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:30:620[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:30:620[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:30:621[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:30:621[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:30:621[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:30:621[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:621[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:621[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:20:30:621[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:621[0m [34m[websocket][0m set global instance! websocket
[90m11:20:30:621[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:621[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:621[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:621[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:621[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:621[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:621[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:30:621[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:30:621[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:621[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:621[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:621[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:30:621[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:30:621[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:621[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:621[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:621[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:30:621[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:30:621[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:622[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:30:622[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:30:622[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:30:622[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:30:622[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:30:622[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:622[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:30:622[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:622[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:30:622[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:622[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:30:622[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:30:622[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:622[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:30:622[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:30:622[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:622[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:30:622[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:30:622[0m [34m[[90m11:20:30:620[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:621[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:621[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:20:30:621[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:621[0m [34m[websocket][0m set global instance! websocket
[90m11:20:30:621[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:621[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:621[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:621[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:621[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:621[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:621[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:30:621[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:30:621[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:621[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:621[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:621[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:30:621[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:30:621[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:621[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:621[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:621[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:30:621[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:30:621[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:621[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:621[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:30:621[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:30:621[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:30:621[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:30:621[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:30:621[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:30:621[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:30:621[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:30:621[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:30:621[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:622[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:30:622[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:622[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:30:622[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:622[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:30:622[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:30:622[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:622[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:30:622[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:30:622[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:622[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:30:622[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:30:622[0m [34m[ ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateActiveSubscribersByMonth > should return zero counts for an organization with no subscriptions
fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:30:622[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:30:622[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:30:622[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:622[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:30:622[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:622[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:30:622[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:622[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:30:622[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:30:622[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:622[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:30:622[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:30:622[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:622[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:30:623[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:30:623[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:30:623[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:30:623[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:30:623[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:30:623[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:30:623[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:623[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:623[0m [34m[websocket:apply][0m intercepted already applied!
fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:30:622[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:30:622[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:30:622[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:622[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:30:622[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:30:622[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:30:622[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:30:622[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:30:622[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:30:622[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:622[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:30:622[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:30:622[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:30:622[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:30:622[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:30:622[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:30:622[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:30:622[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:30:622[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:30:622[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:30:622[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:30:622[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:30:622[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateActiveSubscribersByMonth > should correctly count subscriptions that start before the period and end after it
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateActiveSubscribersByMonth > should correctly count subscriptions that start during the period and remain active
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateActiveSubscribersByMonth > should correctly count subscriptions that started before the period and ended during it
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > processUsageEventProcessedLedgerCommand > should process a usage event with no credits available/applied 338ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > bulkInsertLedgerEntries > should successfully insert a single valid ledger entry and return it 331ms
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateActiveSubscribersByMonth > should handle edge cases like subscriptions starting/ending exactly on month boundaries
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateActiveSubscribersByMonth > should handle a date range spanning multiple years
 ✓ src/db/tableMethods/paymentMethods.test.ts > paymentMethods.ts > safelyUpdatePaymentForRefund > successfully updates a payment for refund 332ms
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateActiveSubscribersByMonth > should handle a very short date range (single month)
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateActiveSubscribersByMonth > should handle subscriptions starting on the last day of a month
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateActiveSubscribersByMonth > should handle subscriptions canceled before the month starts
 ✓ src/db/tableMethods/paymentMethods.test.ts > paymentMethods.ts > safelyUpdatePaymentForRefund > fails if refund status is not explicitly set
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateActiveSubscribersByMonth > should handle subscriptions starting and ending within the same month
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > bulkInsertLedgerEntries > should successfully insert multiple valid ledger entries and return them 365ms
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > processBillingPeriodTransitionLedgerCommand > Credit Granting Logic > should grant credits for a new billing period 612ms
stderr | src/db/tableMethods/paymentMethods.test.ts > paymentMethods.ts > safelyUpdatePaymentForRefund > throws error when payment is not found
[selectById] Error selecting payments with id yK79kXB8VnFEgsdrhk7Vb: Error: No payments found with id: yK79kXB8VnFEgsdrhk7Vb
    at selectById [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:138:15[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at safelyUpdatePaymentForRefund [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/paymentMethods.ts:208:19[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/paymentMethods.test.ts:127:9
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/paymentMethods.test.ts:124:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > processUsageEventProcessedLedgerCommand > should process a usage event and apply credits partially 472ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > bulkInsertLedgerEntries > should ensure all inserted entries have the correct common properties (e.g., organizationId, livemode if applicable)
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateSubscriberBreakdown > should handle no subscriber changes between months
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateSubscriberBreakdown > should handle only new subscribers in the current month
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateSubscriberBreakdown > should handle only churned subscribers in the current month
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateSubscriberBreakdown > should handle both new and churned subscribers
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateSubscriberBreakdown > should handle equal numbers of new and churned subscribers (zero net change)
 ✓ src/db/tableMethods/paymentMethods.test.ts > paymentMethods.ts > safelyUpdatePaymentForRefund > fails if refund is for more than the payment amount
 ✓ src/db/tableMethods/paymentMethods.test.ts > paymentMethods.ts > safelyUpdatePaymentForRefund > throws error when payment is not found
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateSubscriberBreakdown > should handle more new than churned subscribers (positive net change)
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateSubscriberBreakdown > should handle more churned than new subscribers (negative net change)
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > processUsageEventProcessedLedgerCommand > should process a usage event and apply credits fully
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > processBillingPeriodTransitionLedgerCommand > Credit Granting Logic > should create a ledger account if one is missing for an entitlement 334ms
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateSubscriberBreakdown > should handle months that have no active subscriptions
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateSubscriberBreakdown > should handle edge cases where subscribers churn on the first/last day of the month
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateSubscriberBreakdown > should handle subscriptions active in both months (ensure they don't count as new or churned)
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > bulkInsertLedgerEntries > should call the transaction insert method with the provided data
 ✓ src/db/tableMethods/paymentMethods.test.ts > paymentMethods.ts > safelyUpdatePaymentForRefund > throws error when payment is not in a valid state for refund
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateSubscriberBreakdown > should handle churned subscriptions from non-previous subscribers
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateSubscriberBreakdown > should handle new subscriptions started outside current month
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/htmlparser2@8.0.2/node_modules/htmlparser2/lib/esm/index.js" points to missing source files
 ✓ src/db/tableMethods/paymentMethods.test.ts > paymentMethods.ts > safelyUpdatePaymentForRefund > allows updating an already refunded payment
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > calculateSubscriberBreakdown > should handle cancellations in previous month
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/esm/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/htmlparser2@8.0.2/node_modules/htmlparser2/lib/esm/Parser.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/domutils@3.1.0/node_modules/domutils/lib/esm/index.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/htmlparser2@8.0.2/node_modules/htmlparser2/lib/esm/Tokenizer.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/esm/decode.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/esm/encode.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/esm/escape.js" points to missing source files
stderr | src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > processUsageEventProcessedLedgerCommand > should throw an error if findOrCreateLedgerAccountsForSubscriptionAndUsageMeters effectively fails (e.g. bad subscriptionId in command)
[createInsertManyFunction] Error inserting into ledger_transactions: DrizzleQueryError: Failed query: insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"
params: ledger_transaction_oiclpj6EYV9n7ghX2D1TL,__TEST__,__TEST__,true,org_v1Isf6FkfA4FzSopIZzpU,usage_event_processed,usage_event,usage_event_yvmUw38IXGvnDvSp7ttRB,Test with invalid subscriptionId,,sub_invalid_1757258431782
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
    at processUsageEventProcessedLedgerCommand [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/ledgerManager/usageEventProcessedLedgerCommand.ts:163:29[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts:1028:16
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m {
  query: [32m'insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"'[39m,
  params: [
    [32m'ledger_transaction_oiclpj6EYV9n7ghX2D1TL'[39m,
    [32m'__TEST__'[39m,
    [32m'__TEST__'[39m,
    [33mtrue[39m,
    [32m'org_v1Isf6FkfA4FzSopIZzpU'[39m,
    [32m'usage_event_processed'[39m,
    [32m'usage_event'[39m,
    [32m'usage_event_yvmUw38IXGvnDvSp7ttRB'[39m,
    [32m'Test with invalid subscriptionId'[39m,
    [1mnull[22m,
    [32m'sub_invalid_1757258431782'[39m
  ],
  cause: PostgresError: insert or update on table "ledger_transactions" violates foreign key constraint "ledger_transactions_subscription_id_subscriptions_id_fk"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'23503'[39m,
    detail: [32m'Key (subscription_id)=(sub_invalid_1757258431782) is not present in table "subscriptions".'[39m,
    schema_name: [32m'public'[39m,
    table_name: [32m'ledger_transactions'[39m,
    constraint_name: [32m'ledger_transactions_subscription_id_subscriptions_id_fk'[39m,
    file: [32m'ri_triggers.c'[39m,
    line: [32m'2596'[39m,
    routine: [32m'ri_ReportViolation'[39m,
    query: [32m'insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"'[39m,
    parameters: [
      [32m'ledger_transaction_oiclpj6EYV9n7ghX2D1TL'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [32m't'[39m,
      [32m'org_v1Isf6FkfA4FzSopIZzpU'[39m,
      [32m'usage_event_processed'[39m,
      [32m'usage_event'[39m,
      [32m'usage_event_yvmUw38IXGvnDvSp7ttRB'[39m,
      [32m'Test with invalid subscriptionId'[39m,
      [1mnull[22m,
      [32m'sub_invalid_1757258431782'[39m
    ],
    args: [
      [32m'ledger_transaction_oiclpj6EYV9n7ghX2D1TL'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'org_v1Isf6FkfA4FzSopIZzpU'[39m,
      [32m'usage_event_processed'[39m,
      [32m'usage_event'[39m,
      [32m'usage_event_yvmUw38IXGvnDvSp7ttRB'[39m,
      [32m'Test with invalid subscriptionId'[39m,
      [1mnull[22m,
      [32m'sub_invalid_1757258431782'[39m
    ],
    types: [
        [33m25[39m, [33m25[39m,    [33m25[39m,
        [33m16[39m, [33m25[39m, [33m22148[39m,
        [33m25[39m, [33m25[39m,    [33m25[39m,
      [33m3802[39m, [33m25[39m
    ]
  }
}

Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/domutils@3.1.0/node_modules/domutils/lib/esm/stringify.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/domutils@3.1.0/node_modules/domutils/lib/esm/traversal.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/domutils@3.1.0/node_modules/domutils/lib/esm/manipulation.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/domutils@3.1.0/node_modules/domutils/lib/esm/querying.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/domutils@3.1.0/node_modules/domutils/lib/esm/legacy.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/domutils@3.1.0/node_modules/domutils/lib/esm/helpers.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/domutils@3.1.0/node_modules/domutils/lib/esm/feeds.js" points to missing source files
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > getCurrentActiveSubscribers > should return zero when there are no active subscribers
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > processBillingPeriodTransitionLedgerCommand > Credit Granting Logic > should not grant "Once" credits on subsequent billing periods
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > getCurrentActiveSubscribers > should correctly count multiple active subscribers
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > getCurrentActiveSubscribers > should return zero when there are only canceled subscriptions
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > getCurrentActiveSubscribers > should correctly count a mix of active and canceled subscriptions
 ✓ src/db/tableMethods/paymentMethods.test.ts > paymentMethods.ts > safelyUpdatePaymentStatus > successfully updates payment status
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/esm/generated/decode-data-xml.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/esm/decode_codepoint.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/esm/generated/decode-data-html.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/esm/generated/encode-html.js" points to missing source files
stderr | src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > processUsageEventProcessedLedgerCommand > should throw an error if findOrCreateLedgerAccountsForSubscriptionAndUsageMeters effectively fails (e.g. bad subscriptionId in command)
[createInsertFunction] Error inserting single item into ledger_transactions: Error: Failed to insert items into ledger_transactions: Failed query: insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"
params: ledger_transaction_oiclpj6EYV9n7ghX2D1TL,__TEST__,__TEST__,true,org_v1Isf6FkfA4FzSopIZzpU,usage_event_processed,usage_event,usage_event_yvmUw38IXGvnDvSp7ttRB,Test with invalid subscriptionId,,sub_invalid_1757258431782
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:214:13
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
[90m    ... 4 lines matching cause stack trace ...[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts:1025:5
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  [cause]: DrizzleQueryError: Failed query: insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"
  params: ledger_transaction_oiclpj6EYV9n7ghX2D1TL,__TEST__,__TEST__,true,org_v1Isf6FkfA4FzSopIZzpU,usage_event_processed,usage_event,usage_event_yvmUw38IXGvnDvSp7ttRB,Test with invalid subscriptionId,,sub_invalid_1757258431782
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
      at processUsageEventProcessedLedgerCommand [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/ledgerManager/usageEventProcessedLedgerCommand.ts:163:29[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts:1028:16
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m {
    query: [32m'insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"'[39m,
    params: [
      [32m'ledger_transaction_oiclpj6EYV9n7ghX2D1TL'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'org_v1Isf6FkfA4FzSopIZzpU'[39m,
      [32m'usage_event_processed'[39m,
      [32m'usage_event'[39m,
      [32m'usage_event_yvmUw38IXGvnDvSp7ttRB'[39m,
      [32m'Test with invalid subscriptionId'[39m,
      [1mnull[22m,
      [32m'sub_invalid_1757258431782'[39m
    ],
    cause: PostgresError: insert or update on table "ledger_transactions" violates foreign key constraint "ledger_transactions_subscription_id_subscriptions_id_fk"
        at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
        at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
        at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
    [90m    at Socket.emit (node:events:507:28)[39m
    [90m    at addChunk (node:internal/streams/readable:559:12)[39m
    [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
    [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
    [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
        at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
        at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
        at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
      severity_local: [32m'ERROR'[39m,
      severity: [32m'ERROR'[39m,
      code: [32m'23503'[39m,
      detail: [32m'Key (subscription_id)=(sub_invalid_1757258431782) is not present in table "subscriptions".'[39m,
      schema_name: [32m'public'[39m,
      table_name: [32m'ledger_transactions'[39m,
      constraint_name: [32m'ledger_transactions_subscription_id_subscriptions_id_fk'[39m,
      file: [32m'ri_triggers.c'[39m,
      line: [32m'2596'[39m,
      routine: [32m'ri_ReportViolation'[39m,
      query: [32m'insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"'[39m,
      parameters: [36m[Array][39m,
      args: [36m[Array][39m,
      types: [36m[Array][39m
    }
  }
}

 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "posted" > should return 0 if no posted entries exist for the ledger account 347ms
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > processUsageEventProcessedLedgerCommand > should throw an error if findOrCreateLedgerAccountsForSubscriptionAndUsageMeters effectively fails (e.g. bad subscriptionId in command)
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > getCurrentActiveSubscribers > should handle month boundaries (first/last day of month)
[90m11:20:32:171[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:32:171[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:32:171[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:32:171[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:32:171[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:32:171[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:32:171[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:32:171[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:20:32:171[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:20:32:171[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:20:32:171[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:171[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:20:32:171[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:32:171[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:32:172[0m [34m[xhr][0m cleared global instance! xhr
[90m11:20:32:172[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:20:32:172[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:20:32:172[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:20:32:172[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:172[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:20:32:172[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:32:172[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:32:172[0m [34m[fetch][0m cleared global instance! fetch
[90m11:20:32:172[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:20:32:172[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:20:32:172[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:20:32:172[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:172[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:20:32:172[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:172[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:32:172[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:20:32:172[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:20:32:172[0m [34m[websocket][0m cleared global instance! websocket
[90m11:20:32:172[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:20:32:172[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:20:32:172[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:172[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:20:32:172[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:32:172[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:32:172[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:32:172[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:32:172[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:32:172[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:32:172[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:32:172[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:172[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:32:172[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:32:172[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:173[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:32:173[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:32:173[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:173[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:173[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:32:173[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:32:173[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:32:173[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:32:173[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:32:173[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:32:173[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:32:173[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:32:173[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:32:173[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:173[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:32:173[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:32:173[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:173[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:32:173[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:32:173[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:173[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:173[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:32:173[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:32:173[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:32:173[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:32:173[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:32:173[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:32:173[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:32:173[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:32:173[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:32:173[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:173[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:32:173[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:32:173[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:173[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:32:173[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:32:173[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:173[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:173[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:32:173[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > processUsageEventProcessedLedgerCommand > should create a new ledger account if one does not exist for the subscription and usage meter
 ✓ src/db/tableMethods/paymentMethods.test.ts > paymentMethods.ts > safelyUpdatePaymentStatus > throws error when payment is in a terminal state
 ✓ src/db/tableMethods/paymentMethods.test.ts > paymentMethods.ts > safelyUpdatePaymentStatus > allows updating from pending to processing
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > processBillingPeriodTransitionLedgerCommand > Credit Expiration Logic > should expire credits that have an expiration date on or before the end of the previous billing period
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > Edge Cases and Error Handling > should handle invalid date ranges (end date before start date)
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > Edge Cases and Error Handling > should handle extremely large date ranges
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > Edge Cases and Error Handling > should handle dates in the future
 ✓ src/utils/billing-dashboard/subscriberCalculationHelpers.test.ts > Edge Cases and Error Handling > should handle start date equals end date (single-day/month period)
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > processUsageEventProcessedLedgerCommand > should process a usage event with no credits available/applied, with prior usage cost
[90m11:20:32:815[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:32:815[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:32:815[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:32:815[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:32:815[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:32:815[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:32:815[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:32:815[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:20:32:815[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:20:32:815[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:20:32:816[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:816[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:20:32:816[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:32:816[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:32:816[0m [34m[xhr][0m cleared global instance! xhr
[90m11:20:32:816[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:20:32:816[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:20:32:816[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:20:32:816[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:816[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:20:32:816[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:32:816[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:32:816[0m [34m[fetch][0m cleared global instance! fetch
[90m11:20:32:816[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:20:32:816[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:20:32:816[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:20:32:816[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:816[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:20:32:816[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:816[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:32:816[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:20:32:816[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:20:32:816[0m [34m[websocket][0m cleared global instance! websocket
[90m11:20:32:816[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:20:32:816[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:20:32:817[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:817[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:20:32:817[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:32:817[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:32:817[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:32:817[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:32:817[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:32:817[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:32:817[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:32:817[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:817[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:32:817[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:32:817[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:817[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:32:817[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:32:817[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:817[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:817[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:32:817[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:32:817[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:32:817[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:32:817[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:32:817[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:32:817[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:32:817[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:32:817[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:32:817[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:817[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:32:817[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:32:817[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:817[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:32:817[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:32:817[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:817[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:817[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:32:817[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:32:817[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:32:817[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:32:817[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:32:817[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:32:817[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:32:817[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:32:817[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:32:817[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:817[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:32:817[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:32:817[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:817[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:32:817[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:32:817[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:32:817[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:32:817[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:32:818[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > processUsageEventProcessedLedgerCommand > should process a usage event and apply credits partially, with prior usage cost
 ✓ src/db/ledgerManager/usageEventProcessedLedgerCommand.test.ts > processUsageEventProcessedLedgerCommand > should not apply credits if available balance is zero due to prior usage
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "posted" > should correctly sum amounts for multiple posted credit entries 309ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "posted" > should correctly sum amounts for multiple posted debit entries (resulting in a negative balance) 306ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "posted" > should correctly calculate the balance with a mix of posted credit and debit entries
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > processBillingPeriodTransitionLedgerCommand > Credit Expiration Logic > should correctly calculate the expired amount for a partially used credit 360ms
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > processBillingPeriodTransitionLedgerCommand > Credit Expiration Logic > should NOT expire credits that have no expiration date (expires_at is null)
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > processBillingPeriodTransitionLedgerCommand > Credit Expiration Logic > should NOT expire credits with an expiration date in the future
 ✓ src/db/tableMethods/paymentMethods.test.ts > paymentMethods.ts > safelyUpdatePaymentStatus > allows updating from processing to succeeded
 ✓ src/db/tableMethods/paymentMethods.test.ts > selectRevenueDataForOrganization > Scenario 1: Basic operation with revenue data present
 ✓ src/db/tableMethods/paymentMethods.test.ts > selectRevenueDataForOrganization > Scenario 2: Filtering by `productId` with matching revenue data
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > processBillingPeriodTransitionLedgerCommand > Combined Orchestration > should correctly grant new credits AND expire old credits in a single run
 ✓ src/db/tableMethods/paymentMethods.test.ts > selectRevenueDataForOrganization > Scenario 3: Filtering by `productId` with no matching revenue data
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > processBillingPeriodTransitionLedgerCommand > Combined Orchestration > should create a transaction but no ledger entries if there are no entitlements and no expiring credits
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Initial Credit Grants for Non-Renewing Subscriptions > should grant all credits (Once and EveryBillingPeriod) for initial non-renewing subscription 417ms
 ✓ src/db/tableMethods/paymentMethods.test.ts > selectRevenueDataForOrganization > Scenario 4: No payments for the organization in the specified date range
 ✓ src/db/tableMethods/paymentMethods.test.ts > selectRevenueDataForOrganization > Scenario 5: Different `revenueChartIntervalUnit` values > should correctly aggregate for 'day' interval
 ✓ src/db/tableMethods/paymentMethods.test.ts > selectRevenueDataForOrganization > Scenario 5: Different `revenueChartIntervalUnit` values > should correctly aggregate for 'week' interval
 ✓ src/db/tableMethods/paymentMethods.test.ts > selectRevenueDataForOrganization > Scenario 5: Different `revenueChartIntervalUnit` values > should correctly aggregate for 'month' interval
 ✓ src/db/tableMethods/paymentMethods.test.ts > selectRevenueDataForOrganization > Scenario 5: Different `revenueChartIntervalUnit` values > should correctly aggregate for 'year' interval
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "posted" > should ignore pending entries (both credit and debit)
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "posted" > should ignore discarded entries (both posted and pending with discardedAt set in the past)
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "posted" > should include posted entries with future discardedAt dates
 ✓ src/db/tableMethods/paymentMethods.test.ts > selectRevenueDataForOrganization > Scenario 6: Edge cases for date ranges > Sub-Scenario 6.1: `fromDate` and `toDate` are the same day
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "posted" > should only consider entries for the specified ledgerAccountId 311ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "pending" (as per current implementation: includes posted and (non-discarded) pending, credit and debit) > should return 0 if no posted or non-discarded pending entries exist for the ledger account
 ✓ src/db/tableMethods/paymentMethods.test.ts > selectRevenueDataForOrganization > Scenario 6: Edge cases for date ranges > Sub-Scenario 6.2: Date range spans exactly one interval unit (month)
 ✓ src/db/tableMethods/paymentMethods.test.ts > selectRevenueDataForOrganization > Scenario 6: Edge cases for date ranges > Sub-Scenario 6.3: Date range covers a partial interval (month)
 ✓ src/db/tableMethods/paymentMethods.test.ts > selectRevenueDataForOrganization > Scenario 7: Payments with various refund amounts
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Initial Credit Grants for Non-Renewing Subscriptions > should not grant recurring credits on subsequent calls for non-renewing subscriptions 423ms
[90m11:20:34:393[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:34:393[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:34:393[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:34:393[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:34:393[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:34:393[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:34:393[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:34:393[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:20:34:393[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:20:34:393[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:20:34:394[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:20:34:394[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:20:34:394[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:34:394[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:34:394[0m [34m[xhr][0m cleared global instance! xhr
[90m11:20:34:394[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:20:34:394[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:20:34:394[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:20:34:394[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:20:34:394[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:20:34:394[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:34:394[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:34:394[0m [34m[fetch][0m cleared global instance! fetch
[90m11:20:34:394[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:20:34:394[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:20:34:394[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:20:34:394[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:20:34:394[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:20:34:394[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:34:394[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:34:394[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:20:34:394[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:20:34:394[0m [34m[websocket][0m cleared global instance! websocket
[90m11:20:34:394[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:20:34:394[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:20:34:394[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:20:34:394[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:20:34:394[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:34:394[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:34:394[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:34:394[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:34:394[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:34:394[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:34:394[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:34:394[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:34:394[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:34:394[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:34:394[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:34:395[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:34:395[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:34:395[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:34:395[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:34:395[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:34:395[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:34:395[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:34:395[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:34:395[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:34:395[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:34:395[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:34:395[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:34:395[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:34:395[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:34:395[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:34:395[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:34:395[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:34:395[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:34:395[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:34:395[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:34:395[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:34:395[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:34:395[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:34:395[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:34:395[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:34:395[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:34:395[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:34:395[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:34:395[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:34:395[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:34:395[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:34:395[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:34:395[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:34:395[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:34:395[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:34:395[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:34:395[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:34:395[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:34:395[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:34:395[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/tableMethods/paymentMethods.test.ts > selectRevenueDataForOrganization > Scenario 8: `fromDate` is after `toDate`
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "pending" (as per current implementation: includes posted and (non-discarded) pending, credit and debit) > should correctly sum amounts for posted credits and (non-discarded) pending credits
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Initial Credit Grants for Non-Renewing Subscriptions > should create ledger accounts for all usage meters in non-renewing subscriptions 528ms
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/cosmiconfig@9.0.0_typescript@5.5.4/node_modules/cosmiconfig/dist/index.js" points to missing source files
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "pending" (as per current implementation: includes posted and (non-discarded) pending, credit and debit) > should correctly sum amounts for posted debits and (non-discarded) pending debits
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Initial Credit Grants for Non-Renewing Subscriptions > should handle non-renewing subscriptions with zero credits 341ms
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Credit Expiration Behavior for Non-Renewing Subscriptions > should never expire credits for non-renewing subscriptions 384ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "pending" (as per current implementation: includes posted and (non-discarded) pending, credit and debit) > should correctly calculate the balance with a mix of posted and (non-discarded) pending entries (credits and debits)
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "pending" (as per current implementation: includes posted and (non-discarded) pending, credit and debit) > should ignore discarded pending entries
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "pending" (as per current implementation: includes posted and (non-discarded) pending, credit and debit) > should only consider entries for the specified ledgerAccountId 329ms
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Credit Expiration Behavior for Non-Renewing Subscriptions > should skip expiration logic entirely for non_renewing payload type 428ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should return 0 if no posted entries and no non-discarded pending debit entries exist
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/proxy-agent@6.5.0/node_modules/proxy-agent/dist/index.js" points to missing source files
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should correctly calculate balance: (sum of posted credits) - (sum of posted debits) - (sum of non-discarded pending debits) 323ms
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Payload Type Validation > should correctly identify and process non_renewing payload type 401ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should equal "posted" balance if there are no non-discarded pending debit entries
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should include posted credit entries (adds to balance)
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Payload Type Validation > should handle mixed Once and EveryBillingPeriod grants correctly for non-renewing 593ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should include posted debit entries (subtracts from balance) 310ms
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Conversion Scenarios > should maintain existing credits when converting from non-renewing to renewing 443ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should include non-discarded pending debit entries (subtracts from balance)
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should EXCLUDE non-discarded pending credit entries from the calculation
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Conversion Scenarios > should handle CreditTrial to Active conversion with proper ledger entries 423ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should ignore discarded pending debit entries
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Error Handling for Non-Renewing Subscriptions > should handle missing subscription gracefully in non-renewing command 355ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should ignore discarded pending credit entries
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should handle a scenario with only posted credits and pending debits
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Error Handling for Non-Renewing Subscriptions > should validate non-renewing payload structure 321ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should handle a scenario with only posted debits and pending debits 305ms
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Integration with Usage Processing > should correctly apply usage against non-expiring credits from non-renewing subscriptions 456ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should handle a scenario with posted credits, posted debits, pending debits, and pending credits (ignoring pending credits)
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should correctly calculate a negative available balance if pending debits exceed posted credits
[90m11:20:39:79[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:39:79[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:39:79[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:39:79[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:39:79[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:39:79[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:39:79[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:39:79[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:20:39:79[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:20:39:80[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:20:39:81[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:20:39:81[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:20:39:81[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:39:81[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:39:81[0m [34m[xhr][0m cleared global instance! xhr
[90m11:20:39:81[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:20:39:81[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:20:39:81[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:20:39:81[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:20:39:81[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:20:39:81[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:39:81[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:39:81[0m [34m[fetch][0m cleared global instance! fetch
[90m11:20:39:81[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:20:39:81[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:20:39:81[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:20:39:81[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:20:39:81[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:20:39:81[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:39:81[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:39:81[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:20:39:81[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:20:39:81[0m [34m[websocket][0m cleared global instance! websocket
[90m11:20:39:81[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:20:39:81[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:20:39:82[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:20:39:82[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:20:39:82[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:39:82[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:39:82[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:39:82[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:39:82[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:39:82[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:39:82[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:39:82[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:39:82[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:39:82[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:39:82[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:39:82[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:39:82[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:39:82[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:39:82[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:39:82[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:39:82[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:39:82[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:39:82[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:39:82[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:39:82[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:39:82[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:39:82[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:39:82[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:39:82[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:39:82[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:39:82[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:39:82[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:39:82[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:39:82[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:39:82[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:39:82[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:39:82[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:39:83[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:39:83[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:39:83[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:39:83[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:39:83[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:39:83[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:39:83[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:39:83[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:39:83[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:39:83[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:39:83[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:39:83[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:39:83[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:39:83[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:39:83[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:39:83[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:39:83[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:39:83[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/index.test.ts > processBillingPeriodTransitionLedgerCommand > Non-Renewing Subscription Support > Integration with Usage Processing > should handle concurrent credit grants and usage for non-renewing subscriptions 341ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should only consider entries for the specified ledgerAccountId 321ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > balanceType: "available" > should include entries with future discardedAt dates
[90m11:20:39:695[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:39:696[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:39:696[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:39:696[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:39:696[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:39:696[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:39:696[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:39:696[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:20:39:696[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:20:39:696[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:39:696[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:39:697[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:39:697[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:39:697[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:20:39:697[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:20:39:697[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:20:39:697[0m [34m[xhr][0m set global instance! xhr
[90m11:20:39:697[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:39:697[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:39:697[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:39:697[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:39:697[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:20:39:697[0m [34m[fetch][0m set global instance! fetch
[90m11:20:39:697[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:39:697[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:39:697[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:39:698[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:39:698[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:39:698[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:39:698[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:39:698[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:39:698[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:39:698[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:39:698[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:39:698[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:39:698[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:39:698[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:20:39:698[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:20:39:698[0m [34m[websocket][0m set global instance! websocket
[90m11:20:39:699[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:39:699[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:39:699[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:39:699[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:39:699[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:39:699[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:39:699[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:39:699[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:39:699[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:39:699[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:39:699[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:39:699[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:39:699[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:39:699[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:39:699[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:39:699[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:39:699[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:39:699[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:39:699[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:39:699[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:39:699[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:39:699[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:39:699[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:39:699[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:39:699[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:39:699[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:39:699[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:39:699[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:39:699[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:39:699[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:39:699[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:39:699[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:39:699[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:39:699[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:39:699[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:39:699[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:39:699[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:39:699[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:39:699[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:39:699[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:39:699[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:39:699[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:39:699[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:39:699[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:39:699[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:39:699[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:39:699[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:39:699[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:39:699[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:39:700[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:39:700[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:39:700[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:39:700[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:39:700[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:39:700[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:39:700[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:39:700[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:39:700[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:39:700[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:39:700[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:39:700[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:39:700[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:39:700[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:39:700[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:39:700[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:39:700[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:39:700[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:39:700[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:39:700[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:39:700[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:39:700[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:39:700[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:39:700[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:39:700[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:39:700[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:39:700[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:39:700[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:39:700[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:39:700[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:39:700[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:39:700[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:39:700[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:39:700[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:39:700[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:39:700[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:39:700[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:39:700[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:39:700[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:39:700[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:39:700[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:39:700[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:39:700[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:39:700[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:39:700[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:39:700[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:39:700[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > General for aggregateBalanceForLedgerAccountFromEntries (applicable to all balanceTypes) > should correctly filter by ledgerAccountId, not including entries from other accounts 308ms
[90m11:20:39:866[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:40:69[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:40:70[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:40:70[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:40:70[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:40:72[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:40:100[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:40:100[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:40:100[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Basic Functionality > should successfully clone a pricing model with all its products and prices 307ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > General for aggregateBalanceForLedgerAccountFromEntries (applicable to all balanceTypes) > should correctly handle the discardedAt logic: ignore entries if discardedAt is not null and in the past
[90m11:20:40:157[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:40:342[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:40:342[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:40:343[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:40:343[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Basic Functionality > should create a new pricing model with the specified name
[90m11:20:40:351[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:40:351[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:40:351[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:40:351[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > General for aggregateBalanceForLedgerAccountFromEntries (applicable to all balanceTypes) > should correctly handle the discardedAt logic: include entries if discardedAt is null
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Basic Functionality > should set isDefault to false on the cloned pricing model
[90m11:20:40:719[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:40:719[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:40:720[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:720[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:40:720[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:40:720[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:40:720[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:40:720[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:720[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:20:40:720[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:721[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:40:721[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:40:721[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:40:721[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:721[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:20:40:721[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:20:40:721[0m [34m[xhr][0m set global instance! xhr
[90m11:20:40:721[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:721[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:40:721[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:40:721[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:40:721[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:721[0m [34m[fetch][0m set global instance! fetch
[90m11:20:40:721[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:721[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:40:721[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:40:721[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:40:722[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:40:722[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:40:722[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:40:722[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:40:722[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:40:722[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:40:722[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:40:722[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:40:722[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:40:722[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:20:40:722[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:722[0m [34m[websocket][0m set global instance! websocket
[90m11:20:40:723[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:40:723[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:40:723[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:723[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:40:723[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:40:723[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:40:723[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:40:723[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:40:723[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:723[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:40:723[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:40:723[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:40:723[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:40:723[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:723[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:40:723[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:40:723[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:40:723[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:40:723[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:723[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:40:723[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:40:723[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:40:723[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:40:723[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:40:723[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:40:723[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:40:723[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:40:723[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:40:723[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:40:723[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:40:723[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:40:723[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:40:724[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:40:724[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:40:724[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:724[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:40:724[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:40:724[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:40:724[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:40:724[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:40:724[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:724[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:40:724[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:40:724[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:40:724[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:40:724[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:724[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:40:724[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:40:724[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:40:724[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:40:724[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:724[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:40:724[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:40:724[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:40:724[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:40:724[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:40:724[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:40:724[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:40:724[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:40:724[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:40:724[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:40:724[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:40:724[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:40:724[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:40:725[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:40:725[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:40:725[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:725[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:40:725[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:40:725[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:40:725[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:40:725[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:40:725[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:725[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:40:725[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:40:725[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:40:725[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:40:725[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:725[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:40:725[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:40:725[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:40:725[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:40:725[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:725[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:40:725[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:40:725[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:40:725[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:40:725[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:40:725[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:40:725[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:40:725[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:40:725[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:40:725[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:40:725[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:40:725[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:40:725[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:40:738[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:40:738[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:40:738[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:738[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:40:739[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:40:739[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:40:739[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:40:739[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:739[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:20:40:739[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:739[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:40:739[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:40:739[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:40:739[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:739[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:20:40:739[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:20:40:739[0m [34m[xhr][0m set global instance! xhr
[90m11:20:40:739[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:739[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:40:739[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:40:739[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:40:739[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:740[0m [34m[fetch][0m set global instance! fetch
[90m11:20:40:740[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:740[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:40:740[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:40:740[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:40:740[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:40:740[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:40:740[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:40:740[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:40:740[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:40:740[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:40:740[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:40:740[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:40:740[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:40:741[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:20:40:741[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:741[0m [34m[websocket][0m set global instance! websocket
[90m11:20:40:741[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:40:741[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:40:741[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:741[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:40:741[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:40:741[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:40:741[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:40:741[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:40:741[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:741[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:40:741[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:40:741[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:40:741[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:40:741[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:741[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:40:741[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:40:741[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:40:741[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:40:741[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:741[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:40:741[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:40:741[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:40:741[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:40:741[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:40:741[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:40:741[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:40:741[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:40:741[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:40:741[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:40:741[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:40:741[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:40:741[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:40:742[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:40:742[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:40:742[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:742[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:40:742[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:40:742[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:40:742[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:40:742[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:40:742[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:742[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:40:742[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:40:742[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:40:742[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:40:742[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:742[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:40:742[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:40:742[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:40:742[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:40:742[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:742[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:40:742[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:40:742[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:40:742[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:40:742[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:40:742[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:40:742[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:40:742[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:40:742[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:40:742[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:40:742[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:40:742[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:40:742[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:40:742[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:40:742[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:40:742[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:742[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:40:742[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:40:742[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:40:742[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:40:742[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:40:742[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:742[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:40:742[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:40:742[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:40:742[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:40:742[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:743[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:40:743[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:40:743[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:40:743[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:40:743[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:743[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:40:743[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:40:743[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:40:743[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:40:743[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:40:743[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:40:743[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:40:743[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:40:743[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:40:743[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:40:743[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:40:743[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:40:743[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Basic Functionality > should preserve the livemode value from the source pricing model
[90m11:20:40:885[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:40:885[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:40:885[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:885[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:40:885[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:40:886[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:40:886[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:40:886[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:886[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:20:40:886[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:886[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:40:886[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:40:886[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:40:886[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:886[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:20:40:886[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:20:40:886[0m [34m[xhr][0m set global instance! xhr
[90m11:20:40:886[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:886[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:40:886[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:40:886[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:40:887[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:887[0m [34m[fetch][0m set global instance! fetch
[90m11:20:40:887[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:887[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:40:887[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:40:887[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:40:887[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:40:887[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:40:887[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:40:888[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:40:888[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:40:888[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:40:888[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:40:888[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:40:888[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:40:888[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:20:40:888[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:888[0m [34m[websocket][0m set global instance! websocket
[90m11:20:40:888[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:40:888[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:40:888[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:888[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:40:889[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:40:889[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:40:889[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:40:889[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:40:889[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:889[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:40:889[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:40:889[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:40:889[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:40:889[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:889[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:40:889[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:40:889[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:40:889[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:40:889[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:889[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:40:889[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:40:889[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:40:889[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:40:889[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:40:889[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:40:889[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:40:889[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:40:889[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:40:889[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:40:890[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:40:890[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:40:890[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:40:890[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:40:890[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:40:890[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:890[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:40:890[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:40:890[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:40:890[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:40:890[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:40:890[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:890[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:40:890[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:40:890[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:40:890[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:40:890[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:890[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:40:890[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:40:890[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:40:890[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:40:890[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:890[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:40:890[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:40:890[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:40:890[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:40:890[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:40:890[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:40:890[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:40:890[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:40:890[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:40:890[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:40:890[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:40:891[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:40:891[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:40:891[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:40:891[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:40:891[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:40:891[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:40:891[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:40:891[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:40:891[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:40:891[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:40:891[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:891[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:40:891[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:40:891[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:40:891[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:40:891[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:891[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:40:891[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:40:891[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:40:891[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:40:891[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:40:891[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:40:891[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:40:891[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:40:891[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:40:891[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:40:891[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:40:891[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:40:891[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:40:891[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:40:891[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:40:891[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:40:892[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:40:892[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > General for aggregateBalanceForLedgerAccountFromEntries (applicable to all balanceTypes) > should correctly handle the discardedAt logic: include entries if discardedAt is in the future 453ms
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Basic Functionality > should maintain the same organizationId as the source pricing model
[90m11:20:40:992[0m [34m[websocket][0m constructing the interceptor...
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > PricingModel Scenarios > should handle an empty pricing model (no products)
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > General for aggregateBalanceForLedgerAccountFromEntries (applicable to all balanceTypes) > should handle an empty ledger (no entries at all for the account) and return 0
[90m11:20:41:169[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:41:170[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:41:170[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:41:170[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:41:175[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:41:175[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:41:176[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:41:176[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/authenticatedTransaction.test.ts > authenticatedTransaction > JWT Claims Validation > should throw error when invalid API key is provided 316ms
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow > creates a subscription with correct priced items, and billing run 467ms
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > PricingModel Scenarios > should handle a pricing model with multiple products correctly
 ✓ src/db/authenticatedTransaction.test.ts > authenticatedTransaction > JWT Claims Validation > should work with valid API key authentication
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateBalanceForLedgerAccountFromEntries > General for aggregateBalanceForLedgerAccountFromEntries (applicable to all balanceTypes) > should handle entries with amount 0 correctly 337ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Billing Period State Management > should mark billing period as PastDue when current date is after end date 502ms
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow > throws an error if the customer already has an active subscription
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Product Cloning > should clone all products from the source pricing model
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > should return correct balance for a single usage credit ID with positive balance
 ✓ src/db/authenticatedTransaction.test.ts > authenticatedTransaction > Database Configuration Setup > should properly set database context for live mode
[90m11:20:41:699[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:41:700[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:41:700[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:41:700[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:41:700[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:41:700[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:41:700[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:41:700[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:20:41:700[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:20:41:700[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:41:700[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:41:700[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:41:701[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:41:701[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:20:41:701[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:20:41:701[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:20:41:701[0m [34m[xhr][0m set global instance! xhr
[90m11:20:41:701[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:41:701[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:41:701[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:41:701[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:41:701[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:20:41:701[0m [34m[fetch][0m set global instance! fetch
[90m11:20:41:701[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:41:701[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:41:701[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:41:702[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:41:702[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:41:702[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:41:702[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:41:702[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:41:702[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:41:702[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:41:702[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:41:702[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:41:702[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:41:703[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:20:41:703[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:20:41:703[0m [34m[websocket][0m set global instance! websocket
[90m11:20:41:703[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:41:703[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:41:703[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:41:703[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:41:703[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:41:703[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:41:703[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:41:703[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:41:703[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:41:703[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:41:703[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:41:703[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:41:703[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:41:703[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:41:703[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:41:703[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:41:703[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:41:703[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:41:703[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:41:703[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:41:703[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:41:703[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:41:703[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:41:703[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:41:703[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:41:703[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:41:703[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:41:704[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:41:704[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:41:704[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:41:704[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:41:704[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:41:704[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:41:704[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:41:704[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:41:704[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:41:704[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:41:704[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:41:704[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:41:704[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:41:704[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:41:704[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:41:704[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:41:704[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:41:704[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:41:704[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:41:704[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:41:704[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:41:704[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:41:704[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:41:704[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:41:704[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:41:704[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:41:704[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:41:704[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:41:704[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:41:704[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:41:704[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:41:704[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:41:704[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:41:704[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:41:704[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:41:704[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:41:704[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:41:704[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:41:704[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:41:704[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:41:704[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:41:705[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:41:705[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:41:705[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:41:705[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:41:705[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:41:705[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:41:705[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:41:705[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:41:705[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:41:705[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:41:705[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:41:705[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:41:705[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:41:705[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:41:705[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:41:705[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:41:705[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:41:705[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:41:705[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:41:705[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:41:705[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:41:705[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:41:705[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:41:705[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:41:705[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:41:705[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:41:705[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:41:705[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Product Cloning > should assign new IDs to the cloned products
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Billing Period State Management > should mark billing period as Completed when all payments are settled
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow > does not throw an error if creating a subscription for a customer with no active subscriptions, but past non-active subscriptions 373ms
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Product Cloning > should preserve all product attributes except ID and pricingModelId
 ✓ src/db/authenticatedTransaction.test.ts > authenticatedTransaction > Database Configuration Setup > should set livemode configuration correctly for test mode
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > should return correct balance for a single usage credit ID with zero balance
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Product Cloning > should correctly set the pricingModelId on cloned products to the new pricing model ID
 ✓ src/db/authenticatedTransaction.test.ts > authenticatedTransaction > Database Configuration Setup > should handle transaction function errors gracefully
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Payment Intent Creation and Confirmation > should create a payment intent for the correct amount 387ms
[90m11:20:42:196[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:42:196[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:42:196[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:42:196[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:42:196[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:42:196[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:42:196[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:42:196[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:20:42:197[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:20:42:197[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:42:197[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:42:197[0m [34m[xhr:apply][0m applying the interceptor...
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow > creates billing periods correctly for trial subscriptions 384ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > should return correct balances for multiple distinct usage credit IDs 349ms
[90m11:20:42:318[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:42:318[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:20:42:318[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Price Cloning > should clone all prices for each product
[90m11:20:42:321[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:20:42:321[0m [34m[xhr][0m set global instance! xhr
[90m11:20:42:321[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:42:321[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:42:323[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:42:323[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:42:323[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:20:42:323[0m [34m[fetch][0m set global instance! fetch
[90m11:20:42:323[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:42:323[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:42:323[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:42:324[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:42:324[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:42:324[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:42:324[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:42:324[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:42:324[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:42:324[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:42:324[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:42:324[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:42:324[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:42:324[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:20:42:324[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:20:42:325[0m [34m[websocket][0m set global instance! websocket
[90m11:20:42:325[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:42:325[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:42:325[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:42:325[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:42:325[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:42:325[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:42:325[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:42:325[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:42:325[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:42:325[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:42:325[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:42:325[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:42:325[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:42:325[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:42:325[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:42:325[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:42:325[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:42:325[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:42:325[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:42:325[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:42:325[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:42:325[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:42:325[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:42:325[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:42:325[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:42:325[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:42:325[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:42:325[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:42:325[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:42:325[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:42:325[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:42:325[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:42:325[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:42:325[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:42:325[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:42:325[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:42:325[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:42:325[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:42:325[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:42:326[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:42:326[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:42:326[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:42:326[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:42:326[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:42:326[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:42:326[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:42:326[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:42:326[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:42:326[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:42:326[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:42:326[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:42:326[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:42:326[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:42:326[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:42:326[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:42:326[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:42:326[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:42:326[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:42:326[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:42:326[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:42:326[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:42:327[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:42:327[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:42:327[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:42:327[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:42:327[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:42:327[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:42:327[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:42:327[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:42:327[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:42:327[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:42:327[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:42:327[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:42:327[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:42:327[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:42:327[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:42:327[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:42:327[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:42:327[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:42:327[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:42:327[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:42:327[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:42:327[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:42:327[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:42:327[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:42:328[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:42:328[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:42:328[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:42:328[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:42:328[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:42:328[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:42:328[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:42:328[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:42:328[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:42:328[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:42:328[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/db/authenticatedTransaction.test.ts > comprehensiveAuthenticatedTransaction > JWT Claims Validation > should throw error when invalid API key is provided
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Subscription Creation > Non-Renewing (Credit Trial) Subscriptions > should create a subscription with renews: false when startsWithCreditTrial is true 526ms
 ✓ src/db/authenticatedTransaction.test.ts > comprehensiveAuthenticatedTransaction > JWT Claims Validation > should work with valid organization_id in JWT claims
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > should correctly calculate balance with posted credits and pending debits
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Price Cloning > should assign new IDs to the cloned prices
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Subscription Creation > Non-Renewing (Credit Trial) Subscriptions > should not create billing period for credit trial subscriptions 318ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Payment Intent Creation and Confirmation > should not create a payment intent if the invoice is in a terminal state 485ms
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow > price type behavior > sets runBillingAtPeriodStart to false for usage price 400ms
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > should create a new future billing period and billing run when current billing period is terminal and subscription is active 327ms
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Price Cloning > should preserve all price attributes except ID and productId
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > should ignore pending credits when calculating available balance
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > should throw an error if the billing period endDate is in the future
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Subscription Creation > Non-Renewing (Credit Trial) Subscriptions > should not create billing run for credit trial subscriptions
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Price Cloning > should associate prices with the correct new product IDs
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Payment Intent Creation and Confirmation > should calculate the correct amount to charge based on total due and amount paid
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow > price type behavior > sets runBillingAtPeriodStart to true for subscription price
 ✓ src/db/authenticatedTransaction.test.ts > comprehensiveAuthenticatedTransaction > Transaction Output Processing > should process events when eventsToLog is provided 444ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > should correctly calculate available balance with mixed statuses for a single usage credit ID
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Subscription Creation > Non-Renewing (Credit Trial) Subscriptions > should not set billing cycle anchor for credit trial subscriptions
 ✓ src/db/authenticatedTransaction.test.ts > comprehensiveAuthenticatedTransaction > Transaction Output Processing > should handle transaction output with no additional processing
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Data Integrity > should not modify the original pricing model, its products, or prices
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > should mark the current billing period as Completed if fully paid 329ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Payment Intent Creation and Confirmation > should return 0 when amount paid equals or exceeds total due
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow > price type behavior > throws if price is not subscription type
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Subscription Creation > Renewing Subscriptions > should create a subscription with renews: true for standard subscriptions
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > should correctly calculate balance for a partially used credit
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > should return early if the subscription is in a terminal state
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Transaction Handling > should execute all operations within the provided transaction
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Fee Calculation and Total Due Amount > should calculate the correct fee and total due amount
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > should return an empty array if no ledger entries exist for the account
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > should cancel the subscription if cancelScheduledAt is in the past
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Subscription Creation > Renewing Subscriptions > should create billing period for renewing subscriptions
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow > doesn't recreate subscriptions, billing periods, or billing period items for the same setup intent 309ms
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Usage Meters Cloning > should clone usage meters with preserved slugs
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > should return an empty array if entries exist for the account but none have a sourceUsageCreditId
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > should create a new active billing period and billing run for active subscription with valid payment method
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Subscription Creation > Renewing Subscriptions > should create billing run for renewing subscriptions with payment method
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Usage Meters Cloning > should handle pricing model with no usage meters
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow > should NOT have a billingRun if no defaultPaymentMethod is provided and customer has no payment method
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Fee Calculation and Total Due Amount > should handle different currencies correctly 376ms
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Subscription Creation > Renewing Subscriptions > should create trial subscription with renews: true when trialEnd is provided
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > should create a new active billing period but set subscription to PastDue when no payment method exists
 ✓ src/db/authenticatedTransaction.test.ts > RLS Access Control with selectOrganizations > Single Organization Access > should only return organizations for current users organization_id 835ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > should return an empty array if entries with sourceUsageCreditId exist but none match "available" or non-discarded criteria for any credit ID
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Features Cloning > should clone features with preserved slugs
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow > should execute with a billingRun if price has no trial period, customer has a default payment method, but no defaultPaymentMethodId is provided
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > should not create a new billing period if subscription.cancelScheduledAt is set and >= current billing period end date
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Fee Calculation and Total Due Amount > should handle different billing period items correctly
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Billing Period Transitions > Non-Renewing Subscriptions > should throw error when attempting to transition a CreditTrial subscription
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow > throws an error if defaultPaymentMethod customerId does not match customer id
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Features Cloning > should handle features with usage meter dependencies
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Billing Period Transitions > Non-Renewing Subscriptions > should not create future billing periods for non-renewing subscriptions
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > should only consider entries for the specified ledgerAccountId in scopedWhere 311ms
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > should mark the billing period as Completed when total due exactly equals total paid
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Billing Period Transitions > Non-Renewing Subscriptions > should not schedule billing runs for non-renewing subscriptions
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow billing run creation > creates a billing run when price is subscription type and a default payment method exists
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Fee Calculation and Total Due Amount > should handle livemode correctly 324ms
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > should throw an error when billing period endDate is missing
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow billing run creation > does NOT create a billing run when price is subscription type but no default payment method exists
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Product Features Cloning > should clone product features associations
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > should handle entries with amount 0 correctly, not affecting balance sums but processed without error
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Billing Period Transitions > Renewing Subscriptions > should create next billing period when current period ends
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > should create a new future billing period and billing run when current billing period is terminal and subscription is active
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow billing run creation > does NOT create a billing run when price is usage-based, even if a default payment method exists
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Fee Calculation and Total Due Amount > should handle different payment methods correctly
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > should throw an error when billing period endDate is missing
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow billing run creation > does NOT create a billing run when autoStart is false, even if price is subscription and payment method exists
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Product Features Cloning > should not clone expired product features 329ms
 ✓ src/db/authenticatedTransaction.test.ts > RLS Access Control with selectOrganizations > Single Organization Access > should return empty results when user has no memberships in target organization 896ms
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > should correctly handle multiple usage credits where some have no "available" entries that qualify 355ms
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > Trial Billing Period Cases > should generate trial billing period inserts with trialPeriod true and no billing period items
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Billing Period Transitions > Renewing Subscriptions > should schedule billing run for next period when payment method exists 301ms
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow billing run creation > does not create a billing run if autoStart is not provided
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Invoice Creation and Line Items > should create an invoice with the correct invoice number
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > Trial Billing Period Cases > should create a trial billing period in the database with no billing period items
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > expiresAt field population > should correctly populate expiresAt when a UsageCredit has a non-null expiresAt date
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Billing Period Transitions > Renewing Subscriptions > should transition to PastDue when no payment method exists
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Complete Integration > should clone a complete pricing model with all components 353ms
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Subscription Billing Period Transition > should not transition a subscription with CreditTrial status 302ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Invoice Creation and Line Items > should generate invoice line items from billing period items, ommiting items with 0 quantity 383ms
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with SubscriptionItemFeatures > should create SubscriptionItemFeatures when a subscription is created for a product with features 406ms
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Billing Period Transitions > Renewing Subscriptions > should respect cancelScheduledAt and stop renewal
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > expiresAt field population > should correctly populate expiresAt as null when a UsageCredit has a null expiresAt date 308ms
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with SubscriptionItemFeatures > should create SubscriptionItemFeatures with correct livemode (false) based on the subscription item
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > createInvoiceInsertForBillingRun > should create an invoice with the correct properties
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Livemode Handling > should inherit livemode from source pricing model when destinationEnvironment is not specified 356ms
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Billing Period Transitions > Renewing Subscriptions > should handle subscription that does not renew at period end
 ✓ src/db/authenticatedTransaction.test.ts > RLS Access Control with selectOrganizations > Multi-Organization User Tests > should only return organization matching JWT organization_id even if user has multiple memberships 769ms
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with SubscriptionItemFeatures > should associate the correct usageMeterId with usage credit grant SubscriptionItemFeatures
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > expiresAt field population > should handle multiple usage credits with different expiresAt dates (null and non-null) when querying for the ledger account
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Credit Trial to Paid Conversion > should convert from renews: false to renews: true when adding payment method
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Livemode Handling > should use specified destinationEnvironment (Livemode) when provided
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with SubscriptionItemFeatures > should NOT create SubscriptionItemFeatures if the product has no associated features
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Granting Scenarios > should grant new usage credits for a subscription with entitlements when a new billing period is created 573ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > createInvoiceInsertForBillingRun > should generate invoice number based on customer invoice number base and count 378ms
[90m11:20:45:933[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:45:933[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:45:933[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:45:933[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:45:933[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:45:933[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:45:933[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:45:933[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:20:45:933[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:20:45:933[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:20:45:933[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:20:45:933[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:20:45:933[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:45:933[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:45:933[0m [34m[xhr][0m cleared global instance! xhr
[90m11:20:45:933[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:20:45:933[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:20:45:933[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:20:45:933[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:20:45:933[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:20:45:933[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:45:933[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:45:933[0m [34m[fetch][0m cleared global instance! fetch
[90m11:20:45:933[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:20:45:933[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:20:45:933[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:20:45:933[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:20:45:934[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:20:45:934[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:45:934[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:45:934[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:20:45:934[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:20:45:934[0m [34m[websocket][0m cleared global instance! websocket
[90m11:20:45:934[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:20:45:934[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:20:45:934[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:20:45:934[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:20:45:934[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:45:934[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:45:934[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:45:934[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:45:934[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:45:934[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:45:934[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:45:934[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:45:934[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:45:934[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:45:934[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:45:934[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:45:934[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:45:934[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:45:934[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:45:934[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:45:934[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:45:934[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:45:934[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:45:934[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:45:934[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:45:934[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:45:934[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:45:934[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:45:934[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:45:934[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:45:934[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:45:934[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:45:934[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:45:934[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:45:934[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:45:934[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:45:934[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:45:934[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:45:934[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:45:934[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:45:934[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:45:935[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:45:935[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:45:935[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:45:935[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:45:935[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:45:935[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:45:935[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:45:935[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:45:935[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:45:935[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:45:935[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:45:935[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:45:935[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:45:935[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/tableMethods/ledgerEntryMethods.test.ts > ledgerEntryMethods > aggregateAvailableBalanceForUsageCredit > expiresAt field population > should still return balance information even if the expiresAt date is in the past
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Credit Trial to Paid Conversion > should create first billing period when converting from credit trial
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with SubscriptionItemFeatures > should multiply usage credit grant amount by subscription item quantity for usage based product features
 ✓ src/db/authenticatedTransaction.test.ts > RLS Access Control with selectMemberships > Focused Membership Access > should only return memberships where focused=true and organization_id matches JWT 470ms
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Livemode Handling > should use specified destinationEnvironment (Testmode) when provided
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > createInvoiceInsertForBillingRun > should handle different currencies
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Credit Trial to Paid Conversion > should maintain renews: false when credits are exhausted without payment
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Granting Scenarios > should not grant usage credits if the subscription is in a terminal state 348ms
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow ledger account creation > creates ledger accounts when the price is a usage price
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Livemode Handling > should handle testmode source cloned without destinationEnvironment
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow ledger account creation > does NOT create ledger accounts when the price is not a usage price (e.g., subscription type)
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > createInvoiceInsertForBillingRun > should set the correct livemode value from the billing period
[90m11:20:46:398[0m [34m[websocket][0m constructing the interceptor...
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Ledger and Credit Management > Credits for Non-Renewing Subscriptions > should grant initial credits for credit trial subscriptions
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Granting Scenarios > should not grant usage credits if a future billing period already exists 320ms
[90m11:20:46:580[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:46:580[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:46:580[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:46:580[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:46:582[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:46:582[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:46:582[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:46:582[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Parent Association Validation > should ensure all cloned resources reference only the new pricing model and have no references to old parents 334ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > createInvoiceInsertForBillingRun > should set the correct billing period dates
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Ledger and Credit Management > Credits for Non-Renewing Subscriptions > should not grant recurring credits for non-renewing subscriptions
 ✓ src/db/authenticatedTransaction.test.ts > RLS Access Control with selectMemberships > Focused Membership Access > should return empty when membership exists but focused=false 545ms
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Ledger and Credit Management > Credits for Non-Renewing Subscriptions > should track credit consumption for credit trial subscriptions
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with usage credit entitlements > should grant a "Once" usage credit on subscription creation
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Ledger and Credit Management > Credits for Renewing Subscriptions > should grant credits every billing period for renewing subscriptions
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Granting Scenarios > should not grant usage credits if the subscription is canceled due to a past cancelScheduledAt date
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Ledger and Credit Management > Credits for Renewing Subscriptions > should expire credits at billing period end for renewing subscriptions
 ✓ src/utils/pricingModel.test.ts > clonePricingModelTransaction > Parent Association Validation > should correctly remap multiple features with different usage meter references 316ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > calculateFeeAndTotalAmountDueForBillingPeriod > should calculate fee and total due correctly, ommitting billing period items that do not have any usage attached to them  332ms
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Ledger and Credit Management > Credits for Renewing Subscriptions > should handle Once vs EveryBillingPeriod grants correctly
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Status Management > Non-Renewing Status Transitions > should not transition CreditTrial to PastDue
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with usage credit entitlements > should grant an "EveryBillingPeriod" usage credit on subscription creation 336ms
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Status Management > Non-Renewing Status Transitions > should handle CreditTrial to Active conversion
 ✓ src/db/authenticatedTransaction.test.ts > RLS Access Control with selectMemberships > Cross-User Access Tests > should not return other users memberships even in same organization 474ms
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Status Management > Non-Renewing Status Transitions > should handle CreditTrial to Canceled when credits exhausted
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Status Management > Renewing Status Transitions > should transition Active to PastDue on payment failure
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Granting Scenarios > should not grant usage credits if the subscription has no credit entitlements 399ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > calculateFeeAndTotalAmountDueForBillingPeriod > should handle different currencies correctly 344ms
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Status Management > Renewing Status Transitions > should transition Trial to Active at trial end
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with usage credit entitlements > should grant a usage credit with an expiration date based on the feature
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Status Management > Renewing Status Transitions > should cancel at scheduled time for renewing subscriptions
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with usage credit entitlements > should not create any ledger entries or credits for a standard subscription without entitlements
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Billing Runs > Non-Renewing Subscriptions > should never create billing runs for credit trial subscriptions
 ✓ src/utils/pricingModel.test.ts > createProductTransaction > should create a product with a default price 758ms
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with Credit Trial > should create a subscription with CreditTrial status and no billing run when price.startsWithCreditTrial is true
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > calculateFeeAndTotalAmountDueForBillingPeriod > should handle different billing period items correctly 468ms
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Granting Scenarios > should grant usage credits even if the subscription becomes PastDue 618ms
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Billing Runs > Renewing Subscriptions > should create billing runs at period start for subscription prices
 ✓ src/db/authenticatedTransaction.test.ts > Authentication Method Tests > API Key Authentication > should work with valid API key authentication 707ms
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Billing Runs > Renewing Subscriptions > should create billing runs at period end for usage prices
 ✓ src/db/authenticatedTransaction.test.ts > Authentication Method Tests > API Key Authentication > should create proper JWT claims for API key users
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Billing Runs > Renewing Subscriptions > should handle billing run failures and retries
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with discount redemption > should create a subscription with a single discount redemption
 ✓ src/db/authenticatedTransaction.test.ts > Error Handling Tests > Authentication Failures > should handle invalid API key gracefully
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Edge Cases > should prevent setting interval fields for non-renewing subscriptions
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > calculateFeeAndTotalAmountDueForBillingPeriod > should handle livemode correctly
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Edge Cases > should prevent creating billing periods for non-renewing subscriptions
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Edge Cases > should handle mixed subscription types in same customer account
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with discount redemption > should create a subscription with multiple discount redemptions
[90m11:20:48:255[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:48:255[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:48:255[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:48:255[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:48:255[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:48:255[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:48:255[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:48:255[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:20:48:255[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:20:48:255[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:20:48:255[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:255[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:20:48:255[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:48:255[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:48:255[0m [34m[xhr][0m cleared global instance! xhr
[90m11:20:48:256[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:20:48:256[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:20:48:256[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:20:48:256[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:256[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:20:48:256[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:48:256[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:48:256[0m [34m[fetch][0m cleared global instance! fetch
[90m11:20:48:256[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:20:48:256[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:20:48:256[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:20:48:256[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:256[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:20:48:256[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:256[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:48:256[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:20:48:256[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:20:48:256[0m [34m[websocket][0m cleared global instance! websocket
[90m11:20:48:256[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:20:48:256[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:20:48:256[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:256[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:20:48:256[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:48:256[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:48:256[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:48:256[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:48:256[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:48:256[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:48:256[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:48:257[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:257[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:48:257[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:48:257[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:257[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:48:257[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:48:257[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:257[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:257[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:48:257[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:48:257[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:48:257[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:48:257[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:48:257[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:48:257[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:48:257[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:48:257[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:48:257[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:257[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:48:257[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:48:257[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:257[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:48:257[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:48:257[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:257[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:257[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:48:257[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:48:257[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:48:257[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:48:257[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:48:257[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:48:257[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:48:257[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:48:257[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:48:257[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:257[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:48:257[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:48:257[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:257[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:48:257[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:48:257[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:257[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:257[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:48:258[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/subscriptions/renewsProperty.test.ts > Renewing vs Non-Renewing Subscriptions > Edge Cases > should validate data integrity for renews flag
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Granting Scenarios > should grant multiple, distinct usage credits for different entitlements 486ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > calculateFeeAndTotalAmountDueForBillingPeriod > should handle different payment methods correctly
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with discount redemption > should handle trial periods correctly with discount redemptions
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Billing Run Retry Logic > should schedule billing run retries according to the defined schedule
[90m11:20:48:549[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:48:549[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:48:550[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:48:550[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:48:550[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:48:550[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:48:550[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:48:550[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:20:48:550[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:20:48:550[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:20:48:550[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:550[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:20:48:550[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:48:550[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:48:550[0m [34m[xhr][0m cleared global instance! xhr
[90m11:20:48:550[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:20:48:550[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:20:48:550[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:20:48:550[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:550[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:20:48:550[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:48:550[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:48:550[0m [34m[fetch][0m cleared global instance! fetch
[90m11:20:48:550[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:20:48:550[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:20:48:550[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:20:48:550[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:550[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:20:48:550[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:550[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:48:551[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:20:48:551[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:20:48:551[0m [34m[websocket][0m cleared global instance! websocket
[90m11:20:48:551[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:20:48:551[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:20:48:551[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:551[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:20:48:551[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:48:551[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:48:551[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:48:551[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:48:551[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:48:551[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:48:551[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:48:551[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:551[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:48:551[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:48:551[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:551[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:48:551[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:48:551[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:551[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:551[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:48:551[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:48:551[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:48:551[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:48:551[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:48:551[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:48:551[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:48:551[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:48:551[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:48:551[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:551[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:48:552[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:48:552[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:552[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:48:552[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:48:552[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:552[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:552[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:48:552[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:48:552[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:48:552[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:48:552[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:48:552[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:48:552[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:48:552[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:48:552[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:48:552[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:552[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:48:552[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:48:552[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:552[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:48:552[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:48:552[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:48:552[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:48:552[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:48:552[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/subscriptions/createSubscription/workflow.test.ts > createSubscriptionWorkflow with discount redemption > should handle credit trial with discount redemptions
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Billing Run Retry Logic > should schedule a billing run retry 3 days after the initial attempt
 ✓ src/db/authenticatedTransaction.test.ts > Error Handling Tests > Database Transaction Failures > should handle transaction function errors gracefully 661ms
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Granting Scenarios > should not grant credits to ledger accounts for meters without entitlements 390ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Billing Run Retry Logic > should mark a future billing period as Upcoming when there is no more due
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Granting Scenarios > should not grant "Once" credits on subsequent billing period transitions 410ms
stderr | src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Edge Cases and Error Handling > should throw an error if the customer does not have a Stripe customer ID
Error executing billing run {
  billingRunId: [32m'billing_run_uBh6XxcHEuoLgzeJMXqyj'[39m,
  error: Error: Cannot run billing for a billing period with a customer that does not have a stripe customer id. Customer: cust_awhy9oZZkoQ1o6bfAChxi; Billing Period: billing_period_zJPRvEJVs2o405waSvcnp
      at executeBillingRunCalculationAndBookkeepingSteps [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/billingRunHelpers.ts:580:11[90m)[39m
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at livemode [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/billingRunHelpers.ts:700:13[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:73:20
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
      at executeBillingRun [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/billingRunHelpers.ts:697:7[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/billingRunHelpers.test.ts:928:7
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22
}

 ✓ src/db/authenticatedTransaction.test.ts > Procedure Wrapper Functions > authenticatedProcedureTransaction > should pass input and context to handler function 516ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Edge Cases and Error Handling > should throw an error if the customer does not have a Stripe customer ID 363ms
 ✓ src/db/authenticatedTransaction.test.ts > Procedure Wrapper Functions > authenticatedProcedureComprehensiveTransaction > should pass input and context to handler function
 ✓ src/utils/pricingModel.test.ts > createProductTransaction > should create a product and associate features with it 1680ms
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Expiration Scenarios > should expire a usage credit that has a balance and create a credit_grant_expired ledger entry 510ms
stderr | src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Edge Cases and Error Handling > should throw an error if the payment method does not have a Stripe payment method ID
Error executing billing run {
  billingRunId: [32m'billing_run_e7ZHjb4pK6L7lolojl0sW'[39m,
  error: Error: Cannot run billing for a billing period with a payment method that does not have a stripe payment method id.Payment Method: pm_aRNKlvHcyIVPnj05EfSQj; Billing Period: billing_period_sgr0WsjEqKlr7MrDpXJWf
      at executeBillingRunCalculationAndBookkeepingSteps [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/billingRunHelpers.ts:586:11[90m)[39m
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at livemode [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/billingRunHelpers.ts:700:13[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:73:20
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
      at executeBillingRun [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/billingRunHelpers.ts:697:7[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/billingRunHelpers.test.ts:946:7
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22
}

 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > Edge Cases and Error Handling > should throw an error if the payment method does not have a Stripe payment method ID 374ms
 ✓ src/db/authenticatedTransaction.test.ts > Edge Cases > Database Function Dependencies > should document behavior with current RLS implementation 799ms
 ✓ src/utils/pricingModel.test.ts > createProductTransaction > should create a product without features if featureIds is not provided 819ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > should silently return when trying to execute a billing run that is not in Scheduled status 589ms
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Expiration Scenarios > should expire a usage credit that has a partial balance and create a credit_grant_expired ledger entry for the remaining balance 683ms
 ✓ src/utils/pricingModel.test.ts > editProduct > should add features to a product
 ✓ src/utils/pricingModel.test.ts > editProduct > should remove features from a product
[90m11:20:50:461[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:50:461[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:50:461[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:50:461[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:50:462[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:50:462[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:50:462[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:50:462[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:20:50:462[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:20:50:462[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:20:50:462[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:20:50:462[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:20:50:462[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:50:462[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:50:462[0m [34m[xhr][0m cleared global instance! xhr
[90m11:20:50:462[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:20:50:462[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:20:50:462[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:20:50:462[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:20:50:462[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:20:50:462[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:50:462[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:50:462[0m [34m[fetch][0m cleared global instance! fetch
[90m11:20:50:462[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:20:50:462[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:20:50:462[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:20:50:462[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:20:50:462[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:20:50:462[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:50:462[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:50:462[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:20:50:462[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:20:50:463[0m [34m[websocket][0m cleared global instance! websocket
[90m11:20:50:463[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:20:50:463[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:20:50:463[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:20:50:463[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:20:50:463[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:50:463[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:50:464[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:50:464[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:50:464[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:50:464[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:50:464[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:50:464[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:50:464[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:50:464[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:50:464[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:50:464[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:50:464[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:50:464[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:50:464[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:50:464[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:50:464[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:50:464[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:50:464[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:50:464[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:50:464[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:50:464[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:50:464[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:50:464[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:50:464[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:50:464[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:50:464[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:50:464[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:50:464[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:50:464[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:50:464[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:50:464[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:50:464[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:50:465[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:50:465[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:50:465[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:50:465[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:50:465[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:50:465[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:50:465[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:50:465[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:50:465[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:50:465[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:50:465[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:50:465[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:50:465[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:50:465[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:50:465[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:50:465[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:50:465[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:50:465[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/utils/pricingModel.test.ts > editProduct > should not change features if featureIds is not provided
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should create a new invoice when none exists for the billing period
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Expiration Scenarios > should not create a credit_grant_expired ledger entry for a usage credit with a zero balance 514ms
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectProducts > returns only products for the currently-focused organization 740ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should use existing invoice when one exists for the billing period 448ms
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Expiration Scenarios > should not expire a usage credit that has a null expiresAt 360ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should handle zero amount due correctly 440ms
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Expiration Scenarios > should not expire credits with a future expiration date 401ms
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectProducts > does not return products for other organizations even if user is a member but not the current organization 701ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should handle terminal invoice state correctly
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should delete and recreate invoice line items
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Expiration Scenarios > should correctly handle a mix of expiring and non-expiring credits 396ms
[90m11:20:51:966[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:52:133[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:52:133[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:52:133[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:52:133[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:52:135[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:52:135[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:52:135[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:52:135[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should create payment with correct properties 307ms
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Expiration Scenarios > should handle expiring credits and new grant entitlements 444ms
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectProducts > switching focus changes which products are visible 1072ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should update billing run status to AwaitingPaymentConfirmation 418ms
[90m11:20:52:898[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:52:899[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:52:899[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:52:899[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:52:899[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:52:899[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:52:899[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:52:899[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:20:52:899[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:20:52:899[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:20:52:899[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:20:52:899[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:20:52:899[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:52:899[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:52:899[0m [34m[xhr][0m cleared global instance! xhr
[90m11:20:52:899[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:20:52:899[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:20:52:899[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:20:52:899[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:20:52:899[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:20:52:899[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:52:899[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:52:899[0m [34m[fetch][0m cleared global instance! fetch
[90m11:20:52:899[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:20:52:899[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:20:52:899[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:20:52:899[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:20:52:899[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:20:52:899[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:52:899[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:52:899[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:20:52:899[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:20:52:899[0m [34m[websocket][0m cleared global instance! websocket
[90m11:20:52:900[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:20:52:900[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:20:52:900[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:20:52:900[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:20:52:900[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:52:900[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:52:900[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:52:900[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:52:900[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:52:900[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:52:900[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:52:900[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:52:900[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:52:900[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:52:900[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:52:900[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:52:900[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:52:900[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:52:900[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:52:900[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:52:900[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:52:900[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:52:900[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:52:900[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:52:900[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:52:900[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:52:900[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:52:900[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:52:900[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:52:900[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:52:900[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:52:900[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:52:900[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:52:900[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:52:900[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:52:900[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:52:900[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:52:900[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:52:900[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:52:900[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:52:900[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:52:900[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:52:900[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:52:900[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:52:900[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:52:900[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:52:900[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:52:900[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:52:900[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:52:900[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:52:900[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:52:900[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:52:900[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:52:900[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:52:901[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/subscriptions/billingPeriodHelpers.test.ts > Ledger Interactions > Credit Expiration Scenarios > should handle expiring credits, non-expiring credits, and new grant entitlements 522ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should update billing run status to Succeeded when no payment needed
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should update billing period status based on invoice status and date
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should create fee calculation with correct properties 373ms
stderr | src/db/authenticatedTransaction.test.ts > RLS for selectProducts > cannot update a product in another organization when it is not the current organization
[createUpdateFunction] Error updating products with id prod_EpzCjFUKvjEEhylk2rMLE: Error: No products found with id: prod_EpzCjFUKvjEEhylk2rMLE
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:291:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at apiKey [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1015:11[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:72:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1012:5
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectProducts > cannot update a product in another organization when it is not the current organization 1133ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should return all expected properties in the result object
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should handle nested billing details address for tax country
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should handle non-nested billing details address for tax country
[90m11:20:54:315[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:54:428[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:54:428[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:54:428[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:54:428[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:54:430[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:54:430[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:54:430[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:54:430[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectProducts > can update a product in the current organization 727ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should handle multiple payments for billing period
[90m11:20:54:777[0m [34m[websocket][0m constructing the interceptor...
stderr | src/db/authenticatedTransaction.test.ts > RLS for selectProducts > cannot insert a product for a different organization (other than current_organization_id)
[createInsertManyFunction] Error inserting into products: DrizzleQueryError: Failed query: insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"
params: prod_1IVlmcml5EjYDzWDvGwZW,__TEST__,__TEST__,false,Cross Org Product,,,org_0SZE860kdx2uE9qmh6zHG,,true,,,pricing_model_ggmIe0XkcisWa47hYn7PG,,false,
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
    at apiKey [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1048:11[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:72:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m {
  query: [32m'insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"'[39m,
  params: [
    [32m'prod_1IVlmcml5EjYDzWDvGwZW'[39m,
    [32m'__TEST__'[39m,
    [32m'__TEST__'[39m,
    [33mfalse[39m,
    [32m'Cross Org Product'[39m,
    [1mnull[22m,
    [1mnull[22m,
    [32m'org_0SZE860kdx2uE9qmh6zHG'[39m,
    [1mnull[22m,
    [33mtrue[39m,
    [1mnull[22m,
    [1mnull[22m,
    [32m'pricing_model_ggmIe0XkcisWa47hYn7PG'[39m,
    [1mnull[22m,
    [33mfalse[39m,
    [1mnull[22m
  ],
  cause: PostgresError: new row violates row-level security policy for table "products"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'42501'[39m,
    file: [32m'execMain.c'[39m,
    line: [32m'2146'[39m,
    routine: [32m'ExecWithCheckOptions'[39m,
    query: [32m'insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"'[39m,
    parameters: [
      [32m'prod_1IVlmcml5EjYDzWDvGwZW'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [32m'f'[39m,
      [32m'Cross Org Product'[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'org_0SZE860kdx2uE9qmh6zHG'[39m,
      [1mnull[22m,
      [32m't'[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'pricing_model_ggmIe0XkcisWa47hYn7PG'[39m,
      [1mnull[22m,
      [32m'f'[39m,
      [1mnull[22m
    ],
    args: [
      [32m'prod_1IVlmcml5EjYDzWDvGwZW'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mfalse[39m,
      [32m'Cross Org Product'[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'org_0SZE860kdx2uE9qmh6zHG'[39m,
      [1mnull[22m,
      [33mtrue[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'pricing_model_ggmIe0XkcisWa47hYn7PG'[39m,
      [1mnull[22m,
      [33mfalse[39m,
      [1mnull[22m
    ],
    types: [
      [33m25[39m, [33m25[39m, [33m25[39m,   [33m16[39m, [33m25[39m,
      [33m25[39m, [33m25[39m, [33m25[39m, [33m3802[39m, [33m16[39m,
      [33m25[39m, [33m25[39m, [33m25[39m,   [33m25[39m, [33m16[39m,
      [33m25[39m
    ]
  }
}

stderr | src/db/authenticatedTransaction.test.ts > RLS for selectProducts > cannot insert a product for a different organization (other than current_organization_id)
[createInsertFunction] Error inserting single item into products: Error: Failed to insert items into products: Failed query: insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"
params: prod_1IVlmcml5EjYDzWDvGwZW,__TEST__,__TEST__,false,Cross Org Product,,,org_0SZE860kdx2uE9qmh6zHG,,true,,,pricing_model_ggmIe0XkcisWa47hYn7PG,,false,
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:214:13
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
[90m    ... 4 lines matching cause stack trace ...[39m
    at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1045:5
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  [cause]: DrizzleQueryError: Failed query: insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"
  params: prod_1IVlmcml5EjYDzWDvGwZW,__TEST__,__TEST__,false,Cross Org Product,,,org_0SZE860kdx2uE9qmh6zHG,,true,,,pricing_model_ggmIe0XkcisWa47hYn7PG,,false,
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
      at apiKey [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1048:11[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:72:18
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
      at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m {
    query: [32m'insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"'[39m,
    params: [
      [32m'prod_1IVlmcml5EjYDzWDvGwZW'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mfalse[39m,
      [32m'Cross Org Product'[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'org_0SZE860kdx2uE9qmh6zHG'[39m,
      [1mnull[22m,
      [33mtrue[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'pricing_model_ggmIe0XkcisWa47hYn7PG'[39m,
      [1mnull[22m,
      [33mfalse[39m,
      [1mnull[22m
    ],
    cause: PostgresError: new row violates row-level security policy for table "products"
        at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
        at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
        at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
    [90m    at Socket.emit (node:events:507:28)[39m
    [90m    at addChunk (node:internal/streams/readable:559:12)[39m
    [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
    [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
    [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
        at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
        at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
        at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
      severity_local: [32m'ERROR'[39m,
      severity: [32m'ERROR'[39m,
      code: [32m'42501'[39m,
      file: [32m'execMain.c'[39m,
      line: [32m'2146'[39m,
      routine: [32m'ExecWithCheckOptions'[39m,
      query: [32m'insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"'[39m,
      parameters: [36m[Array][39m,
      args: [36m[Array][39m,
      types: [36m[Array][39m
    }
  }
}

 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectProducts > cannot insert a product for a different organization (other than current_organization_id) 382ms
[90m11:20:54:950[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:54:950[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:54:950[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:54:950[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:54:955[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:54:955[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:54:955[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:54:955[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should throw an error if customer has no stripe customer ID 403ms
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectProducts > can insert a product for the current organization 316ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should throw an error if payment method has no stripe payment method ID
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should claim outstanding usage costs by associating them with the billing run 327ms
[90m11:20:55:787[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:55:787[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:55:787[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:55:787[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:55:790[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:55:790[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:55:790[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:55:790[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should succeed and mark invoice as Paid if amount to charge is zero due to overpayment 331ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should filter out Static items with a zero quantity
stderr | src/db/authenticatedTransaction.test.ts > RLS for selectProducts > cannot delete a product from a different organization
[createUpdateFunction] Error updating products with id prod_MoIVVF6IQ2M0LFkJfm8f4: Error: No products found with id: prod_MoIVVF6IQ2M0LFkJfm8f4
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:291:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at apiKey [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1104:11[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:72:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1100:5
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectProducts > cannot delete a product from a different organization 965ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should return quantity 0 if usageEventsPerUnit is null
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectProducts > respects livemode: live context cannot see test-mode products and vice versa
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should not create line items if usageEventsPerUnit is 0
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > executeBillingRunCalculationAndBookkeepingSteps > should ignore usage overages that do not have a matching billing period item
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > tabulateOutstandingUsageCosts > should return empty results when no ledger accounts are provided
[90m11:20:56:987[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:56:987[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:56:987[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:56:987[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:56:990[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:56:990[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:56:990[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:56:990[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:56:871[0m [34m[websocket][0m constructing the interceptor...
[90m11:20:57:38[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:57:38[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:57:38[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:38[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:57:39[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:57:39[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:57:39[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:57:39[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:39[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:20:57:39[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:39[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:57:39[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:57:39[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:57:39[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:39[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:20:57:39[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:20:57:39[0m [34m[xhr][0m set global instance! xhr
[90m11:20:57:39[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:39[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:57:40[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:57:40[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:57:40[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:40[0m [34m[fetch][0m set global instance! fetch
[90m11:20:57:40[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:40[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:57:40[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:57:40[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:57:40[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:57:40[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:57:40[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:57:40[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:57:40[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:57:40[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:57:40[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:57:41[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:57:41[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:57:41[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:20:57:41[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:41[0m [34m[websocket][0m set global instance! websocket
[90m11:20:57:41[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:57:41[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:57:41[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:41[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:57:41[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:57:41[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:57:41[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:57:41[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:57:41[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:41[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:57:41[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:57:41[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:57:41[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:57:41[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:41[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:57:41[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:57:41[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:57:41[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:57:41[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:41[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:57:42[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:57:42[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:57:42[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:57:42[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:57:42[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:57:42[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:57:42[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:57:42[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:57:42[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:57:42[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:57:42[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:57:42[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:57:42[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:57:42[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:57:42[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:42[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:57:42[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:57:42[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:57:42[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:57:42[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:57:42[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:42[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:57:42[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:57:42[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:57:42[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:57:42[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:42[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:57:42[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:57:42[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:57:42[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:57:42[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:42[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:57:42[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:57:42[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:57:42[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:57:42[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:57:43[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:57:43[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:57:43[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:57:43[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:57:43[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:57:43[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:57:43[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:57:43[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:57:43[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:57:43[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:57:43[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:43[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:57:43[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:57:43[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:57:43[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:57:43[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:57:43[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:43[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:57:43[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:57:43[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:57:43[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:57:43[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:43[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:57:43[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:57:43[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:57:43[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:57:43[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:43[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:57:43[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:57:43[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:57:43[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:57:43[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:57:43[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:57:43[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:57:43[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:57:43[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:57:43[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:57:43[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:57:43[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:57:43[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:57:71[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:57:71[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:57:71[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:57:71[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:57:81[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:57:81[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:57:81[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:57:81[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > tabulateOutstandingUsageCosts > should return empty results when ledger accounts exist but have no outstanding costs
[90m11:20:57:313[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:57:314[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:57:314[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:57:314[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:57:316[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:57:316[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:57:316[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:57:316[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:57:439[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:57:439[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:57:439[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:439[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:57:440[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:57:440[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:57:440[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:57:440[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:440[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:20:57:440[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:440[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:57:440[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:57:440[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:57:440[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:440[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:20:57:440[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:20:57:440[0m [34m[xhr][0m set global instance! xhr
[90m11:20:57:440[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:440[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:57:440[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:57:440[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:57:441[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:441[0m [34m[fetch][0m set global instance! fetch
[90m11:20:57:441[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:441[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:57:441[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:57:441[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:57:441[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:20:57:441[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:57:441[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:57:441[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:20:57:441[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:57:441[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:57:442[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:20:57:442[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:57:442[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:57:442[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:20:57:442[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:442[0m [34m[websocket][0m set global instance! websocket
[90m11:20:57:442[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:57:442[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:57:442[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:442[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:57:442[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:57:442[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:57:443[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:57:443[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:57:443[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:443[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:57:443[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:57:443[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:57:443[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:57:443[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:443[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:57:443[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:57:443[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:57:443[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:57:443[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:443[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:57:443[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:57:443[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:57:443[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:57:443[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:57:443[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:57:443[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:57:443[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:57:443[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:57:443[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:57:443[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:57:443[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:57:444[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:57:444[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:57:444[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:57:444[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:444[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:57:444[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:57:444[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:57:444[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:57:444[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:57:444[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:444[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:57:444[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:57:444[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:57:444[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:57:444[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:444[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:57:444[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:57:444[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:57:444[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:57:444[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:444[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:57:444[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:57:444[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:57:444[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:57:444[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:57:445[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:57:445[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:57:445[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:57:445[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:57:445[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:57:445[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:57:445[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:57:445[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:20:57:445[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:20:57:445[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:20:57:445[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:20:57:445[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:20:57:445[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:20:57:445[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:20:57:445[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:57:445[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:20:57:445[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:445[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:20:57:445[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:20:57:445[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:57:445[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:20:57:445[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:445[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:20:57:445[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:20:57:445[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:57:445[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:20:57:445[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:20:57:445[0m [34m[setup-server][0m set global instance! setup-server
[90m11:20:57:445[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:20:57:445[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:20:57:446[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:20:57:446[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:20:57:446[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:20:57:446[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:20:57:446[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:20:57:446[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:20:57:446[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:20:57:446[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:20:57:446[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:20:57:446[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > tabulateOutstandingUsageCosts > should correctly tabulate a single outstanding usage cost for one ledger account 332ms
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectProducts > respects livemode: live context cannot see test-mode products and vice versa 1198ms
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/grantEntitlementUsageCredits.test.ts > grantEntitlementUsageCredits > should grant a single entitlement usage credit and create corresponding ledger entry 499ms
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > tabulateOutstandingUsageCosts > should handle multiple outstanding usage costs for one ledger account (map behavior) 353ms
 ✓ src/db/tableMethods/customerMethods.test.ts > assignStackAuthHostedBillingUserIdToCustomersWithMatchingEmailButNoStackAuthHostedBillingUserId > updates all customers with no stackAuthUserBillingId that have the target email across organizations 437ms
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/grantEntitlementUsageCredits.test.ts > grantEntitlementUsageCredits > should grant multiple entitlement usage credits and create corresponding ledger entries 402ms
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectProducts > webapp session auth behaves the same as API key auth 619ms
 ✓ src/db/tableMethods/customerMethods.test.ts > assignStackAuthHostedBillingUserIdToCustomersWithMatchingEmailButNoStackAuthHostedBillingUserId > updates all customer records within the same organization that have matching email but no stack auth user id
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > tabulateOutstandingUsageCosts > should correctly tabulate costs for multiple ledger accounts, some with and some without costs 447ms
 ✓ src/db/tableMethods/customerMethods.test.ts > assignStackAuthHostedBillingUserIdToCustomersWithMatchingEmailButNoStackAuthHostedBillingUserId > does not update customer records that have an existing stack auth user id even if they have matching email
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/grantEntitlementUsageCredits.test.ts > grantEntitlementUsageCredits > should only process feature items with usageMeterIds
 ✓ src/db/tableMethods/customerMethods.test.ts > assignStackAuthHostedBillingUserIdToCustomersWithMatchingEmailButNoStackAuthHostedBillingUserId > does not update any records that have different emails
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/grantEntitlementUsageCredits.test.ts > grantEntitlementUsageCredits > should handle cases with no feature items having usageMeterIds
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > tabulateOutstandingUsageCosts > should only include usage costs up to the billingPeriodEndDate 359ms
 ✓ src/db/tableMethods/customerMethods.test.ts > setUserIdForCustomerRecords > should update all customer records with matching email to have the specified userId
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectProducts > user with membership in only one organization cannot access other organizations' products 630ms
 ✓ src/db/tableMethods/customerMethods.test.ts > setUserIdForCustomerRecords > should not update customer records with different emails
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/grantEntitlementUsageCredits.test.ts > grantEntitlementUsageCredits > should correctly propagate livemode: false to usage credits and ledger entries
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > billingPeriodItemsToInvoiceLineItemInserts > should correctly generate a Static invoice line item
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectProducts > user with membership in only one organization cannot access other organizations' products
 ✓ src/db/tableMethods/customerMethods.test.ts > setUserIdForCustomerRecords > should overwrite existing userId when updating customer records
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > billingPeriodItemsToInvoiceLineItemInserts > should correctly generate a Usage line item with ledger mapping
 ✓ src/db/tableMethods/customerMethods.test.ts > setUserIdForCustomerRecords > should handle case when no customers exist with the specified email
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/grantEntitlementUsageCredits.test.ts > grantEntitlementUsageCredits > should create ledger accounts for usage meters that do not yet have accounts in this subscription 367ms
 ✓ src/db/tableMethods/customerMethods.test.ts > setUserIdForCustomerRecords > should update customers across different organizations when they have the same email
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > billingPeriodItemsToInvoiceLineItemInserts > should filter out Usage items with a zero balance
[90m11:20:59:8[0m [34m[websocket][0m constructing the interceptor...
 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/externalId/livemode uniqueness constraint > should allow inserting customers with the same externalId in different organizations
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > returns only pricingModels for the currently-focused organization 439ms
[90m11:20:59:325[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:59:328[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:59:328[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:59:329[0m [34m[setup-server][0m constructing the interceptor...
[90m11:20:59:332[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:20:59:332[0m [34m[xhr][0m constructing the interceptor...
[90m11:20:59:332[0m [34m[fetch][0m constructing the interceptor...
[90m11:20:59:332[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/externalId/livemode uniqueness constraint > should allow inserting customers with the same externalId in the same organization but different livemode values
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > billingPeriodItemsToInvoiceLineItemInserts > should generate both Static and Usage line items together
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/grantEntitlementUsageCredits.test.ts > grantEntitlementUsageCredits > Grant Frequency Logic > should grant both "Once" and "EveryBillingPeriod" credits on initial grant (previousBillingPeriod is null) 341ms
stderr | src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/externalId/livemode uniqueness constraint > should prevent inserting duplicate customers with the same organizationId, externalId, and livemode
[createInsertManyFunction] Error inserting into customers: DrizzleQueryError: Failed query: insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
params: cust_d9yg187YX8KjucyPAyVnH,__TEST__,__TEST__,true,org_ye8IofosfJdUii54UdVJI,customer2_7sP7zjKE4img2m2aBgVeu@test.com,Duplicate Customer,8677C89,ext_789_nx9GLZZE8BKo1QJYEAGEF
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:647:11
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:645:7 {
  query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
  params: [
    [32m'cust_d9yg187YX8KjucyPAyVnH'[39m,
    [32m'__TEST__'[39m,
    [32m'__TEST__'[39m,
    [33mtrue[39m,
    [32m'org_ye8IofosfJdUii54UdVJI'[39m,
    [32m'customer2_7sP7zjKE4img2m2aBgVeu@test.com'[39m,
    [32m'Duplicate Customer'[39m,
    [32m'8677C89'[39m,
    [32m'ext_789_nx9GLZZE8BKo1QJYEAGEF'[39m
  ],
  cause: PostgresError: duplicate key value violates unique constraint "customers_organization_id_external_id_livemode_unique_idx"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at new Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'23505'[39m,
    detail: [32m'Key (organization_id, external_id, livemode)=(org_ye8IofosfJdUii54UdVJI, ext_789_nx9GLZZE8BKo1QJYEAGEF, t) already exists.'[39m,
    schema_name: [32m'public'[39m,
    table_name: [32m'customers'[39m,
    constraint_name: [32m'customers_organization_id_external_id_livemode_unique_idx'[39m,
    file: [32m'nbtinsert.c'[39m,
    line: [32m'664'[39m,
    routine: [32m'_bt_check_unique'[39m,
    query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
    parameters: [
      [32m'cust_d9yg187YX8KjucyPAyVnH'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [32m't'[39m,
      [32m'org_ye8IofosfJdUii54UdVJI'[39m,
      [32m'customer2_7sP7zjKE4img2m2aBgVeu@test.com'[39m,
      [32m'Duplicate Customer'[39m,
      [32m'8677C89'[39m,
      [32m'ext_789_nx9GLZZE8BKo1QJYEAGEF'[39m
    ],
    args: [
      [32m'cust_d9yg187YX8KjucyPAyVnH'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'org_ye8IofosfJdUii54UdVJI'[39m,
      [32m'customer2_7sP7zjKE4img2m2aBgVeu@test.com'[39m,
      [32m'Duplicate Customer'[39m,
      [32m'8677C89'[39m,
      [32m'ext_789_nx9GLZZE8BKo1QJYEAGEF'[39m
    ],
    types: [
      [33m25[39m, [33m25[39m, [33m25[39m, [33m16[39m, [33m25[39m,
      [33m25[39m, [33m25[39m, [33m25[39m, [33m25[39m
    ]
  }
}

stderr | src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/externalId/livemode uniqueness constraint > should prevent inserting duplicate customers with the same organizationId, externalId, and livemode
[createInsertFunction] Error inserting single item into customers: Error: Failed to insert items into customers: Failed query: insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
params: cust_d9yg187YX8KjucyPAyVnH,__TEST__,__TEST__,true,org_ye8IofosfJdUii54UdVJI,customer2_7sP7zjKE4img2m2aBgVeu@test.com,Duplicate Customer,8677C89,ext_789_nx9GLZZE8BKo1QJYEAGEF
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:214:13
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
[90m    ... 4 lines matching cause stack trace ...[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:645:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  [cause]: DrizzleQueryError: Failed query: insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
  params: cust_d9yg187YX8KjucyPAyVnH,__TEST__,__TEST__,true,org_ye8IofosfJdUii54UdVJI,customer2_7sP7zjKE4img2m2aBgVeu@test.com,Duplicate Customer,8677C89,ext_789_nx9GLZZE8BKo1QJYEAGEF
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:647:11
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:645:7 {
    query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
    params: [
      [32m'cust_d9yg187YX8KjucyPAyVnH'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'org_ye8IofosfJdUii54UdVJI'[39m,
      [32m'customer2_7sP7zjKE4img2m2aBgVeu@test.com'[39m,
      [32m'Duplicate Customer'[39m,
      [32m'8677C89'[39m,
      [32m'ext_789_nx9GLZZE8BKo1QJYEAGEF'[39m
    ],
    cause: PostgresError: duplicate key value violates unique constraint "customers_organization_id_external_id_livemode_unique_idx"
        at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
        at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
        at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
    [90m    at Socket.emit (node:events:507:28)[39m
    [90m    at addChunk (node:internal/streams/readable:559:12)[39m
    [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
    [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
    [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
        at new Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
        at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
        at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
      severity_local: [32m'ERROR'[39m,
      severity: [32m'ERROR'[39m,
      code: [32m'23505'[39m,
      detail: [32m'Key (organization_id, external_id, livemode)=(org_ye8IofosfJdUii54UdVJI, ext_789_nx9GLZZE8BKo1QJYEAGEF, t) already exists.'[39m,
      schema_name: [32m'public'[39m,
      table_name: [32m'customers'[39m,
      constraint_name: [32m'customers_organization_id_external_id_livemode_unique_idx'[39m,
      file: [32m'nbtinsert.c'[39m,
      line: [32m'664'[39m,
      routine: [32m'_bt_check_unique'[39m,
      query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
      parameters: [36m[Array][39m,
      args: [36m[Array][39m,
      types: [36m[Array][39m
    }
  }
}

 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/externalId/livemode uniqueness constraint > should prevent inserting duplicate customers with the same organizationId, externalId, and livemode
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > billingPeriodItemsToInvoiceLineItemInserts > should return quantity 0 if usageEventsPerUnit is null
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > does not return pricingModels for other organizations even when passing explicit where conditions 411ms
 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/externalId/livemode uniqueness constraint > should allow updating a customer externalId if it does not conflict with existing constraints
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > billingPeriodItemsToInvoiceLineItemInserts > should not create line items if usageEventsPerUnit is 0
stderr | src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/externalId/livemode uniqueness constraint > should prevent updating a customer externalId to a value that violates the uniqueness constraint
[createUpdateFunction] Error updating customers with id cust_NiPKZmRNgfOLps8P7q9aU: DrizzleQueryError: Failed query: update "customers" set "id" = $1, "updated_at" = $2, "external_id" = $3 where "customers"."id" = $4 returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
params: cust_NiPKZmRNgfOLps8P7q9aU,2025-09-07T15:20:59.807Z,ext_001_yYGoolYdp3VEC4fy1eShe,cust_NiPKZmRNgfOLps8P7q9aU
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:276:24
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:719:11
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:717:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  query: [32m'update "customers" set "id" = $1, "updated_at" = $2, "external_id" = $3 where "customers"."id" = $4 returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
  params: [
    [32m'cust_NiPKZmRNgfOLps8P7q9aU'[39m,
    [32m'2025-09-07T15:20:59.807Z'[39m,
    [32m'ext_001_yYGoolYdp3VEC4fy1eShe'[39m,
    [32m'cust_NiPKZmRNgfOLps8P7q9aU'[39m
  ],
  cause: PostgresError: duplicate key value violates unique constraint "customers_organization_id_external_id_livemode_unique_idx"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at new Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at QueryPromise.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/update.ts:603:26[90m)[39m {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'23505'[39m,
    detail: [32m'Key (organization_id, external_id, livemode)=(org_Zq69doWDP7vUx4lqkayij, ext_001_yYGoolYdp3VEC4fy1eShe, t) already exists.'[39m,
    schema_name: [32m'public'[39m,
    table_name: [32m'customers'[39m,
    constraint_name: [32m'customers_organization_id_external_id_livemode_unique_idx'[39m,
    file: [32m'nbtinsert.c'[39m,
    line: [32m'664'[39m,
    routine: [32m'_bt_check_unique'[39m,
    query: [32m'update "customers" set "id" = $1, "updated_at" = $2, "external_id" = $3 where "customers"."id" = $4 returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
    parameters: [
      [32m'cust_NiPKZmRNgfOLps8P7q9aU'[39m,
      [32m'2025-09-07T15:20:59.807Z'[39m,
      [32m'ext_001_yYGoolYdp3VEC4fy1eShe'[39m,
      [32m'cust_NiPKZmRNgfOLps8P7q9aU'[39m
    ],
    args: [
      [32m'cust_NiPKZmRNgfOLps8P7q9aU'[39m,
      [32m'2025-09-07T15:20:59.807Z'[39m,
      [32m'ext_001_yYGoolYdp3VEC4fy1eShe'[39m,
      [32m'cust_NiPKZmRNgfOLps8P7q9aU'[39m
    ],
    types: [ [33m25[39m, [33m1184[39m, [33m25[39m, [33m25[39m ]
  }
}

 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/externalId/livemode uniqueness constraint > should prevent updating a customer externalId to a value that violates the uniqueness constraint
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/grantEntitlementUsageCredits.test.ts > grantEntitlementUsageCredits > Grant Frequency Logic > should only grant "EveryBillingPeriod" credits on subsequent grants (previousBillingPeriod exists) 405ms
[90m11:20:59:995[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:59:995[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:59:995[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:59:995[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:59:995[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:59:996[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:59:996[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:20:59:996[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:20:59:996[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:20:59:996[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:20:59:996[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:20:59:996[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:20:59:996[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:59:996[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:20:59:996[0m [34m[xhr][0m cleared global instance! xhr
[90m11:20:59:996[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:20:59:996[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:20:59:996[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:20:59:996[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:20:59:996[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:20:59:996[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:59:996[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:20:59:996[0m [34m[fetch][0m cleared global instance! fetch
[90m11:20:59:996[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:20:59:996[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:20:59:996[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:20:59:996[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:20:59:996[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:20:59:996[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:59:996[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:59:996[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:20:59:996[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:20:59:996[0m [34m[websocket][0m cleared global instance! websocket
[90m11:20:59:996[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:20:59:996[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:20:59:996[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:20:59:997[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:20:59:997[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:59:997[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:59:997[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:59:997[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:59:997[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:59:997[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:59:997[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:59:997[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:59:997[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:59:997[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:59:997[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:59:997[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:59:997[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:59:997[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:59:997[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:59:997[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:59:997[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:59:997[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:59:997[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:59:997[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:59:997[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:59:997[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:59:997[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:59:997[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:59:997[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:59:997[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:59:997[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:59:997[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:59:997[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:59:997[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:59:997[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:59:997[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:59:997[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:59:997[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:20:59:997[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:20:59:997[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:20:59:997[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:20:59:997[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:20:59:997[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:20:59:997[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:20:59:997[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:20:59:997[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:20:59:998[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:20:59:998[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:20:59:998[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:20:59:998[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:20:59:998[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:20:59:998[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:20:59:998[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:20:59:998[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:20:59:998[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/subscriptions/billingRunHelpers.test.ts > billingRunHelpers > billingPeriodItemsToInvoiceLineItemInserts > should ignore usage overages that do not have a matching billing period item
 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/externalId/livemode uniqueness constraint > should allow multiple customers with different externalIds in the same organization and livemode
 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/externalId/livemode uniqueness constraint > should enforce uniqueness constraint across different insertion methods
stderr | src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/externalId/livemode uniqueness constraint > should handle null values in the constraint properly
[createInsertManyFunction] Error inserting into customers: ZodError: [
  {
    "expected": "string",
    "code": "invalid_type",
    "path": [
      "externalId"
    ],
    "message": "Invalid input: expected string, received undefined"
  }
]
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:175:22
    at Array.map (<anonymous>)
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:174:35
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:30
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:824:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:24
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:822:7

stderr | src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/externalId/livemode uniqueness constraint > should handle null values in the constraint properly
[createInsertFunction] Error inserting single item into customers: Error: Failed to insert items into customers: [
  {
    "expected": "string",
    "code": "invalid_type",
    "path": [
      "externalId"
    ],
    "message": "Invalid input: expected string, received undefined"
  }
]
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:214:13
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:30
[90m    ... 5 lines matching cause stack trace ...[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:822:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  [cause]: ZodError: [
    {
      "expected": "string",
      "code": "invalid_type",
      "path": [
        "externalId"
      ],
      "message": "Invalid input: expected string, received undefined"
    }
  ]
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:175:22
      at Array.map (<anonymous>)
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:174:35
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:30
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:824:17
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:24
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:822:7
}

[90m11:21:00:182[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:00:182[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:00:182[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:00:182[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:00:182[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:00:182[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:00:182[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:00:182[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:00:182[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:00:182[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:00:182[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:00:182[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:00:182[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:00:182[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:00:182[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:00:183[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:00:183[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:00:183[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:00:183[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:00:183[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:00:183[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:00:183[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:00:183[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:00:183[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:00:183[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:00:183[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:00:183[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:00:183[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:00:183[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:00:183[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:00:183[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:00:183[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:00:183[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:00:183[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:00:183[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:00:183[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:00:183[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:00:183[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:00:183[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:00:183[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:00:183[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:00:183[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:00:183[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:00:183[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:00:183[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:00:183[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:00:183[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:00:183[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:00:183[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:00:183[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:00:183[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:00:183[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:00:183[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:00:183[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:00:183[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:00:183[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:00:183[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:00:183[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:00:183[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:00:184[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:00:184[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:00:184[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:00:184[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:00:184[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:00:184[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:00:184[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:00:184[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:00:184[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:00:184[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:00:184[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:00:184[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:00:184[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:00:184[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:00:184[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:00:184[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:00:184[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:00:184[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:00:184[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:00:184[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:00:184[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:00:184[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:00:184[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:00:184[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:00:184[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:00:184[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:00:184[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:00:184[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:00:184[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/grantEntitlementUsageCredits.test.ts > grantEntitlementUsageCredits > Grant Frequency Logic > should grant no credits on a subsequent grant if only "Once" entitlements exist
 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/externalId/livemode uniqueness constraint > should handle null values in the constraint properly
 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/invoiceNumberBase/livemode uniqueness constraint > should allow customers with the same invoiceNumberBase in different organizations
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > switching focus changes which pricingModels are visible 640ms
 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/invoiceNumberBase/livemode uniqueness constraint > should allow customers with the same invoiceNumberBase in same organization but different livemode
stderr | src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/invoiceNumberBase/livemode uniqueness constraint > should prevent duplicate invoiceNumberBase in same organization and livemode
[createInsertManyFunction] Error inserting into customers: DrizzleQueryError: Failed query: insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
params: cust_u8oI0bDEWUZcvC3SyOnN4,__TEST__,__TEST__,true,org_fjhCxGhuwwkEQv2XAXA3f,customer2_BJqgccg0N1n3HaLoJPzo8@test.com,Customer 2,INVgfifK9,ext_r6tURbNPJML48Sycb9VoC
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:978:11
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:976:7 {
  query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
  params: [
    [32m'cust_u8oI0bDEWUZcvC3SyOnN4'[39m,
    [32m'__TEST__'[39m,
    [32m'__TEST__'[39m,
    [33mtrue[39m,
    [32m'org_fjhCxGhuwwkEQv2XAXA3f'[39m,
    [32m'customer2_BJqgccg0N1n3HaLoJPzo8@test.com'[39m,
    [32m'Customer 2'[39m,
    [32m'INVgfifK9'[39m,
    [32m'ext_r6tURbNPJML48Sycb9VoC'[39m
  ],
  cause: PostgresError: duplicate key value violates unique constraint "customers_organization_id_invoice_number_base_livemode_unique_i"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'23505'[39m,
    detail: [32m'Key (organization_id, invoice_number_base, livemode)=(org_fjhCxGhuwwkEQv2XAXA3f, INVgfifK9, t) already exists.'[39m,
    schema_name: [32m'public'[39m,
    table_name: [32m'customers'[39m,
    constraint_name: [32m'customers_organization_id_invoice_number_base_livemode_unique_i'[39m,
    file: [32m'nbtinsert.c'[39m,
    line: [32m'664'[39m,
    routine: [32m'_bt_check_unique'[39m,
    query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
    parameters: [
      [32m'cust_u8oI0bDEWUZcvC3SyOnN4'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [32m't'[39m,
      [32m'org_fjhCxGhuwwkEQv2XAXA3f'[39m,
      [32m'customer2_BJqgccg0N1n3HaLoJPzo8@test.com'[39m,
      [32m'Customer 2'[39m,
      [32m'INVgfifK9'[39m,
      [32m'ext_r6tURbNPJML48Sycb9VoC'[39m
    ],
    args: [
      [32m'cust_u8oI0bDEWUZcvC3SyOnN4'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'org_fjhCxGhuwwkEQv2XAXA3f'[39m,
      [32m'customer2_BJqgccg0N1n3HaLoJPzo8@test.com'[39m,
      [32m'Customer 2'[39m,
      [32m'INVgfifK9'[39m,
      [32m'ext_r6tURbNPJML48Sycb9VoC'[39m
    ],
    types: [
      [33m25[39m, [33m25[39m, [33m25[39m, [33m16[39m, [33m25[39m,
      [33m25[39m, [33m25[39m, [33m25[39m, [33m25[39m
    ]
  }
}

stderr | src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/invoiceNumberBase/livemode uniqueness constraint > should prevent duplicate invoiceNumberBase in same organization and livemode
[createInsertFunction] Error inserting single item into customers: Error: Failed to insert items into customers: Failed query: insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
params: cust_u8oI0bDEWUZcvC3SyOnN4,__TEST__,__TEST__,true,org_fjhCxGhuwwkEQv2XAXA3f,customer2_BJqgccg0N1n3HaLoJPzo8@test.com,Customer 2,INVgfifK9,ext_r6tURbNPJML48Sycb9VoC
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:214:13
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
[90m    ... 4 lines matching cause stack trace ...[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:976:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  [cause]: DrizzleQueryError: Failed query: insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
  params: cust_u8oI0bDEWUZcvC3SyOnN4,__TEST__,__TEST__,true,org_fjhCxGhuwwkEQv2XAXA3f,customer2_BJqgccg0N1n3HaLoJPzo8@test.com,Customer 2,INVgfifK9,ext_r6tURbNPJML48Sycb9VoC
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:978:11
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:976:7 {
    query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
    params: [
      [32m'cust_u8oI0bDEWUZcvC3SyOnN4'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'org_fjhCxGhuwwkEQv2XAXA3f'[39m,
      [32m'customer2_BJqgccg0N1n3HaLoJPzo8@test.com'[39m,
      [32m'Customer 2'[39m,
      [32m'INVgfifK9'[39m,
      [32m'ext_r6tURbNPJML48Sycb9VoC'[39m
    ],
    cause: PostgresError: duplicate key value violates unique constraint "customers_organization_id_invoice_number_base_livemode_unique_i"
        at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
        at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
        at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
    [90m    at Socket.emit (node:events:507:28)[39m
    [90m    at addChunk (node:internal/streams/readable:559:12)[39m
    [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
    [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
    [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
        at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
        at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
        at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
      severity_local: [32m'ERROR'[39m,
      severity: [32m'ERROR'[39m,
      code: [32m'23505'[39m,
      detail: [32m'Key (organization_id, invoice_number_base, livemode)=(org_fjhCxGhuwwkEQv2XAXA3f, INVgfifK9, t) already exists.'[39m,
      schema_name: [32m'public'[39m,
      table_name: [32m'customers'[39m,
      constraint_name: [32m'customers_organization_id_invoice_number_base_livemode_unique_i'[39m,
      file: [32m'nbtinsert.c'[39m,
      line: [32m'664'[39m,
      routine: [32m'_bt_check_unique'[39m,
      query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, default, default, default, default, default, default, $9, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
      parameters: [36m[Array][39m,
      args: [36m[Array][39m,
      types: [36m[Array][39m
    }
  }
}

 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/invoiceNumberBase/livemode uniqueness constraint > should prevent duplicate invoiceNumberBase in same organization and livemode
 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > organizationId/invoiceNumberBase/livemode uniqueness constraint > should auto-generate unique invoiceNumberBase when not provided
stderr | src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > stripeCustomerId uniqueness constraint > should enforce global uniqueness for stripeCustomerId across all organizations
[createInsertManyFunction] Error inserting into customers: DrizzleQueryError: Failed query: insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
params: cust_4R3KdnWKmeMNqhDoFkHRI,__TEST__,__TEST__,true,org_y8EzXMcD9vlTRz2Mnw9LP,customer2_EdANyY07hlqf4wbl2T4Pi@test.com,Customer 2,BAE9791,cus_ldWgC8gDZ2IvOZ6gr6rj6,ext_IUyVp9snH9fhgaRZjwQiu
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:1059:11
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:1057:7 {
  query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
  params: [
    [32m'cust_4R3KdnWKmeMNqhDoFkHRI'[39m,
    [32m'__TEST__'[39m,
    [32m'__TEST__'[39m,
    [33mtrue[39m,
    [32m'org_y8EzXMcD9vlTRz2Mnw9LP'[39m,
    [32m'customer2_EdANyY07hlqf4wbl2T4Pi@test.com'[39m,
    [32m'Customer 2'[39m,
    [32m'BAE9791'[39m,
    [32m'cus_ldWgC8gDZ2IvOZ6gr6rj6'[39m,
    [32m'ext_IUyVp9snH9fhgaRZjwQiu'[39m
  ],
  cause: PostgresError: duplicate key value violates unique constraint "customers_stripe_customer_id_unique_idx"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'23505'[39m,
    detail: [32m'Key (stripe_customer_id)=(cus_ldWgC8gDZ2IvOZ6gr6rj6) already exists.'[39m,
    schema_name: [32m'public'[39m,
    table_name: [32m'customers'[39m,
    constraint_name: [32m'customers_stripe_customer_id_unique_idx'[39m,
    file: [32m'nbtinsert.c'[39m,
    line: [32m'664'[39m,
    routine: [32m'_bt_check_unique'[39m,
    query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
    parameters: [
      [32m'cust_4R3KdnWKmeMNqhDoFkHRI'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [32m't'[39m,
      [32m'org_y8EzXMcD9vlTRz2Mnw9LP'[39m,
      [32m'customer2_EdANyY07hlqf4wbl2T4Pi@test.com'[39m,
      [32m'Customer 2'[39m,
      [32m'BAE9791'[39m,
      [32m'cus_ldWgC8gDZ2IvOZ6gr6rj6'[39m,
      [32m'ext_IUyVp9snH9fhgaRZjwQiu'[39m
    ],
    args: [
      [32m'cust_4R3KdnWKmeMNqhDoFkHRI'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'org_y8EzXMcD9vlTRz2Mnw9LP'[39m,
      [32m'customer2_EdANyY07hlqf4wbl2T4Pi@test.com'[39m,
      [32m'Customer 2'[39m,
      [32m'BAE9791'[39m,
      [32m'cus_ldWgC8gDZ2IvOZ6gr6rj6'[39m,
      [32m'ext_IUyVp9snH9fhgaRZjwQiu'[39m
    ],
    types: [
      [33m25[39m, [33m25[39m, [33m25[39m, [33m16[39m, [33m25[39m,
      [33m25[39m, [33m25[39m, [33m25[39m, [33m25[39m, [33m25[39m
    ]
  }
}

stderr | src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > stripeCustomerId uniqueness constraint > should enforce global uniqueness for stripeCustomerId across all organizations
[createInsertFunction] Error inserting single item into customers: Error: Failed to insert items into customers: Failed query: insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
params: cust_4R3KdnWKmeMNqhDoFkHRI,__TEST__,__TEST__,true,org_y8EzXMcD9vlTRz2Mnw9LP,customer2_EdANyY07hlqf4wbl2T4Pi@test.com,Customer 2,BAE9791,cus_ldWgC8gDZ2IvOZ6gr6rj6,ext_IUyVp9snH9fhgaRZjwQiu
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:214:13
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
[90m    ... 4 lines matching cause stack trace ...[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:1057:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  [cause]: DrizzleQueryError: Failed query: insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
  params: cust_4R3KdnWKmeMNqhDoFkHRI,__TEST__,__TEST__,true,org_y8EzXMcD9vlTRz2Mnw9LP,customer2_EdANyY07hlqf4wbl2T4Pi@test.com,Customer 2,BAE9791,cus_ldWgC8gDZ2IvOZ6gr6rj6,ext_IUyVp9snH9fhgaRZjwQiu
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:1059:11
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:1057:7 {
    query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
    params: [
      [32m'cust_4R3KdnWKmeMNqhDoFkHRI'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'org_y8EzXMcD9vlTRz2Mnw9LP'[39m,
      [32m'customer2_EdANyY07hlqf4wbl2T4Pi@test.com'[39m,
      [32m'Customer 2'[39m,
      [32m'BAE9791'[39m,
      [32m'cus_ldWgC8gDZ2IvOZ6gr6rj6'[39m,
      [32m'ext_IUyVp9snH9fhgaRZjwQiu'[39m
    ],
    cause: PostgresError: duplicate key value violates unique constraint "customers_stripe_customer_id_unique_idx"
        at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
        at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
        at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
    [90m    at Socket.emit (node:events:507:28)[39m
    [90m    at addChunk (node:internal/streams/readable:559:12)[39m
    [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
    [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
    [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
        at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
        at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
        at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
      severity_local: [32m'ERROR'[39m,
      severity: [32m'ERROR'[39m,
      code: [32m'23505'[39m,
      detail: [32m'Key (stripe_customer_id)=(cus_ldWgC8gDZ2IvOZ6gr6rj6) already exists.'[39m,
      schema_name: [32m'public'[39m,
      table_name: [32m'customers'[39m,
      constraint_name: [32m'customers_stripe_customer_id_unique_idx'[39m,
      file: [32m'nbtinsert.c'[39m,
      line: [32m'664'[39m,
      routine: [32m'_bt_check_unique'[39m,
      query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
      parameters: [36m[Array][39m,
      args: [36m[Array][39m,
      types: [36m[Array][39m
    }
  }
}

 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > stripeCustomerId uniqueness constraint > should enforce global uniqueness for stripeCustomerId across all organizations
stderr | src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > stripeCustomerId uniqueness constraint > should enforce global uniqueness for stripeCustomerId across livemode values
[createInsertManyFunction] Error inserting into customers: DrizzleQueryError: Failed query: insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
params: cust_AuhmKhoZWya3BobGsIIJv,__TEST__,__TEST__,false,org_C1YiTI5WkFX8xNLimhbVP,customer2_odEQBbfIzUnxad1NYQi8R@test.com,Customer 2,63DA589,cus_hBA80EASg4PvZQVRvwMAQ,ext_UCjww1Mw9w4SQIs0vJpiF
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:1100:11
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:1098:7 {
  query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
  params: [
    [32m'cust_AuhmKhoZWya3BobGsIIJv'[39m,
    [32m'__TEST__'[39m,
    [32m'__TEST__'[39m,
    [33mfalse[39m,
    [32m'org_C1YiTI5WkFX8xNLimhbVP'[39m,
    [32m'customer2_odEQBbfIzUnxad1NYQi8R@test.com'[39m,
    [32m'Customer 2'[39m,
    [32m'63DA589'[39m,
    [32m'cus_hBA80EASg4PvZQVRvwMAQ'[39m,
    [32m'ext_UCjww1Mw9w4SQIs0vJpiF'[39m
  ],
  cause: PostgresError: duplicate key value violates unique constraint "customers_stripe_customer_id_unique_idx"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'23505'[39m,
    detail: [32m'Key (stripe_customer_id)=(cus_hBA80EASg4PvZQVRvwMAQ) already exists.'[39m,
    schema_name: [32m'public'[39m,
    table_name: [32m'customers'[39m,
    constraint_name: [32m'customers_stripe_customer_id_unique_idx'[39m,
    file: [32m'nbtinsert.c'[39m,
    line: [32m'664'[39m,
    routine: [32m'_bt_check_unique'[39m,
    query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
    parameters: [
      [32m'cust_AuhmKhoZWya3BobGsIIJv'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [32m'f'[39m,
      [32m'org_C1YiTI5WkFX8xNLimhbVP'[39m,
      [32m'customer2_odEQBbfIzUnxad1NYQi8R@test.com'[39m,
      [32m'Customer 2'[39m,
      [32m'63DA589'[39m,
      [32m'cus_hBA80EASg4PvZQVRvwMAQ'[39m,
      [32m'ext_UCjww1Mw9w4SQIs0vJpiF'[39m
    ],
    args: [
      [32m'cust_AuhmKhoZWya3BobGsIIJv'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mfalse[39m,
      [32m'org_C1YiTI5WkFX8xNLimhbVP'[39m,
      [32m'customer2_odEQBbfIzUnxad1NYQi8R@test.com'[39m,
      [32m'Customer 2'[39m,
      [32m'63DA589'[39m,
      [32m'cus_hBA80EASg4PvZQVRvwMAQ'[39m,
      [32m'ext_UCjww1Mw9w4SQIs0vJpiF'[39m
    ],
    types: [
      [33m25[39m, [33m25[39m, [33m25[39m, [33m16[39m, [33m25[39m,
      [33m25[39m, [33m25[39m, [33m25[39m, [33m25[39m, [33m25[39m
    ]
  }
}

stderr | src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > stripeCustomerId uniqueness constraint > should enforce global uniqueness for stripeCustomerId across livemode values
[createInsertFunction] Error inserting single item into customers: Error: Failed to insert items into customers: Failed query: insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
params: cust_AuhmKhoZWya3BobGsIIJv,__TEST__,__TEST__,false,org_C1YiTI5WkFX8xNLimhbVP,customer2_odEQBbfIzUnxad1NYQi8R@test.com,Customer 2,63DA589,cus_hBA80EASg4PvZQVRvwMAQ,ext_UCjww1Mw9w4SQIs0vJpiF
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:214:13
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
[90m    ... 4 lines matching cause stack trace ...[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:1098:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  [cause]: DrizzleQueryError: Failed query: insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
  params: cust_AuhmKhoZWya3BobGsIIJv,__TEST__,__TEST__,false,org_C1YiTI5WkFX8xNLimhbVP,customer2_odEQBbfIzUnxad1NYQi8R@test.com,Customer 2,63DA589,cus_hBA80EASg4PvZQVRvwMAQ,ext_UCjww1Mw9w4SQIs0vJpiF
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:1100:11
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:1098:7 {
    query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
    params: [
      [32m'cust_AuhmKhoZWya3BobGsIIJv'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mfalse[39m,
      [32m'org_C1YiTI5WkFX8xNLimhbVP'[39m,
      [32m'customer2_odEQBbfIzUnxad1NYQi8R@test.com'[39m,
      [32m'Customer 2'[39m,
      [32m'63DA589'[39m,
      [32m'cus_hBA80EASg4PvZQVRvwMAQ'[39m,
      [32m'ext_UCjww1Mw9w4SQIs0vJpiF'[39m
    ],
    cause: PostgresError: duplicate key value violates unique constraint "customers_stripe_customer_id_unique_idx"
        at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
        at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
        at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
    [90m    at Socket.emit (node:events:507:28)[39m
    [90m    at addChunk (node:internal/streams/readable:559:12)[39m
    [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
    [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
    [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
        at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
        at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
        at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
      severity_local: [32m'ERROR'[39m,
      severity: [32m'ERROR'[39m,
      code: [32m'23505'[39m,
      detail: [32m'Key (stripe_customer_id)=(cus_hBA80EASg4PvZQVRvwMAQ) already exists.'[39m,
      schema_name: [32m'public'[39m,
      table_name: [32m'customers'[39m,
      constraint_name: [32m'customers_stripe_customer_id_unique_idx'[39m,
      file: [32m'nbtinsert.c'[39m,
      line: [32m'664'[39m,
      routine: [32m'_bt_check_unique'[39m,
      query: [32m'insert into "customers" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, default, $9, default, default, default, default, default, $10, default, default, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
      parameters: [36m[Array][39m,
      args: [36m[Array][39m,
      types: [36m[Array][39m
    }
  }
}

 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > stripeCustomerId uniqueness constraint > should enforce global uniqueness for stripeCustomerId across livemode values
stderr | src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > cannot update a pricingModel in another organization
[createUpdateFunction] Error updating pricingModels with id pricing_model_7lkwnoMK4iDO9AkdmssjC: Error: No pricing models found with id: pricing_model_7lkwnoMK4iDO9AkdmssjC
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:291:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at apiKey [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1286:11[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:72:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1283:5
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > cannot update a pricingModel in another organization 548ms
 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > stripeCustomerId uniqueness constraint > should allow multiple customers with different stripeCustomerIds
 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > stripeCustomerId uniqueness constraint > should allow null stripeCustomerId values
stderr | src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > stripeCustomerId uniqueness constraint > should prevent updating to a duplicate stripeCustomerId
[createUpdateFunction] Error updating customers with id cust_QAAHrDrm3HgskUFMQSv9o: DrizzleQueryError: Failed query: update "customers" set "id" = $1, "updated_at" = $2, "stripe_customer_id" = $3 where "customers"."id" = $4 returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"
params: cust_QAAHrDrm3HgskUFMQSv9o,2025-09-07T15:21:01.222Z,cus_CDRLNxurjDNTFo9d9GOve,cust_QAAHrDrm3HgskUFMQSv9o
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:276:24
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:1281:11
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/customerMethods.test.ts:1279:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  query: [32m'update "customers" set "id" = $1, "updated_at" = $2, "stripe_customer_id" = $3 where "customers"."id" = $4 returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
  params: [
    [32m'cust_QAAHrDrm3HgskUFMQSv9o'[39m,
    [32m'2025-09-07T15:21:01.222Z'[39m,
    [32m'cus_CDRLNxurjDNTFo9d9GOve'[39m,
    [32m'cust_QAAHrDrm3HgskUFMQSv9o'[39m
  ],
  cause: PostgresError: duplicate key value violates unique constraint "customers_stripe_customer_id_unique_idx"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at QueryPromise.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/update.ts:603:26[90m)[39m {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'23505'[39m,
    detail: [32m'Key (stripe_customer_id)=(cus_CDRLNxurjDNTFo9d9GOve) already exists.'[39m,
    schema_name: [32m'public'[39m,
    table_name: [32m'customers'[39m,
    constraint_name: [32m'customers_stripe_customer_id_unique_idx'[39m,
    file: [32m'nbtinsert.c'[39m,
    line: [32m'664'[39m,
    routine: [32m'_bt_check_unique'[39m,
    query: [32m'update "customers" set "id" = $1, "updated_at" = $2, "stripe_customer_id" = $3 where "customers"."id" = $4 returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "email", "name", "invoice_number_base", "archived", "stripe_customer_id", "tax_id", "logo_url", "icon_url", "domain", "billing_address", "external_id", "user_id", "pricing_model_id", "stack_auth_hosted_billing_user_id"'[39m,
    parameters: [
      [32m'cust_QAAHrDrm3HgskUFMQSv9o'[39m,
      [32m'2025-09-07T15:21:01.222Z'[39m,
      [32m'cus_CDRLNxurjDNTFo9d9GOve'[39m,
      [32m'cust_QAAHrDrm3HgskUFMQSv9o'[39m
    ],
    args: [
      [32m'cust_QAAHrDrm3HgskUFMQSv9o'[39m,
      [32m'2025-09-07T15:21:01.222Z'[39m,
      [32m'cus_CDRLNxurjDNTFo9d9GOve'[39m,
      [32m'cust_QAAHrDrm3HgskUFMQSv9o'[39m
    ],
    types: [ [33m25[39m, [33m1184[39m, [33m25[39m, [33m25[39m ]
  }
}

[90m11:21:01:235[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:01:235[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:01:236[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:01:236[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:01:236[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:01:236[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:01:236[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:01:236[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:01:236[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:01:236[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:01:236[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:01:236[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:01:236[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:01:236[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:01:236[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:01:236[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:01:236[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:01:236[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:01:236[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:01:236[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:01:236[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:01:236[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:01:236[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:01:236[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:01:236[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:01:236[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:01:236[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:01:236[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:01:236[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:01:236[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:01:236[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:01:236[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:01:236[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:01:236[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:01:236[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:01:236[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:01:237[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:01:237[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:01:237[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:01:237[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:01:237[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:01:237[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:01:237[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:01:237[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:01:237[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:01:237[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:01:237[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:01:237[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:01:237[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:01:237[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:01:237[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:01:237[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:01:237[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:01:237[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:01:237[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:01:237[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:01:237[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:01:237[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:01:237[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:01:237[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:01:237[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:01:237[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:01:237[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:01:237[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:01:237[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:01:237[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:01:237[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:01:237[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:01:237[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:01:237[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:01:237[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:01:237[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:01:237[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:01:237[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:01:237[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:01:237[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:01:237[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:01:237[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:01:237[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:01:237[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:01:237[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:01:237[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:01:237[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:01:237[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:01:237[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:01:237[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:01:237[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:01:237[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/tableMethods/customerMethods.test.ts > Customer uniqueness constraints > stripeCustomerId uniqueness constraint > should prevent updating to a duplicate stripeCustomerId
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > can update a pricingModel in the current organization 726ms
[90m11:21:01:896[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:01:896[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:01:896[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:01:896[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:01:898[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:01:898[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:01:898[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:01:898[0m [34m[setup-server][0m constructing the interceptor...
stderr | src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > cannot insert a pricingModel for a different organization
[createInsertManyFunction] Error inserting into pricingModels: DrizzleQueryError: Failed query: insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"
params: pricing_model_x8ezBrGKjTGVuy1p7yVfa,__TEST__,__TEST__,true,org_TNsYkHTgxuBKZSigUqUkx,false,Cross Org PricingModel
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
    at apiKey [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1322:11[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:72:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m {
  query: [32m'insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"'[39m,
  params: [
    [32m'pricing_model_x8ezBrGKjTGVuy1p7yVfa'[39m,
    [32m'__TEST__'[39m,
    [32m'__TEST__'[39m,
    [33mtrue[39m,
    [32m'org_TNsYkHTgxuBKZSigUqUkx'[39m,
    [33mfalse[39m,
    [32m'Cross Org PricingModel'[39m
  ],
  cause: PostgresError: new row violates row-level security policy for table "pricing_models"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'42501'[39m,
    file: [32m'execMain.c'[39m,
    line: [32m'2146'[39m,
    routine: [32m'ExecWithCheckOptions'[39m,
    query: [32m'insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"'[39m,
    parameters: [
      [32m'pricing_model_x8ezBrGKjTGVuy1p7yVfa'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [32m't'[39m,
      [32m'org_TNsYkHTgxuBKZSigUqUkx'[39m,
      [32m'f'[39m,
      [32m'Cross Org PricingModel'[39m
    ],
    args: [
      [32m'pricing_model_x8ezBrGKjTGVuy1p7yVfa'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'org_TNsYkHTgxuBKZSigUqUkx'[39m,
      [33mfalse[39m,
      [32m'Cross Org PricingModel'[39m
    ],
    types: [
      [33m25[39m, [33m25[39m, [33m25[39m, [33m16[39m,
      [33m25[39m, [33m16[39m, [33m25[39m
    ]
  }
}

stderr | src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > cannot insert a pricingModel for a different organization
[createInsertFunction] Error inserting single item into pricingModels: Error: Failed to insert items into pricingModels: Failed query: insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"
params: pricing_model_x8ezBrGKjTGVuy1p7yVfa,__TEST__,__TEST__,true,org_TNsYkHTgxuBKZSigUqUkx,false,Cross Org PricingModel
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:214:13
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
[90m    ... 4 lines matching cause stack trace ...[39m
    at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1319:5
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  [cause]: DrizzleQueryError: Failed query: insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"
  params: pricing_model_x8ezBrGKjTGVuy1p7yVfa,__TEST__,__TEST__,true,org_TNsYkHTgxuBKZSigUqUkx,false,Cross Org PricingModel
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
      at apiKey [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1322:11[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:72:18
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
      at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m {
    query: [32m'insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"'[39m,
    params: [
      [32m'pricing_model_x8ezBrGKjTGVuy1p7yVfa'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'org_TNsYkHTgxuBKZSigUqUkx'[39m,
      [33mfalse[39m,
      [32m'Cross Org PricingModel'[39m
    ],
    cause: PostgresError: new row violates row-level security policy for table "pricing_models"
        at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
        at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
        at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
    [90m    at Socket.emit (node:events:507:28)[39m
    [90m    at addChunk (node:internal/streams/readable:559:12)[39m
    [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
    [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
    [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
        at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
        at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
        at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
      severity_local: [32m'ERROR'[39m,
      severity: [32m'ERROR'[39m,
      code: [32m'42501'[39m,
      file: [32m'execMain.c'[39m,
      line: [32m'2146'[39m,
      routine: [32m'ExecWithCheckOptions'[39m,
      query: [32m'insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"'[39m,
      parameters: [36m[Array][39m,
      args: [36m[Array][39m,
      types: [36m[Array][39m
    }
  }
}

 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > cannot insert a pricingModel for a different organization 331ms
[90m11:21:02:29[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:02:29[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:02:29[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:02:29[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:02:30[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:02:30[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:02:30[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:02:30[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:02:31[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:02:31[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:02:31[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:02:31[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:02:32[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:02:32[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:02:33[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:02:34[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:02:34[0m [34m[xhr][0m set global instance! xhr
[90m11:21:02:34[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:02:34[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:02:34[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:02:34[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:02:34[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:02:35[0m [34m[fetch][0m set global instance! fetch
[90m11:21:02:35[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:02:35[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:02:35[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:02:35[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:02:35[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:02:35[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:02:35[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:02:35[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:02:35[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:02:35[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:02:35[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:02:36[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:02:36[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:02:36[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:02:36[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:02:36[0m [34m[websocket][0m set global instance! websocket
[90m11:21:02:36[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:02:36[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:02:36[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:02:36[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:02:36[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:02:36[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:02:36[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:02:36[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:02:36[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:02:36[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:02:36[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:02:36[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:02:36[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:02:36[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:02:36[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:02:36[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:02:36[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:02:36[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:02:36[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:02:36[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:02:37[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:02:37[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:02:37[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:02:37[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:02:37[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:02:37[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:02:37[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:02:37[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:02:37[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:02:37[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:02:37[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:02:37[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:02:38[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:02:38[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:02:38[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:02:38[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:02:38[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:02:38[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:02:38[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:02:38[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:02:38[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:02:38[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:02:39[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:02:39[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:02:39[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:02:39[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:02:39[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:02:39[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:02:39[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:02:39[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:02:39[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:02:39[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:02:39[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:02:39[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:02:39[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:02:39[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:02:39[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:02:39[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:02:39[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:02:39[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:02:39[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:02:39[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:02:39[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:02:39[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:02:39[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:02:39[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:02:39[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:02:39[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:02:39[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:02:39[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:02:39[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:02:39[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:02:39[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:02:39[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:02:39[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:02:39[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:02:39[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:02:39[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:02:39[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:02:39[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:02:39[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:02:39[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:02:39[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:02:39[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:02:39[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:02:39[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:02:39[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:02:39[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:02:39[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:02:39[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:02:39[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:02:40[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:02:40[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:02:40[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:02:40[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:02:40[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > can insert a pricingModel for the current organization
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > cannot delete a pricingModel from a different organization
 ✓ src/db/databaseAuthentication.test.ts > databaseAuthenticationInfoForWebappRequest > should use the focused membership to derive userId, livemode, and jwtClaim fields 478ms
stderr | src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > cannot delete a pricingModel from a different organization
[createUpdateFunction] Error updating pricingModels with id pricing_model_yvS7VZAHaph9k5meLIhfL: Error: No pricing models found with id: pricing_model_yvS7VZAHaph9k5meLIhfL
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:291:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at apiKey [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1366:11[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:72:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1363:5
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

 ✓ src/db/databaseAuthentication.test.ts > databaseAuthenticationInfoForWebappRequest > should fall back to the first membership returned when none are focused 346ms
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > cannot delete a pricingModel from a different organization 597ms
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > respects livemode: live/test separation for pricingModels
 ✓ src/db/databaseAuthentication.test.ts > databaseAuthenticationInfoForWebappRequest > should return undefined userId and empty organization_id when the user has no memberships 333ms
 ✓ src/db/databaseAuthentication.test.ts > dbAuthInfoForSecretApiKeyResult > should resolve userId via internal users.id when membership exists in the owner organization 330ms
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > respects livemode: live/test separation for pricingModels 602ms
 ✓ src/db/databaseAuthentication.test.ts > dbAuthInfoForSecretApiKeyResult > should resolve userId via users.clerkId mapping when membership exists in the owner organization
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > webapp session auth behaves the same as API key auth 335ms
 ✓ src/db/databaseAuthentication.test.ts > dbAuthInfoForSecretApiKeyResult > should currently throw if no membership is found for the owner organization (unsafe indexing) 301ms
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > user with membership in only one organization cannot access other organizations' pricingModels 391ms
 ✓ src/db/databaseAuthentication.test.ts > dbAuthInfoForSecretApiKeyResult > should map environment to livemode correctly 376ms
 ✓ src/db/authenticatedTransaction.test.ts > RLS for selectPricingModels > user with membership in only one organization cannot access other organizations' pricingModels 440ms
 ✓ src/db/databaseAuthentication.test.ts > dbAuthInfoForBillingPortalApiKeyResult > should resolve the earliest membership in the organization and derive claims 320ms
 ✓ src/db/databaseAuthentication.test.ts > dbAuthInfoForBillingPortalApiKeyResult > should throw when no matching customer exists for the metadata 417ms
 ✓ src/db/authenticatedTransaction.test.ts > Second-order RLS defense in depth > explicitly querying by ID from another organization still fails RLS 658ms
 ✓ src/db/databaseAuthentication.test.ts > dbAuthInfoForBillingPortalApiKeyResult > should throw when organization has zero memberships 361ms
 ✓ src/db/databaseAuthentication.test.ts > dbAuthInfoForBillingPortalApiKeyResult > should validate metadata presence and throw on invalid metadata
[90m11:21:05:924[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:06:88[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:06:88[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:06:124[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:06:127[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:06:129[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:06:130[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:06:131[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:06:131[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:05:984[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:06:214[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:06:214[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:06:214[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:06:214[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:06:218[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:06:218[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:06:218[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:06:218[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/databaseAuthentication.test.ts > dbAuthInfoForBillingPortalApiKeyResult > should map environment to livemode correctly 318ms
 ✓ src/db/databaseAuthentication.test.ts > databaseAuthenticationInfoForApiKeyResult > should delegate to Secret API key flow when keyType=Secret 306ms
 ✓ src/db/authenticatedTransaction.test.ts > Second-order RLS defense in depth > joining tables indirectly cannot bypass RLS 1262ms
[90m11:21:06:691[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:06:859[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:06:859[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:06:859[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:06:859[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/databaseAuthentication.test.ts > databaseAuthenticationInfoForApiKeyResult > should delegate to Billing Portal flow when keyType=BillingPortalToken
[90m11:21:06:863[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:06:863[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:06:863[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:06:863[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/databaseAuthentication.test.ts > databaseAuthenticationInfoForApiKeyResult > should throw on invalid key type 329ms
[90m11:21:07:275[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:07:275[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:07:275[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:07:275[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:07:277[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:07:277[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:07:277[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:07:277[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:07:313[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:07:313[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:07:313[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:313[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:07:313[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:07:313[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:07:313[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:07:314[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:314[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:07:314[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:314[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:07:314[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:07:314[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:07:314[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:314[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:07:314[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:07:314[0m [34m[xhr][0m set global instance! xhr
[90m11:21:07:314[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:314[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:07:314[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:07:314[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:07:314[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:315[0m [34m[fetch][0m set global instance! fetch
[90m11:21:07:315[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:315[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:07:315[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:07:315[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:07:315[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:07:315[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:07:315[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:07:315[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:07:315[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:07:315[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:07:315[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:07:315[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:07:315[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:07:316[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:07:316[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:316[0m [34m[websocket][0m set global instance! websocket
[90m11:21:07:316[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:07:316[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:07:316[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:316[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:07:316[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:07:316[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:07:316[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:07:316[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:07:316[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:316[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:07:316[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:07:316[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:07:316[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:07:316[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:316[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:07:316[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:07:316[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:07:316[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:07:316[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:316[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:07:316[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:07:316[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:07:316[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:07:316[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:07:316[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:07:316[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:07:316[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:07:316[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:07:316[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:07:316[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:07:317[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:07:317[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:07:317[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:07:317[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:07:317[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:317[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:07:317[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:07:317[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:07:317[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:07:317[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:07:317[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:317[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:07:317[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:07:317[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:07:317[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:07:317[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:317[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:07:317[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:07:317[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:07:317[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:07:317[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:317[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:07:317[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:07:317[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:07:317[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:07:317[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:07:317[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:07:317[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:07:317[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:07:317[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:07:317[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:07:317[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:07:317[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:07:317[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:07:317[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:07:317[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:07:317[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:317[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:07:317[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:07:317[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:07:317[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:07:318[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:07:318[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:318[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:07:318[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:07:318[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:07:318[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:07:318[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:318[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:07:318[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:07:318[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:07:318[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:07:318[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:318[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:07:318[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:07:318[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:07:318[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:07:318[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:07:318[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:07:318[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:07:318[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:07:318[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:07:318[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:07:318[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:07:318[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:07:318[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/db/databaseAuthentication.test.ts > getDatabaseAuthenticationInfo > should use API key path when apiKey is provided 309ms
stderr | src/db/authenticatedTransaction.test.ts > Second-order RLS defense in depth > attempting to set organizationId during update across orgs is denied
[createUpdateFunction] Error updating products with id prod_ooNFpqAh087j170Kp7rgX: DrizzleQueryError: Failed query: update "products" set "id" = $1, "updated_at" = $2, "organization_id" = $3 where "products"."id" = $4 returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"
params: prod_ooNFpqAh087j170Kp7rgX,2025-09-07T15:21:06.871Z,org_97q6vQ4Oya1A2C2bXZuKo,prod_ooNFpqAh087j170Kp7rgX
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:276:24
    at apiKey [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1514:11[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:72:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1511:5 {
  query: [32m'update "products" set "id" = $1, "updated_at" = $2, "organization_id" = $3 where "products"."id" = $4 returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"'[39m,
  params: [
    [32m'prod_ooNFpqAh087j170Kp7rgX'[39m,
    [32m'2025-09-07T15:21:06.871Z'[39m,
    [32m'org_97q6vQ4Oya1A2C2bXZuKo'[39m,
    [32m'prod_ooNFpqAh087j170Kp7rgX'[39m
  ],
  cause: PostgresError: new row violates row-level security policy for table "products"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at QueryPromise.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/update.ts:603:26[90m)[39m {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'42501'[39m,
    file: [32m'execMain.c'[39m,
    line: [32m'2146'[39m,
    routine: [32m'ExecWithCheckOptions'[39m,
    query: [32m'update "products" set "id" = $1, "updated_at" = $2, "organization_id" = $3 where "products"."id" = $4 returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"'[39m,
    parameters: [
      [32m'prod_ooNFpqAh087j170Kp7rgX'[39m,
      [32m'2025-09-07T15:21:06.871Z'[39m,
      [32m'org_97q6vQ4Oya1A2C2bXZuKo'[39m,
      [32m'prod_ooNFpqAh087j170Kp7rgX'[39m
    ],
    args: [
      [32m'prod_ooNFpqAh087j170Kp7rgX'[39m,
      [32m'2025-09-07T15:21:06.871Z'[39m,
      [32m'org_97q6vQ4Oya1A2C2bXZuKo'[39m,
      [32m'prod_ooNFpqAh087j170Kp7rgX'[39m
    ],
    types: [ [33m25[39m, [33m1184[39m, [33m25[39m, [33m25[39m ]
  }
}

 ✓ src/db/authenticatedTransaction.test.ts > Second-order RLS defense in depth > attempting to set organizationId during update across orgs is denied 776ms
 ✓ src/db/databaseAuthentication.test.ts > getDatabaseAuthenticationInfo > should delegate to webapp request path when apiKey is not provided and session exists
stderr | src/db/authenticatedTransaction.test.ts > Second-order RLS defense in depth > attempting to insert with mismatched livemode vs app.livemode is denied (if check policies exist)
[createInsertManyFunction] Error inserting into pricingModels: DrizzleQueryError: Failed query: insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"
params: pricing_model_AaOCb8mCVMZJ5D6865YUC,__TEST__,__TEST__,false,org_arQN0Rn94yBRsHxipiocw,false,Wrong Mode
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
    at apiKey [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1535:11[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:72:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m {
  query: [32m'insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"'[39m,
  params: [
    [32m'pricing_model_AaOCb8mCVMZJ5D6865YUC'[39m,
    [32m'__TEST__'[39m,
    [32m'__TEST__'[39m,
    [33mfalse[39m,
    [32m'org_arQN0Rn94yBRsHxipiocw'[39m,
    [33mfalse[39m,
    [32m'Wrong Mode'[39m
  ],
  cause: PostgresError: new row violates row-level security policy "Check mode" for table "pricing_models"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'42501'[39m,
    file: [32m'execMain.c'[39m,
    line: [32m'2141'[39m,
    routine: [32m'ExecWithCheckOptions'[39m,
    query: [32m'insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"'[39m,
    parameters: [
      [32m'pricing_model_AaOCb8mCVMZJ5D6865YUC'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [32m'f'[39m,
      [32m'org_arQN0Rn94yBRsHxipiocw'[39m,
      [32m'f'[39m,
      [32m'Wrong Mode'[39m
    ],
    args: [
      [32m'pricing_model_AaOCb8mCVMZJ5D6865YUC'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mfalse[39m,
      [32m'org_arQN0Rn94yBRsHxipiocw'[39m,
      [33mfalse[39m,
      [32m'Wrong Mode'[39m
    ],
    types: [
      [33m25[39m, [33m25[39m, [33m25[39m, [33m16[39m,
      [33m25[39m, [33m16[39m, [33m25[39m
    ]
  }
}

stderr | src/db/authenticatedTransaction.test.ts > Second-order RLS defense in depth > attempting to insert with mismatched livemode vs app.livemode is denied (if check policies exist)
[createInsertFunction] Error inserting single item into pricingModels: Error: Failed to insert items into pricingModels: Failed query: insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"
params: pricing_model_AaOCb8mCVMZJ5D6865YUC,__TEST__,__TEST__,false,org_arQN0Rn94yBRsHxipiocw,false,Wrong Mode
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:214:13
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
[90m    ... 4 lines matching cause stack trace ...[39m
    at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1532:5
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  [cause]: DrizzleQueryError: Failed query: insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"
  params: pricing_model_AaOCb8mCVMZJ5D6865YUC,__TEST__,__TEST__,false,org_arQN0Rn94yBRsHxipiocw,false,Wrong Mode
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
      at apiKey [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1535:11[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:72:18
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
      at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m {
    query: [32m'insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"'[39m,
    params: [
      [32m'pricing_model_AaOCb8mCVMZJ5D6865YUC'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mfalse[39m,
      [32m'org_arQN0Rn94yBRsHxipiocw'[39m,
      [33mfalse[39m,
      [32m'Wrong Mode'[39m
    ],
    cause: PostgresError: new row violates row-level security policy "Check mode" for table "pricing_models"
        at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
        at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
        at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
    [90m    at Socket.emit (node:events:507:28)[39m
    [90m    at addChunk (node:internal/streams/readable:559:12)[39m
    [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
    [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
    [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
        at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
        at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
        at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
      severity_local: [32m'ERROR'[39m,
      severity: [32m'ERROR'[39m,
      code: [32m'42501'[39m,
      file: [32m'execMain.c'[39m,
      line: [32m'2141'[39m,
      routine: [32m'ExecWithCheckOptions'[39m,
      query: [32m'insert into "pricing_models" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name") values ($1, default, default, $2, $3, $4, default, $5, $6, $7) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "is_default", "name"'[39m,
      parameters: [36m[Array][39m,
      args: [36m[Array][39m,
      types: [36m[Array][39m
    }
  }
}

 ✓ src/db/authenticatedTransaction.test.ts > Second-order RLS defense in depth > attempting to insert with mismatched livemode vs app.livemode is denied (if check policies exist)
[90m11:21:07:950[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:07:950[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:07:950[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:950[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:07:951[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:07:951[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:07:951[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:07:951[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:951[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:07:951[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:951[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:07:951[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:07:951[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:07:951[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:951[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:07:951[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:07:952[0m [34m[xhr][0m set global instance! xhr
[90m11:21:07:952[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:952[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:07:952[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:07:952[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:07:952[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:952[0m [34m[fetch][0m set global instance! fetch
[90m11:21:07:952[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:952[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:07:952[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:07:952[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:07:952[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:07:952[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:07:952[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:07:952[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:07:952[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:07:952[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:07:952[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:07:953[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:07:953[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:07:953[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:07:953[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:953[0m [34m[websocket][0m set global instance! websocket
[90m11:21:07:953[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:07:953[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:07:953[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:953[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:07:953[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:07:953[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:07:953[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:07:953[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:07:953[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:953[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:07:953[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:07:953[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:07:953[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:07:953[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:953[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:07:953[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:07:953[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:07:954[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:07:954[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:954[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:07:954[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:07:954[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:07:954[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:07:954[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:07:954[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:07:954[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:07:954[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:07:954[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:07:954[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:07:954[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:07:954[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:07:954[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:07:954[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:07:954[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:07:954[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:954[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:07:954[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:07:954[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:07:954[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:07:954[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:07:954[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:954[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:07:954[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:07:954[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:07:954[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:07:954[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:954[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:07:954[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:07:954[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:07:954[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:07:954[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:954[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:07:954[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:07:954[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:07:954[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:07:954[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:07:955[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:07:955[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:07:955[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:07:955[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:07:955[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:07:955[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:07:955[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:07:955[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:07:955[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:07:955[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:07:955[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:07:955[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:07:955[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:07:955[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:07:955[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:07:955[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:07:955[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:955[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:07:955[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:07:955[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:07:955[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:07:955[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:955[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:07:955[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:07:955[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:07:955[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:07:955[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:07:955[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:07:955[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:07:955[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:07:955[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:07:955[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:07:955[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:07:955[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:07:955[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:07:955[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:07:955[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:07:955[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:07:955[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:07:955[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/db/databaseAuthentication.test.ts > getDatabaseAuthenticationInfo > should throw when apiKey is not provided and no session exists 311ms
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > setupIntentStatusToCheckoutSessionStatus > correctly maps "succeeded" status to CheckoutSessionStatus.Succeeded
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > setupIntentStatusToCheckoutSessionStatus > correctly maps "processing" status to CheckoutSessionStatus.Pending
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > setupIntentStatusToCheckoutSessionStatus > correctly maps "canceled" status to CheckoutSessionStatus.Failed
 ✓ src/db/databaseAuthentication.test.ts > subtleties and invariants across flows > jwtClaim.sub should equal jwtClaim.user_metadata.id in all successful flows 501ms
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > setupIntentStatusToCheckoutSessionStatus > correctly maps "requires_payment_method" status to CheckoutSessionStatus.Pending
stderr | src/db/authenticatedTransaction.test.ts > Second-order RLS defense in depth > no access when user has no membership in the organization
[createInsertManyFunction] Error inserting into products: DrizzleQueryError: Failed query: insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"
params: prod_vAWMi9FVGD4By1yoXONMD,__TEST__,__TEST__,true,X,,,org_EienyZAdnB7qz1cid4ENj,,true,,,pricing_model_AKKRCbpCzFHRRrL6LSUK8,,false,
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
    at apiKey [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1568:11[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:72:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m {
  query: [32m'insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"'[39m,
  params: [
    [32m'prod_vAWMi9FVGD4By1yoXONMD'[39m,
    [32m'__TEST__'[39m,
    [32m'__TEST__'[39m,
    [33mtrue[39m,
    [32m'X'[39m,
    [1mnull[22m,
    [1mnull[22m,
    [32m'org_EienyZAdnB7qz1cid4ENj'[39m,
    [1mnull[22m,
    [33mtrue[39m,
    [1mnull[22m,
    [1mnull[22m,
    [32m'pricing_model_AKKRCbpCzFHRRrL6LSUK8'[39m,
    [1mnull[22m,
    [33mfalse[39m,
    [1mnull[22m
  ],
  cause: PostgresError: new row violates row-level security policy for table "products"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'42501'[39m,
    file: [32m'execMain.c'[39m,
    line: [32m'2146'[39m,
    routine: [32m'ExecWithCheckOptions'[39m,
    query: [32m'insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"'[39m,
    parameters: [
      [32m'prod_vAWMi9FVGD4By1yoXONMD'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [32m't'[39m,
      [32m'X'[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'org_EienyZAdnB7qz1cid4ENj'[39m,
      [1mnull[22m,
      [32m't'[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'pricing_model_AKKRCbpCzFHRRrL6LSUK8'[39m,
      [1mnull[22m,
      [32m'f'[39m,
      [1mnull[22m
    ],
    args: [
      [32m'prod_vAWMi9FVGD4By1yoXONMD'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'X'[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'org_EienyZAdnB7qz1cid4ENj'[39m,
      [1mnull[22m,
      [33mtrue[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'pricing_model_AKKRCbpCzFHRRrL6LSUK8'[39m,
      [1mnull[22m,
      [33mfalse[39m,
      [1mnull[22m
    ],
    types: [
      [33m25[39m, [33m25[39m, [33m25[39m,   [33m16[39m, [33m25[39m,
      [33m25[39m, [33m25[39m, [33m25[39m, [33m3802[39m, [33m16[39m,
      [33m25[39m, [33m25[39m, [33m25[39m,   [33m25[39m, [33m16[39m,
      [33m25[39m
    ]
  }
}

stderr | src/db/authenticatedTransaction.test.ts > Second-order RLS defense in depth > no access when user has no membership in the organization
[createInsertFunction] Error inserting single item into products: Error: Failed to insert items into products: Failed query: insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"
params: prod_vAWMi9FVGD4By1yoXONMD,__TEST__,__TEST__,true,X,,,org_EienyZAdnB7qz1cid4ENj,,true,,,pricing_model_AKKRCbpCzFHRRrL6LSUK8,,false,
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:214:13
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
[90m    ... 4 lines matching cause stack trace ...[39m
    at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1565:5
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  [cause]: DrizzleQueryError: Failed query: insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"
  params: prod_vAWMi9FVGD4By1yoXONMD,__TEST__,__TEST__,true,X,,,org_EienyZAdnB7qz1cid4ENj,,true,,,pricing_model_AKKRCbpCzFHRRrL6LSUK8,,false,
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
      at apiKey [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.test.ts:1568:11[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:72:18
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
      at authenticatedTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/authenticatedTransaction.ts:43:10[90m)[39m {
    query: [32m'insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"'[39m,
    params: [
      [32m'prod_vAWMi9FVGD4By1yoXONMD'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'X'[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'org_EienyZAdnB7qz1cid4ENj'[39m,
      [1mnull[22m,
      [33mtrue[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'pricing_model_AKKRCbpCzFHRRrL6LSUK8'[39m,
      [1mnull[22m,
      [33mfalse[39m,
      [1mnull[22m
    ],
    cause: PostgresError: new row violates row-level security policy for table "products"
        at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
        at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
        at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
    [90m    at Socket.emit (node:events:507:28)[39m
    [90m    at addChunk (node:internal/streams/readable:559:12)[39m
    [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
    [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
    [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
        at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
        at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
        at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
      severity_local: [32m'ERROR'[39m,
      severity: [32m'ERROR'[39m,
      code: [32m'42501'[39m,
      file: [32m'execMain.c'[39m,
      line: [32m'2146'[39m,
      routine: [32m'ExecWithCheckOptions'[39m,
      query: [32m'insert into "products" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "name", "description", "image_url", "organization_id", "display_features", "active", "singular_quantity_label", "plural_quantity_label", "pricing_model_id", "external_id", "default", "slug"'[39m,
      parameters: [36m[Array][39m,
      args: [36m[Array][39m,
      types: [36m[Array][39m
    }
  }
}

 ✓ src/db/authenticatedTransaction.test.ts > Second-order RLS defense in depth > no access when user has no membership in the organization 1027ms
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > setupIntentStatusToCheckoutSessionStatus > maps unknown status to CheckoutSessionStatus.Pending
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > checkoutSessionFromSetupIntent > throws an error when metadata is missing
 ✓ src/db/databaseAuthentication.test.ts > subtleties and invariants across flows > jwtClaim field naming uses organization_id (snake_case), not organizationId 549ms
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > checkoutSessionFromSetupIntent > throws an error when metadata type is not CheckoutSession
 ✓ src/db/authenticatedTransaction.test.ts > Second-order RLS defense in depth > API key and session both set RLS context correctly: parity test 515ms
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > checkoutSessionFromSetupIntent > throws an error when setup intent status is not succeeded
[90m11:21:09:503[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:09:503[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:09:503[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:09:503[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:09:506[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:09:506[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:09:506[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:09:506[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > checkoutSessionFromSetupIntent > returns the checkout session when all conditions are met
[90m11:21:09:686[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:09:686[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:09:686[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:09:686[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:09:688[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:09:688[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:09:688[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:09:688[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/databaseAuthentication.test.ts > subtleties and invariants across flows > provider consistency: jwtClaim.app_metadata.provider is currently "apiKey" for all paths 614ms
[90m11:21:09:801[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:09:801[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:09:801[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:09:801[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:09:801[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:09:801[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:09:801[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:09:801[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:09:802[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:09:802[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:09:802[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:09:802[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:09:802[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:09:802[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:09:802[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:09:802[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:09:802[0m [34m[xhr][0m set global instance! xhr
[90m11:21:09:802[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:09:802[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:09:802[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:09:802[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:09:802[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:09:802[0m [34m[fetch][0m set global instance! fetch
[90m11:21:09:802[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:09:802[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:09:803[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:09:803[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:09:803[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:09:803[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:09:803[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:09:803[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:09:803[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:09:803[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:09:803[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:09:803[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:09:804[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:09:804[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:09:804[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:09:804[0m [34m[websocket][0m set global instance! websocket
[90m11:21:09:804[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:09:804[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:09:804[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:09:804[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:09:804[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:09:804[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:09:804[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:09:804[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:09:804[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:09:804[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:09:804[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:09:804[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:09:804[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:09:804[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:09:804[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:09:804[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:09:804[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:09:804[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:09:804[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:09:804[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:09:804[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:09:804[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:09:804[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:09:804[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:09:804[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:09:804[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:09:804[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:09:805[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:09:805[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:09:805[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:09:805[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:09:805[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:09:805[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:09:805[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:09:805[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:09:805[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:09:805[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:09:805[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:09:805[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:09:805[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:09:805[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:09:805[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:09:805[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:09:805[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:09:805[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:09:805[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:09:805[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:09:805[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:09:805[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:09:805[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:09:805[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:09:805[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:09:805[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:09:805[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:09:805[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:09:805[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:09:805[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:09:805[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:09:805[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:09:805[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:09:805[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:09:805[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:09:805[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:09:805[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:09:805[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:09:805[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:09:805[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:09:806[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:09:806[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:09:806[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:09:806[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:09:806[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:09:806[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:09:806[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:09:806[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:09:806[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:09:806[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:09:806[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:09:806[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:09:806[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:09:806[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:09:806[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:09:806[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:09:806[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:09:806[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:09:806[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:09:806[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:09:806[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:09:806[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:09:806[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:09:806[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:09:806[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:09:806[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:09:806[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:09:806[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:09:806[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSubscriptionCreatingCheckoutSessionSetupIntentSucceeded > throws an error when checkout session is in terminal state
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSubscriptionCreatingCheckoutSessionSetupIntentSucceeded > throws an error when checkout session type is Invoice 320ms
[90m11:21:10:193[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:10:193[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:10:193[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:10:193[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:10:193[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:10:193[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:10:193[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:10:193[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectSubscriptionItemById > should return a subscription item when a valid ID is provided and the item exists
[90m11:21:10:193[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:10:194[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:10:194[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:10:194[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:10:194[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:10:194[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:10:194[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:10:194[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:10:194[0m [34m[xhr][0m set global instance! xhr
[90m11:21:10:194[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:10:194[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:10:194[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:10:195[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:10:195[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:10:195[0m [34m[fetch][0m set global instance! fetch
[90m11:21:10:195[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:10:195[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:10:195[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:10:196[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:10:196[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:10:196[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:10:196[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:10:196[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:10:196[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:10:196[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:10:196[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:10:196[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:10:196[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:10:197[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:10:197[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:10:197[0m [34m[websocket][0m set global instance! websocket
[90m11:21:10:197[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:10:197[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:10:197[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:10:197[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:10:197[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:10:197[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:10:197[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:10:197[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:10:197[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:10:197[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:10:197[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:10:197[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:10:197[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:10:197[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:10:197[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:10:197[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:10:197[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:10:197[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:10:197[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:10:197[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:10:198[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:10:198[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:10:198[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:10:198[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:10:198[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:10:198[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:10:198[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:10:198[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:10:198[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:10:198[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:10:198[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:10:198[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:10:198[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:10:198[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:10:198[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:10:198[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:10:198[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:10:198[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:10:198[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:10:198[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:10:198[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:10:198[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:10:198[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:10:198[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:10:198[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:10:198[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:10:198[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:10:198[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:10:198[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:10:198[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:10:198[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:10:198[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:10:198[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:10:199[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:10:199[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:10:199[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:10:199[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:10:199[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:10:199[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:10:199[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:10:199[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:10:199[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:10:199[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:10:199[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:10:199[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:10:199[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:10:199[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:10:199[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:10:199[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:10:199[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:10:199[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:10:199[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:10:199[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:10:199[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:10:199[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:10:199[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:10:199[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:10:199[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:10:199[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:10:199[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:10:199[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:10:199[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:10:199[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:10:199[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:10:199[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:10:200[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:10:200[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:10:200[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:10:200[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:10:200[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:10:200[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:10:200[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:10:200[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:10:200[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:10:200[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:10:200[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/db/databaseAuthentication.test.ts > subtleties and invariants across flows > session_id is present only in Secret API key flow (as currently implemented) 470ms
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSubscriptionCreatingCheckoutSessionSetupIntentSucceeded > throws an error when checkout session type is AddPaymentMethod
stderr | src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectSubscriptionItemById > should throw when the ID does not exist
[selectById] Error selecting subscription_items with id 5wayeKGanlfqGOYzp71uy: Error: No subscription items found with id: 5wayeKGanlfqGOYzp71uy
    at selectById [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:138:15[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/subscriptionItemMethods.test.ts:113:9
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/subscriptionItemMethods.test.ts:112:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectSubscriptionItemById > should throw when the ID does not exist
[90m11:21:10:460[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_SgmUd3ySt4kTWH52hEnJF
[90m11:21:10:460[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:10:460[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
 ✓ src/db/authenticatedTransaction.test.ts > Edge cases and robustness for second-order RLS > switching focus mid-test changes visibility accordingly (two sequential transactions) 1307ms
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > insertSubscriptionItem > should insert a new subscription item and return it
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > createFeeCalculationForCheckoutSession > should include discount when discountId is provided 486ms
 ✓ src/db/databaseAuthentication.test.ts > Customer Role vs Merchant Role Authentication > dbInfoForCustomerBillingPortal > should return customer role in JWT claim for customer authentication 571ms
stderr | src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > insertSubscriptionItem > should throw an error if required fields are missing (delegated to schema validation)
[createInsertManyFunction] Error inserting into subscription_items: ZodError: [
  {
    "code": "invalid_union",
    "errors": [],
    "note": "No matching discriminator",
    "discriminator": "type",
    "path": [
      "type"
    ],
    "message": "Invalid input"
  }
]
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:175:22
    at Array.map (<anonymous>)
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:174:35
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:30
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/subscriptionItemMethods.test.ts:167:11
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:24
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/subscriptionItemMethods.test.ts:164:7

stderr | src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > insertSubscriptionItem > should throw an error if required fields are missing (delegated to schema validation)
[createInsertFunction] Error inserting single item into subscription_items: Error: Failed to insert items into subscription_items: [
  {
    "code": "invalid_union",
    "errors": [],
    "note": "No matching discriminator",
    "discriminator": "type",
    "path": [
      "type"
    ],
    "message": "Invalid input"
  }
]
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:214:13
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:30
[90m    ... 5 lines matching cause stack trace ...[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/subscriptionItemMethods.test.ts:164:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  [cause]: ZodError: [
    {
      "code": "invalid_union",
      "errors": [],
      "note": "No matching discriminator",
      "discriminator": "type",
      "path": [
        "type"
      ],
      "message": "Invalid input"
    }
  ]
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:175:22
      at Array.map (<anonymous>)
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:174:35
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:30
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/subscriptionItemMethods.test.ts:167:11
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:24
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/subscriptionItemMethods.test.ts:164:7
}

stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSubscriptionCreatingCheckoutSessionSetupIntentSucceeded > processes purchase bookkeeping for regular checkout sessions
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_SgmUd3ySt4kTWH52hEnJF

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:10:807[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:10:808[0m [34m[fetch][0m emitting the "response" event...
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > insertSubscriptionItem > should throw an error if required fields are missing (delegated to schema validation)
[90m11:21:10:875[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSubscriptionCreatingCheckoutSessionSetupIntentSucceeded > processes purchase bookkeeping for regular checkout sessions
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_SgmUd3ySt4kTWH52hEnJF

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > updateSubscriptionItem > should update an existing subscription item and return the updated item
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSubscriptionCreatingCheckoutSessionSetupIntentSucceeded > processes purchase bookkeeping for regular checkout sessions
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_SgmUd3ySt4kTWH52hEnJF

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > createFeeCalculationForCheckoutSession > should correctly fetch price, product, and organization data
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSubscriptionCreatingCheckoutSessionSetupIntentSucceeded > processes purchase bookkeeping for regular checkout sessions 764ms
[90m11:21:11:157[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_X79Kd1ZlWo8DADhRlZvyo
[90m11:21:11:157[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:11:157[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > returns early with organization and customer when checkout session is in terminal state
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_X79Kd1ZlWo8DADhRlZvyo

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:11:167[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:11:167[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:11:171[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > returns early with organization and customer when checkout session is in terminal state
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_X79Kd1ZlWo8DADhRlZvyo

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > createFeeCalculationForCheckoutSession > should create fee calculation with correct parameters
stderr | src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > updateSubscriptionItem > should return null if the subscription item to update does not exist
[createUpdateFunction] Error updating subscription_items with id jbJjGZJrb83BfiyJAvRqY: Error: No subscription items found with id: jbJjGZJrb83BfiyJAvRqY
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:291:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/subscriptionItemMethods.test.ts:204:9
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/subscriptionItemMethods.test.ts:203:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > updateSubscriptionItem > should return null if the subscription item to update does not exist
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > returns early with organization and customer when checkout session is in terminal state
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_X79Kd1ZlWo8DADhRlZvyo

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/db/databaseAuthentication.test.ts > Customer Role vs Merchant Role Authentication > dbInfoForCustomerBillingPortal > should distinguish between merchant and customer roles 497ms
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > returns early with organization and customer when checkout session is in terminal state
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectSubscriptionItems > should return an array of subscription items matching the where conditions
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > editCheckoutSession > should throw "Checkout session is not open" when session status is not Open
[90m11:21:11:415[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_FqpcCk2RuwK1Yx8UpEGul
[90m11:21:11:415[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:11:415[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > updates checkout session status based on setup intent status
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_FqpcCk2RuwK1Yx8UpEGul

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectSubscriptionItems > should return an empty array if no subscription items match the where conditions
[90m11:21:11:483[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:11:483[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:11:487[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > updates checkout session status based on setup intent status
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_FqpcCk2RuwK1Yx8UpEGul

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > updates checkout session status based on setup intent status
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_FqpcCk2RuwK1Yx8UpEGul

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > bulkInsertSubscriptionItems > should insert multiple subscription items and return them
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > updates checkout session status based on setup intent status 307ms
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > editCheckoutSession > should update checkout session with merged fields from previous and new session
 ✓ src/db/databaseAuthentication.test.ts > Customer Role vs Merchant Role Authentication > dbInfoForCustomerBillingPortal > should fail when customer tries to authenticate for wrong organization 420ms
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectSubscriptionAndItems > should return the subscription and its associated items when a valid where clause for subscriptions is provided
[90m11:21:11:753[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_baGb5CMFSvo2V6FC8Bvp7
[90m11:21:11:753[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:11:753[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > updates the target subscription with the new payment method when targetSubscriptionId is defined
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_baGb5CMFSvo2V6FC8Bvp7

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:11:788[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:11:788[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:11:788[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:11:788[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:11:791[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:11:791[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:11:791[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:11:791[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > editCheckoutSession > should skip fee calculation when updated session is not fee-ready
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectSubscriptionAndItems > should return null if no subscription matches the where clause
[90m11:21:11:830[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:11:831[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:11:831[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:11:831[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:11:831[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:11:831[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:11:831[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:11:831[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:11:831[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:11:831[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:11:831[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:11:831[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:11:831[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:11:831[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:11:832[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:11:832[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:11:832[0m [34m[xhr][0m set global instance! xhr
[90m11:21:11:832[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:11:832[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:11:832[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:11:832[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:11:832[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:11:832[0m [34m[fetch][0m set global instance! fetch
[90m11:21:11:832[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:11:832[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:11:832[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:11:832[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:11:832[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:11:832[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:11:832[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:11:832[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:11:833[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:11:833[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:11:833[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:11:833[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:11:833[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:11:833[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:11:833[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:11:833[0m [34m[websocket][0m set global instance! websocket
[90m11:21:11:833[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:11:833[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:11:833[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:11:833[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:11:833[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:11:834[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:11:834[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:11:834[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:11:834[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:11:834[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:11:834[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:11:834[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:11:834[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:11:834[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:11:834[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:11:834[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:11:834[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:11:834[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:11:834[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:11:834[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:11:834[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:11:834[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:11:834[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:11:834[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:11:834[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:11:834[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:11:834[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:11:834[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:11:834[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:11:834[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:11:834[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:11:834[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:11:834[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:11:834[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:11:834[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:11:835[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:11:835[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:11:835[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:11:835[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:11:835[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:11:835[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:11:835[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:11:835[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:11:835[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:11:835[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:11:835[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:11:835[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:11:835[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:11:835[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:11:835[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:11:835[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:11:835[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:11:835[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:11:835[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:11:835[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:11:835[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:11:835[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:11:835[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:11:835[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:11:835[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:11:835[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:11:835[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:11:835[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:11:835[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:11:835[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:11:835[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:11:835[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:11:835[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:11:835[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:11:835[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:11:835[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:11:835[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:11:835[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:11:835[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:11:835[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:11:836[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:11:836[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:11:836[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:11:836[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:11:836[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:11:836[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:11:836[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:11:836[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:11:836[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:11:836[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:11:836[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:11:836[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:11:836[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:11:836[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:11:836[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:11:836[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:11:836[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:11:836[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:11:836[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:11:836[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:11:836[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:11:843[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:11:843[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:11:849[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > updates the target subscription with the new payment method when targetSubscriptionId is defined
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_baGb5CMFSvo2V6FC8Bvp7

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > updates the target subscription with the new payment method when targetSubscriptionId is defined
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_baGb5CMFSvo2V6FC8Bvp7

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > updates the target subscription with the new payment method when targetSubscriptionId is defined
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectSubscriptionItemsAndSubscriptionBySubscriptionId > should return the subscription and its items when a valid subscriptionId is provided
[90m11:21:12:6[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:12:6[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:12:6[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:12:6[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:12:6[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:12:6[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:12:6[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:12:6[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:12:6[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:12:6[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:12:6[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:12:6[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:12:6[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:12:6[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:12:6[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:12:6[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:12:6[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:12:6[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:12:6[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:12:6[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:12:6[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:12:6[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:12:6[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:12:6[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:12:6[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:12:6[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:12:6[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:12:7[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:12:7[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:12:7[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:12:7[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:12:7[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:12:7[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:12:7[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:12:7[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:12:7[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:12:7[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:12:7[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:12:7[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:12:7[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:12:7[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:12:7[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:12:7[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:12:7[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:12:7[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:12:7[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:12:7[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:12:7[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:12:7[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:12:7[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:12:7[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:12:7[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:12:7[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:12:7[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:12:7[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:12:7[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:12:7[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:12:7[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:12:7[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:12:7[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:12:7[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:12:7[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:12:7[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:12:7[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:12:7[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:12:7[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:12:7[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:12:7[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:12:7[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:12:7[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:12:7[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:12:7[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:12:7[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:12:7[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:12:7[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:12:7[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:12:8[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:12:8[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:12:8[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:12:8[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:12:8[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:12:8[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:12:8[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:12:8[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:12:8[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:12:8[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:12:8[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:12:8[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/authenticatedTransaction.test.ts > Edge cases and robustness for second-order RLS > livemode toggling via different API keys switches visibility across transactions 1378ms
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > editCheckoutSession > should create new fee calculation when fee parameters have changed
[90m11:21:12:90[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_4wE96Vcug2eaIFxGIFUeD
[90m11:21:12:90[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:12:90[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectSubscriptionItemsAndSubscriptionBySubscriptionId > should return null if the subscriptionId does not exist
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > does not update any subscription when targetSubscriptionId is not defined
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_4wE96Vcug2eaIFxGIFUeD

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:12:154[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:12:154[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:12:159[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > does not update any subscription when targetSubscriptionId is not defined
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_4wE96Vcug2eaIFxGIFUeD

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/db/databaseAuthentication.test.ts > Customer Role vs Merchant Role Authentication > dbInfoForCustomerBillingPortal > should fail when user has no customer record in the organization 458ms
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > normalizeToMonthlyValue > should normalize monthly values based on interval count
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > normalizeToMonthlyValue > should normalize yearly values to monthly
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > normalizeToMonthlyValue > should normalize weekly values to monthly
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > normalizeToMonthlyValue > should normalize daily values to monthly
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > normalizeToMonthlyValue > should throw an error for invalid interval counts
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > normalizeToMonthlyValue > should throw an error for unsupported interval types
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > normalizeToMonthlyValue > should handle extremely large intervalCount values
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateOverlapPercentage > should return 1 when billing period is entirely within month
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateOverlapPercentage > should return 0 when billing period has no overlap with month
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateOverlapPercentage > should return 0 when billing period is completely after month
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateOverlapPercentage > should return partial value when billing period partially overlaps with month
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateOverlapPercentage > should handle month fully contained within billing period
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateOverlapPercentage > should return 1 when billing period exactly matches month boundaries
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateOverlapPercentage > should handle overlap at start of month
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateOverlapPercentage > should handle overlap at end of month
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateOverlapPercentage > should handle single day overlap at month boundary
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateOverlapPercentage > should handle same start date as month end
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateOverlapPercentage > should handle same end date as month start
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateBillingPeriodItemsValue > should calculate the total value of billing period items
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateBillingPeriodItemsValue > should return 0 for empty array
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateBillingPeriodItemsValue > should handle single item with quantity and price
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateBillingPeriodItemsValue > should handle multiple items with varying quantities/prices
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateBillingPeriodItemsValue > should handle zero quantity item contributes nothing
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateBillingPeriodItemsValue > should handle zero price item contributes nothing
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > bulkCreateOrUpdateSubscriptionItems > should insert new items and update existing ones based on their IDs
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > does not update any subscription when targetSubscriptionId is not defined
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_4wE96Vcug2eaIFxGIFUeD

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > editCheckoutSession > should use existing fee calculation when parameters have not changed
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > does not update any subscription when targetSubscriptionId is not defined 350ms
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > getBillingPeriodsForDateRange > should return empty array if no billing periods found
[90m11:21:12:429[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_PsljJmj4lF8ysQWFJasYA
[90m11:21:12:429[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:12:429[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > updates all customer subscriptions when automaticallyUpdateSubscriptions is true
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_PsljJmj4lF8ysQWFJasYA

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > expireSubscriptionItem > should update the expiredAt field of the specified subscription item and its features
[90m11:21:12:502[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:12:502[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:12:506[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > updates all customer subscriptions when automaticallyUpdateSubscriptions is true
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_PsljJmj4lF8ysQWFJasYA

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > updates all customer subscriptions when automaticallyUpdateSubscriptions is true
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_PsljJmj4lF8ysQWFJasYA

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > editCheckoutSession > should throw "Purchase is not pending" when purchase status is not Pending
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > updates all customer subscriptions when automaticallyUpdateSubscriptions is true 310ms
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > getBillingPeriodsForDateRange > should correctly map and return billing periods with associated items and subscription data 368ms
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectRichSubscriptionsAndActiveItems > should return rich subscriptions with only active items
[90m11:21:12:814[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_U9jyy6CpCkMF5CP4E2xoX
[90m11:21:12:814[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:12:814[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > editCheckoutSession > should update purchase with new billing address when purchase is pending
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateMRRByMonth > should generate array of months between startDate and endDate
 ✓ src/db/databaseAuthentication.test.ts > Customer Role vs Merchant Role Authentication > dbInfoForCustomerBillingPortal > should handle customer authentication across different organizations 653ms
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > does not update customer subscriptions when automaticallyUpdateSubscriptions is false
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_U9jyy6CpCkMF5CP4E2xoX

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:12:823[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:12:853[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:12:857[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > does not update customer subscriptions when automaticallyUpdateSubscriptions is false
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_U9jyy6CpCkMF5CP4E2xoX

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > does not update customer subscriptions when automaticallyUpdateSubscriptions is false
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_U9jyy6CpCkMF5CP4E2xoX

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateMRRByMonth > should return zero MRR when no billing periods exist
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processAddPaymentMethodSetupIntentSucceeded > does not update customer subscriptions when automaticallyUpdateSubscriptions is false 339ms
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectRichSubscriptionsAndActiveItems > should correctly determine current status for non-active subscriptions
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateMRRByMonth > should correctly calculate MRR for a single monthly subscription fully within one month
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > editCheckoutSession > should skip Stripe payment intent update when no fee calculation exists
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > calculateTrialEnd > when trialPeriodDays is invalid or zero > should return undefined when trialPeriodDays is null
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > calculateTrialEnd > when trialPeriodDays is invalid or zero > should return undefined when trialPeriodDays is null and hasHadTrial is true
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateMRRByMonth > should correctly calculate MRR for a yearly subscription spanning multiple months
 × src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Customer Isolation (Same Organization) > should prevent customerA from seeing customerB data in same org 5782ms
   → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectRichSubscriptionsAndActiveItems > should only include feature items for active subscription items
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processPurchaseBookkeepingForCheckoutSession > should use existing customer when linked to purchase
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > calculateTrialEnd > when trialPeriodDays is invalid or zero > should return undefined when trialPeriodDays is undefined
 ✓ src/db/databaseAuthentication.test.ts > Customer Role vs Merchant Role Authentication > dbInfoForCustomerBillingPortal > should set correct livemode based on customer record 588ms
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateMRRByMonth > should correctly handle prorated subscription spanning two months
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > calculateTrialEnd > when trialPeriodDays is invalid or zero > should return undefined when trialPeriodDays is undefined and hasHadTrial is true
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > calculateTrialEnd > when trialPeriodDays is invalid or zero > should return undefined when trialPeriodDays is 0
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processPurchaseBookkeepingForCheckoutSession > should use existing customer when linked to checkout session
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateMRRByMonth > should handle multiple subscriptions with different intervals
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > calculateTrialEnd > when trialPeriodDays is invalid or zero > should return undefined when trialPeriodDays is 0 and hasHadTrial is true
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processPurchaseBookkeepingForCheckoutSession > should throw error when provided Stripe customer ID does not match existing customer
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > calculateTrialEnd > when user has already had a trial > should return undefined with a positive trialPeriodDays
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectRichSubscriptionsAndActiveItems > should include all meter balances for the subscription regardless of subscription item association 579ms
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > calculateTrialEnd > when user has not had a trial and trialPeriodDays is positive > should return a future date for trialPeriodDays = 7
[90m11:21:13:983[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:13:983[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:13:983[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:13:983[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:13:983[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:13:983[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:13:983[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:13:983[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:13:983[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:13:983[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:13:983[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:13:983[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:13:983[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:13:983[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:13:983[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:13:983[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:13:983[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:13:983[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:13:983[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:13:983[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:13:983[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:13:983[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:13:983[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:13:983[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:13:983[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:13:983[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:13:984[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:13:984[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:13:984[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:13:984[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:13:984[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:13:984[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:13:984[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:13:984[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:13:984[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:13:984[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:13:984[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:13:984[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:13:984[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:13:984[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:13:984[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:13:984[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:13:984[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:13:984[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:13:984[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:13:984[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:13:984[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:13:984[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:13:984[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:13:984[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:13:984[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:13:984[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:13:984[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:13:984[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:13:984[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:13:984[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:13:984[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:13:984[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:13:984[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:13:984[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:13:984[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:13:984[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:13:984[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:13:984[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:13:985[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:13:985[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:13:985[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:13:985[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:13:985[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:13:985[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:13:985[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:13:985[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:13:985[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:13:985[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:13:985[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:13:985[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:13:985[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:13:985[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:13:985[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:13:985[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:13:985[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:13:985[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:13:985[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:13:985[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:13:985[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:13:985[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:13:985[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:13:985[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > calculateMRRByMonth > should handle mixed interval types (month/year/week/day) 353ms
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > Edge Cases and Error Handling > should handle leap day (February 29) in billing periods
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > Edge Cases and Error Handling > should handle extremely large intervalCount values in normalization
 ✓ src/utils/billing-dashboard/revenueCalculationHelpers.test.ts > Edge Cases and Error Handling > should handle billing periods spanning multiple years
 ✓ src/db/databaseAuthentication.test.ts > Customer Role vs Merchant Role Authentication > Role-based JWT Claim Differences > should have different JWT claim structures for merchant vs customer 584ms
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectRichSubscriptionsAndActiveItems > should handle subscriptions with no items or features
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processPurchaseBookkeepingForCheckoutSession > should find customer by Stripe customer ID when provided
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > calculateTrialEnd > when user has not had a trial and trialPeriodDays is positive > should return a future date for trialPeriodDays = 30
[90m11:21:14:197[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:14:197[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:14:197[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:14:197[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:14:200[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:14:200[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:14:200[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:14:200[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > bulkInsertOrDoNothingSubscriptionItemsByExternalId > should insert new subscription items if no item with the same externalId exists
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > calculateTrialEnd > when user has not had a trial and trialPeriodDays is positive > should return a future date for trialPeriodDays = 1
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processPurchaseBookkeepingForCheckoutSession > should make the charge.customer equal to the customer.stripeCustomerId, even if the checkouSession initially does not have a customer 322ms
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > bulkInsertOrDoNothingSubscriptionItemsByExternalId > should do nothing if subscription items with the same externalId already exist
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > throws an error when metadata is missing
 ✓ src/db/databaseAuthentication.test.ts > Customer Role vs Merchant Role Authentication > Role-based JWT Claim Differences > should prevent role elevation attempts 538ms
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > throws an error when setup intent status is not succeeded
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processPurchaseBookkeepingForCheckoutSession > should create new Stripe customer when no Stripe customer ID is provided
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectCurrentlyActiveSubscriptionItems > should return items not expired or expiring after anchorDate
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > throws an error when metadata type is not CheckoutSession
[90m11:21:14:710[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:14:710[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:14:710[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:14:710[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:14:710[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:14:710[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:14:710[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:14:710[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:14:710[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:14:710[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:14:710[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:14:710[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:14:710[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:14:710[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:14:710[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:14:710[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:14:710[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:14:710[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:14:710[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:14:710[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:14:710[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:14:710[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:14:710[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:14:710[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:14:710[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:14:711[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:14:711[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:14:711[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:14:711[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:14:711[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:14:711[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:14:711[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:14:711[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:14:711[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:14:711[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:14:711[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:14:711[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:14:711[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:14:711[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:14:711[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:14:711[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:14:711[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:14:711[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:14:711[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:14:711[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:14:711[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:14:711[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:14:711[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:14:711[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:14:711[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:14:711[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:14:711[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:14:711[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:14:711[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:14:711[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:14:711[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:14:711[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:14:711[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:14:711[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:14:711[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:14:711[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:14:711[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:14:711[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:14:711[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:14:711[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:14:711[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:14:711[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:14:711[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:14:711[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:14:711[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:14:712[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:14:712[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:14:712[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:14:712[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:14:712[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:14:712[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:14:712[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:14:712[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:14:712[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:14:712[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:14:712[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:14:712[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:14:712[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:14:712[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:14:712[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:14:712[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:14:712[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:14:712[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/tableMethods/subscriptionItemMethods.test.ts > subscriptionItemMethods > selectCurrentlyActiveSubscriptionItems > should apply whereConditions in addition to active filter
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processPurchaseBookkeepingForCheckoutSession > should create new purchase when none exists
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > throws when the stripe customer from the setup intent does not match the customer stripe customer id
[90m11:21:14:975[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:14:975[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:14:975[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:14:975[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:14:976[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:14:976[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:14:976[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:14:976[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:14:976[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:14:976[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:14:976[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:14:976[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:14:976[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:14:976[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:14:976[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:14:976[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:14:976[0m [34m[xhr][0m set global instance! xhr
[90m11:21:14:976[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:14:977[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:14:977[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:14:977[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:14:977[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:14:977[0m [34m[fetch][0m set global instance! fetch
[90m11:21:14:977[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:14:977[0m [34m[setup-server][0m set global instance! setup-server
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > throws an error when product is not found for non-AddPaymentMethod checkout session
[90m11:21:14:977[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:14:977[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:14:977[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:14:977[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:14:977[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:14:977[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:14:977[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:14:977[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:14:977[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:14:978[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:14:978[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:14:978[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:14:978[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:14:978[0m [34m[websocket][0m set global instance! websocket
[90m11:21:14:978[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:14:978[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:14:978[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:14:978[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:14:978[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:14:978[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:14:978[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:14:978[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:14:978[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:14:978[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:14:979[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:14:979[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:14:979[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:14:979[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:14:979[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:14:979[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:14:979[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:14:979[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:14:979[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:14:979[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:14:979[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:14:979[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:14:979[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:14:979[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:14:979[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:14:979[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:14:979[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:14:979[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:14:979[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:14:979[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:14:979[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:14:979[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:14:979[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:14:979[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:14:979[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:14:979[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:14:979[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:14:979[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:14:979[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:14:979[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:14:979[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:14:979[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:14:979[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:14:980[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:14:980[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:14:980[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:14:980[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:14:980[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:14:980[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:14:980[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:14:980[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:14:980[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:14:980[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:14:980[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:14:980[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:14:980[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:14:980[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:14:980[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:14:980[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:14:980[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:14:980[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:14:980[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:14:980[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:14:980[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:14:980[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:14:980[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:14:980[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:14:980[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:14:980[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:14:980[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:14:980[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:14:980[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:14:980[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:14:980[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:14:980[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:14:980[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:14:980[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:14:980[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:14:980[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:14:980[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:14:980[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:14:980[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:14:980[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:14:980[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:14:980[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:14:981[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:14:981[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:14:981[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:14:981[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:14:981[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:14:981[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:14:981[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:14:981[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:14:981[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:14:981[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:14:981[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processPurchaseBookkeepingForCheckoutSession > should apply discount when fee calculation has a discount ID
 ✓ src/db/databaseAuthentication.test.ts > Customer Role vs Merchant Role Authentication > Customer Isolation Validation > should ensure customer JWT claims are properly scoped 526ms
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > throws an error when purchase is not found for non-AddPaymentMethod checkout session
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > throws an error when price.intervalUnit is missing
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePriceBaseAmount > returns price unit price when no purchase exists
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePriceBaseAmount > returns firstInvoiceValue for single payment purchases
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePriceBaseAmount > returns pricePerBillingCycle for subscription purchases
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePriceBaseAmount > falls back to unitPrice when purchase is provided but firstInvoiceValue or pricePerBillingCycle is missing
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePriceBaseAmount > handles invalid type by falling back to unitPrice
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateDiscountAmount > returns 0 when no discount exists
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateDiscountAmount > returns fixed amount for fixed discounts
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateDiscountAmount > calculates percentage discount correctly
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateDiscountAmount > caps percentage discount at 100%
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateDiscountAmount > handles zero or negative basePrice gracefully
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateDiscountAmount > handles invalid discount amountType by returning 0
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateInternationalFeePercentage > returns 0 for Merchant Of Record transactions with US billing addresses
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateInternationalFeePercentage > returns base fee for non-card international payments when not MoR or non-US
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateInternationalFeePercentage > returns increased fee for international card payments when not MoR or non-US
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateInternationalFeePercentage > handles invalid paymentMethodCountry by throwing an error
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateInternationalFeePercentage > handles case sensitivity by relying on CountryCode enum (implicitly handles toUpperCase in func)
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePaymentMethodFeeAmount > calculates card fee correctly
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePaymentMethodFeeAmount > caps US bank account fee at 500
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePaymentMethodFeeAmount > calculates small US bank account fee correctly
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePaymentMethodFeeAmount > caps ACH fee at $5 for payments over $625
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePaymentMethodFeeAmount > calculates ACH fee at 0.8% for payments under $625
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePaymentMethodFeeAmount > caps SEPA debit fee at 600
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePaymentMethodFeeAmount > handles zero or negative totalAmountToCharge
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePaymentMethodFeeAmount > returns 2.9% + 30 cents for card payment method
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateTotalFeeAmount > calculates total fee with all components
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateTotalFeeAmount > handles null or undefined fee percentages by throwing error for parseFloat
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateTotalFeeAmount > handles negative discountAmountFixed by treating it as 0 reduction
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateTotalFeeAmount > handles zero or negative baseAmount
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateTotalDueAmount > calculates total due with all components
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateTotalDueAmount > returns 0 when calculation would be negative
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateTotalDueAmount > handles zero or negative baseAmount
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePriceBaseAmount > returns price unit price when no purchase exists
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePriceBaseAmount > returns firstInvoiceValue for single payment purchases
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePriceBaseAmount > returns pricePerBillingCycle for subscription purchases
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateDiscountAmount > returns 0 when no discount exists
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateDiscountAmount > returns fixed amount for fixed discounts
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateDiscountAmount > calculates percentage discount correctly
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateInternationalFeePercentage > returns 0 for same-country transactions
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateInternationalFeePercentage > returns 1.5 for international card transactions
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePaymentMethodFeeAmount > calculates card fee correctly
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculatePaymentMethodFeeAmount > caps bank account fee
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateTotalFeeAmount & calculateTotalDueAmount > calculates total fee correctly
 ✓ src/utils/bookkeeping/fees/common.test.ts > calculateTotalFeeAmount & calculateTotalDueAmount > calculates total due correctly
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processPurchaseBookkeepingForCheckoutSession > should link fee calculation to purchase record
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > throws an error when price.intervalCount is missing
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processPurchaseBookkeepingForCheckoutSession > should throw error when no fee calculation is found for session
 ✓ src/utils/bookkeeping/fees/common.test.ts > finalizeFeeCalculation > sets flowgladFeePercentage to 0 when no payments exist in current month
[90m11:21:15:512[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_Rfj7lZb59iM30ivqmbzL6
[90m11:21:15:512[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:15:512[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Customer Isolation (Same Organization) > should prevent customerB from seeing customerA data in same org
[selectById] Error selecting customers with id cust_CLysMCeovHfUYillpNbOv: Error: No customers found with id: cust_CLysMCeovHfUYillpNbOv
    at selectById [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:138:15[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:422:34
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:110:20
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:410:22
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > completes a full setup intent flow from creation to success
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_Rfj7lZb59iM30ivqmbzL6

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:15:570[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:15:570[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:15:575[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > completes a full setup intent flow from creation to success
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_Rfj7lZb59iM30ivqmbzL6

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > completes a full setup intent flow from creation to success
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_Rfj7lZb59iM30ivqmbzL6

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:15:619[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:15:619[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:15:619[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:15:619[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:15:619[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:15:619[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:15:619[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:15:619[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:15:619[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:15:619[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:15:619[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:15:619[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:15:619[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:15:619[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:15:619[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:15:619[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:15:619[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:15:619[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:15:619[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:15:620[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:15:620[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:15:620[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:15:620[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:15:620[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:15:620[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:15:620[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:15:620[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:15:620[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:15:620[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:15:620[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:15:620[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:15:620[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:15:620[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:15:620[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:15:620[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:15:620[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:15:620[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:15:620[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:15:620[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:15:620[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:15:620[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:15:620[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:15:620[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:15:620[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:15:620[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:15:620[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:15:620[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:15:620[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:15:620[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:15:620[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:15:620[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:15:620[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:15:620[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:15:621[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:15:621[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:15:621[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:15:621[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:15:621[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:15:621[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:15:621[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:15:621[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:15:621[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:15:621[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:15:621[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:15:621[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:15:621[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:15:621[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:15:621[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:15:621[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:15:621[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:15:621[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:15:621[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:15:621[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:15:621[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:15:621[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:15:621[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:15:621[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:15:621[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:15:621[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:15:621[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:15:621[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:15:621[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:15:621[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:15:621[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:15:621[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:15:621[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:15:621[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:15:621[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/databaseAuthentication.test.ts > Customer Role vs Merchant Role Authentication > Customer Isolation Validation > should handle NULL userId customers correctly in authentication 573ms
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > checkoutSessionStatusFromStripeCharge > should return Succeeded when charge status is succeeded
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > checkoutSessionStatusFromStripeCharge > should return Pending when charge status is pending
 ✓ src/utils/bookkeeping/fees/common.test.ts > finalizeFeeCalculation > sets flowgladFeePercentage to 0 when total resolved payments are under the organization free tier 323ms
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > completes a full setup intent flow from creation to success 528ms
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > checkoutSessionStatusFromStripeCharge > should return Failed when charge status is neither succeeded nor pending
 ✓ src/utils/bookkeeping/fees/common.test.ts > finalizeFeeCalculation > keeps original flowgladFeePercentage when resolved payments exceed the organization free tier
[90m11:21:16:54[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_5ZKfnn219qDaMYNmKn31m
[90m11:21:16:54[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:16:54[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > applies trial periods correctly based on customer history
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_5ZKfnn219qDaMYNmKn31m

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:16:113[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:16:113[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:16:119[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > applies trial periods correctly based on customer history
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_5ZKfnn219qDaMYNmKn31m

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processStripeChargeForInvoiceCheckoutSession > should update checkout session status based on charge status
 ✓ src/utils/bookkeeping/fees/common.test.ts > finalizeFeeCalculation > sets flowgladFeePercentage to 0 when total resolved payments are under the free tier
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > applies trial periods correctly based on customer history
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_5ZKfnn219qDaMYNmKn31m

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processStripeChargeForInvoiceCheckoutSession > should mark invoice as Paid when total payments meet or exceed invoice total
[90m11:21:16:336[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_zPU1YIEJYW0ojB42ESieI
[90m11:21:16:336[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:16:336[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > applies trial periods correctly based on customer history
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_zPU1YIEJYW0ojB42ESieI

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/fees/common.test.ts > finalizeFeeCalculation > applies full org fee when resolved payments exceed the free tier
[90m11:21:16:479[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:16:479[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:16:494[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > applies trial periods correctly based on customer history
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_zPU1YIEJYW0ojB42ESieI

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > applies trial periods correctly based on customer history
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_zPU1YIEJYW0ojB42ESieI

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/fees/common.test.ts > finalizeFeeCalculation > calculates partial fee when transaction crosses the free tier
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processStripeChargeForInvoiceCheckoutSession > should mark invoice as AwaitingPaymentConfirmation when charge is pending
[90m11:21:16:679[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_18fALyTJQFOdstdge27hX
[90m11:21:16:679[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:16:679[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > applies trial periods correctly based on customer history
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_18fALyTJQFOdstdge27hX

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:16:687[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:16:687[0m [34m[fetch][0m emitting the "response" event...
 ✓ src/utils/bookkeeping/fees/common.test.ts > finalizeFeeCalculation > does not exclude refunded payments from fee calculation
[90m11:21:16:743[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > applies trial periods correctly based on customer history
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_18fALyTJQFOdstdge27hX

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > applies trial periods correctly based on customer history
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_18fALyTJQFOdstdge27hX

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processStripeChargeForInvoiceCheckoutSession > should not change invoice status when payment succeeds but total is still less than invoice amount
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Integration Tests > applies trial periods correctly based on customer history 1005ms
 ✓ src/utils/bookkeeping/fees/common.test.ts > finalizeFeeCalculation > ignores payments from previous months
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processStripeChargeForCheckoutSession > should delegate to processStripeChargeForInvoiceCheckoutSession when session type is Invoice
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Edge Cases > handles cases where customer ID is missing
[90m11:21:17:175[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:17:175[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:17:175[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:17:175[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:17:175[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:17:175[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:17:175[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:17:175[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:17:175[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:17:175[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:17:175[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:175[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:17:175[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:17:175[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:17:175[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:17:175[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:17:175[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:17:175[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:17:175[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:175[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:17:175[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:17:175[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:17:175[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:17:175[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:17:175[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:17:176[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:17:176[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:176[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:17:176[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:176[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:17:176[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:17:176[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:17:176[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:17:176[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:17:176[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:17:176[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:176[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:17:176[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:17:177[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:17:177[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:17:177[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:17:177[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:17:177[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:17:177[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:17:177[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:177[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:17:177[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:17:177[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:177[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:17:177[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:17:177[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:177[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:177[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:17:177[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:17:177[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:17:177[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:17:177[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:17:177[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:17:177[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:17:177[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:17:177[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:17:177[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:177[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:17:177[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:17:177[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:177[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:17:177[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:17:177[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:177[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:177[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:17:177[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:17:177[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:17:177[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:17:177[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:17:177[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:17:177[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:17:177[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:17:177[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:17:177[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:177[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:17:177[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:17:177[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:177[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:17:177[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:17:177[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:177[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:178[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:17:178[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/utils/bookkeeping/fees/common.test.ts > finalizeFeeCalculation > only considers payments from the same organization
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Edge Cases > handles cases where payment method is missing
[90m11:21:17:298[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:17:298[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:17:298[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:17:298[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:17:298[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:17:298[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:17:298[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:17:298[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:17:298[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:17:298[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:17:298[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:298[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:17:298[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:17:298[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:17:298[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:17:298[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:17:298[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:17:298[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:17:298[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:298[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:17:298[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:17:298[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:17:298[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:17:298[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:17:298[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:17:298[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:17:298[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:298[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:17:298[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:298[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:17:299[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:17:299[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:17:299[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:17:299[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:17:299[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:17:299[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:299[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:17:299[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:17:299[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:17:299[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:17:299[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:17:299[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:17:299[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:17:299[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:17:299[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:299[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:17:299[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:17:299[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:299[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:17:299[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:17:299[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:299[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:299[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:17:299[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:17:299[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:17:299[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:17:299[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:17:299[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:17:299[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:17:299[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:17:299[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:17:299[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:299[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:17:299[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:17:299[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:299[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:17:299[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:17:299[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:299[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:299[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:17:299[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:17:300[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:17:300[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:17:300[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:17:300[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:17:300[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:17:300[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:17:300[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:17:300[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:300[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:17:300[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:17:300[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:300[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:17:300[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:17:300[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:300[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:300[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:17:300[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/utils/bookkeeping/processSetupIntent.test.ts > Process setup intent > processSetupIntentSucceeded > Edge Cases > handles cases where price has no trial period
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processStripeChargeForCheckoutSession > should process purchase bookkeeping and create invoice for non-invoice sessions with status Pending or Succeeded 368ms
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processStripeChargeForCheckoutSession > should skip bookkeeping and invoice creation for non-invoice sessions with Failed status
[90m11:21:17:684[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:17:684[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:17:684[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:17:684[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:17:684[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:17:684[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:17:684[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:17:685[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:17:685[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:17:685[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:17:685[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:685[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:17:685[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:17:685[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:17:685[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:17:685[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:17:685[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:17:685[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:17:685[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:685[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:17:685[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:17:685[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:17:685[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:17:685[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:17:685[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:17:685[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:17:685[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:685[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:17:685[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:685[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:17:685[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:17:685[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:17:685[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:17:685[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:17:685[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:17:685[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:685[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:17:685[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:17:685[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:17:685[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:17:685[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:17:685[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:17:685[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:17:685[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:17:686[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:686[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:17:686[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:17:686[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:686[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:17:686[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:17:686[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:686[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:686[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:17:686[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:17:686[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:17:686[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:17:686[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:17:686[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:17:686[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:17:686[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:17:686[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:17:686[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:686[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:17:686[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:17:686[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:686[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:17:686[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:17:686[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:686[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:686[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:17:686[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:17:686[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:17:686[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:17:686[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:17:686[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:17:686[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:17:686[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:17:686[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:17:686[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:686[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:17:686[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:17:686[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:686[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:17:686[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:17:686[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:17:686[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:17:686[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:17:686[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/utils/bookkeeping/checkoutSessions.test.ts > Checkout Sessions > processStripeChargeForCheckoutSession > should update checkout session with customer information from charge
[90m11:21:18:188[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:18:303[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:18:303[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:18:303[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:18:304[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:18:307[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:18:307[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:18:307[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:18:307[0m [34m[setup-server][0m constructing the interceptor...
 × src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Customer Isolation (Same Organization) > should prevent customerB from seeing customerA data in same org 5622ms
   → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stderr | src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Customer Isolation (Same Organization) > should isolate subscriptions between customers in same org
[selectById] Error selecting customers with id cust_3TL7ZZNDIKwcbyL5QzQVw: Error: No customers found with id: cust_3TL7ZZNDIKwcbyL5QzQVw
    at selectById [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:138:15[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:483:34
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:110:20
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:471:22
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

[90m11:21:20:101[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:20:227[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:20:227[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:20:227[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:20:228[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:20:229[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:20:229[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:20:229[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:20:229[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:20:829[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:21:13[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:21:13[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:21:13[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:21:13[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:21:15[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:21:15[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:21:15[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:21:15[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:21:291[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:21:291[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:21:291[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:21:291[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:21:293[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:21:293[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:21:293[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:21:293[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:21:313[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:21:313[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:21:313[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:313[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:21:313[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:21:313[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:21:313[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:21:313[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:314[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:21:314[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:314[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:21:314[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:21:314[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:21:314[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:314[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:21:314[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:21:314[0m [34m[xhr][0m set global instance! xhr
[90m11:21:21:314[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:314[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:21:314[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:21:314[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:21:314[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:314[0m [34m[fetch][0m set global instance! fetch
[90m11:21:21:314[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:314[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:21:315[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:21:315[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:21:315[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:21:315[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:21:315[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:21:315[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:21:315[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:21:315[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:21:315[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:21:315[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:21:315[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:21:315[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:21:316[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:316[0m [34m[websocket][0m set global instance! websocket
[90m11:21:21:316[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:21:316[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:21:316[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:316[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:21:316[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:21:316[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:21:316[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:21:316[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:21:316[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:316[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:21:316[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:21:316[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:21:316[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:21:316[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:316[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:21:316[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:21:316[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:21:316[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:21:316[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:316[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:21:316[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:21:316[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:21:316[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:21:316[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:21:317[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:21:317[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:21:317[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:21:317[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:21:317[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:21:317[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:21:317[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:21:317[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:21:317[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:21:317[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:21:317[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:317[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:21:317[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:21:317[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:21:317[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:21:317[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:21:317[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:317[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:21:317[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:21:317[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:21:317[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:21:317[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:317[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:21:317[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:21:317[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:21:317[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:21:317[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:317[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:21:317[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:21:318[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:21:318[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:21:318[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:21:318[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:21:318[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:21:318[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:21:318[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:21:318[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:21:318[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:21:318[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:21:318[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:21:318[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:21:318[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:21:318[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:318[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:21:318[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:21:318[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:21:318[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:21:318[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:21:318[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:318[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:21:318[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:21:318[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:21:318[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:21:318[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:318[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:21:318[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:21:318[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:21:318[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:21:318[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:318[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:21:318[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:21:318[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:21:318[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:21:318[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:21:318[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:21:318[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:21:318[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:21:319[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:21:319[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:21:319[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:21:319[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:21:319[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:21:552[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:21:552[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:21:552[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:21:552[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:21:556[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:21:556[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:21:556[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:21:556[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:21:585[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:21:585[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:21:585[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:585[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:21:585[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:21:585[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:21:585[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:21:585[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:586[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:21:586[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:586[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:21:586[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:21:586[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:21:586[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:586[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:21:586[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:21:586[0m [34m[xhr][0m set global instance! xhr
[90m11:21:21:586[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:586[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:21:586[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:21:586[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:21:586[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:586[0m [34m[fetch][0m set global instance! fetch
[90m11:21:21:586[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:586[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:21:586[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:21:587[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:21:587[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:21:587[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:21:587[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:21:587[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:21:587[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:21:587[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:21:587[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:21:587[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:21:587[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:21:587[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:21:587[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:588[0m [34m[websocket][0m set global instance! websocket
[90m11:21:21:588[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:21:588[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:21:588[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:588[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:21:588[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:21:588[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:21:588[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:21:588[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:21:588[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:588[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:21:588[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:21:588[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:21:588[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:21:588[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:588[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:21:588[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:21:588[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:21:588[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:21:588[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:588[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:21:588[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:21:588[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:21:588[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:21:588[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:21:588[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:21:588[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:21:588[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:21:588[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:21:589[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:21:589[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:21:589[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:21:589[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:21:589[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:21:589[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:21:589[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:589[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:21:589[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:21:589[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:21:589[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:21:589[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:21:589[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:589[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:21:589[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:21:589[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:21:589[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:21:589[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:589[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:21:589[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:21:589[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:21:589[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:21:589[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:589[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:21:589[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:21:589[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:21:589[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:21:589[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:21:589[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:21:589[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:21:589[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:21:589[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:21:589[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:21:590[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:21:590[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:21:590[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:21:590[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:21:590[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:21:590[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:21:590[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:21:590[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:21:590[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:21:590[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:21:590[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:21:590[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:590[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:21:590[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:21:590[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:21:590[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:21:590[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:590[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:21:590[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:21:590[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:21:590[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:21:590[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:21:590[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:21:591[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:21:591[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:21:591[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:21:591[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:21:591[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:21:591[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:21:591[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:21:591[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:21:591[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:21:591[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:21:591[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:21:591[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:21:616[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:21:858[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:21:858[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:21:858[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:21:859[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:21:860[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:21:861[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:21:861[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:21:861[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/ledgerManager.test.ts > Ledger Management System > I. Core Ledger & System-Wide Properties > 1. Balance Integrity & Accuracy > should accurately reflect the "posted" financial balance from posted LedgerEntries 519ms
 ✓ src/db/ledgerManager.test.ts > Ledger Management System > I. Core Ledger & System-Wide Properties > 1. Balance Integrity & Accuracy > should accurately reflect the "effective/pending" balance from posted or active pending LedgerEntries
[90m11:21:22:434[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:22:434[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:22:435[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:22:435[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > usageCreditInsertFromInvoiceLineItem > should correctly create a usage credit insert from a valid usage line item 680ms
[90m11:21:22:448[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:22:448[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:22:448[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:22:448[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:22:596[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:22:596[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:22:596[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:22:596[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:22:596[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:22:597[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:22:597[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:22:597[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:22:597[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:22:597[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:22:597[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:22:597[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:22:597[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:22:597[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:22:597[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:22:597[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:22:597[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:22:597[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:22:597[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:22:597[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:22:597[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:22:597[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:22:597[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:22:597[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:22:597[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:22:597[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:22:597[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:22:597[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:22:597[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:22:597[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:22:597[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:22:597[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:22:597[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:22:597[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:22:597[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:22:597[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:22:598[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:22:598[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:22:598[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:22:598[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:22:598[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:22:598[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:22:598[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:22:598[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:22:598[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:22:598[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:22:598[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:22:598[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:22:598[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:22:598[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:22:598[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:22:598[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:22:598[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:22:598[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:22:598[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:22:598[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:22:598[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:22:598[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:22:598[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:22:598[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:22:598[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:22:598[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:22:598[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:22:598[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:22:598[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:22:598[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:22:598[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:22:598[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:22:598[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:22:598[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:22:598[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:22:598[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:22:598[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:22:598[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:22:598[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:22:598[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:22:598[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:22:598[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:22:598[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:22:599[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:22:599[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:22:599[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:22:599[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:22:599[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:22:599[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:22:599[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:22:599[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:22:599[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/ledgerManager.test.ts > Ledger Management System > I. Core Ledger & System-Wide Properties > 1. Balance Integrity & Accuracy > should correctly calculate balances with a mix of positive and negative entries 329ms
 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > usageCreditInsertFromInvoiceLineItem > should throw an error if the line item is not of type Usage 328ms
 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > usageCreditInsertFromInvoiceLineItem > should throw an error if the ledger account ID does not match
[90m11:21:22:972[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:22:988[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:23:102[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:23:102[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:23:102[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:23:102[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:23:137[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:23:137[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:23:138[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:23:138[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:23:174[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:23:174[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:23:174[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:23:174[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:23:211[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:23:212[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:23:212[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:23:212[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > usageCreditInsertFromInvoiceLineItem > should throw an error if the ledger account is missing a usage meter ID
[90m11:21:23:553[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:23:804[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:23:805[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:23:805[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:23:805[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:23:812[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:23:812[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:23:812[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:23:813[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > processSettleInvoiceUsageCostsLedgerCommand > should successfully settle an invoice with a single usage meter 487ms
 × src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Customer Isolation (Same Organization) > should isolate subscriptions between customers in same org 5381ms
   → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > processSettleInvoiceUsageCostsLedgerCommand > should successfully settle an invoice with multiple usage meters 615ms
 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > processSettleInvoiceUsageCostsLedgerCommand > should correctly process an invoice with mixed (usage and static) line items 670ms
stderr | src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > processSettleInvoiceUsageCostsLedgerCommand > should be idempotent and not create duplicate records on re-execution
[createInsertManyFunction] Error inserting into ledger_transactions: DrizzleQueryError: Failed query: insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"
params: ledger_transaction_y5L4fjrdATFAievWaze5q,__TEST__,__TEST__,true,org_lUWsaqMZplGU718uSAPqs,settle_invoice_usage_costs,invoice_settlement,inv_MpYxaaEtqEyflZRth14x2,Settlement of invoice inv_MpYxaaEtqEyflZRth14x2,{},sub_ILWeZ8X9N5Kz2lRkxIX6z
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
    at processSettleInvoiceUsageCostsLedgerCommand [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.ts:392:29[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts:511:11
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m {
  query: [32m'insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"'[39m,
  params: [
    [32m'ledger_transaction_y5L4fjrdATFAievWaze5q'[39m,
    [32m'__TEST__'[39m,
    [32m'__TEST__'[39m,
    [33mtrue[39m,
    [32m'org_lUWsaqMZplGU718uSAPqs'[39m,
    [32m'settle_invoice_usage_costs'[39m,
    [32m'invoice_settlement'[39m,
    [32m'inv_MpYxaaEtqEyflZRth14x2'[39m,
    [32m'Settlement of invoice inv_MpYxaaEtqEyflZRth14x2'[39m,
    [32m'{}'[39m,
    [32m'sub_ILWeZ8X9N5Kz2lRkxIX6z'[39m
  ],
  cause: PostgresError: duplicate key value violates unique constraint "ledger_transactions_type_initiating_source_type_initiating_sour"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'23505'[39m,
    detail: [32m'Key (type, initiating_source_type, initiating_source_id, livemode, organization_id)=(settle_invoice_usage_costs, invoice_settlement, inv_MpYxaaEtqEyflZRth14x2, t, org_lUWsaqMZplGU718uSAPqs) already exists.'[39m,
    schema_name: [32m'public'[39m,
    table_name: [32m'ledger_transactions'[39m,
    constraint_name: [32m'ledger_transactions_type_initiating_source_type_initiating_sour'[39m,
    file: [32m'nbtinsert.c'[39m,
    line: [32m'664'[39m,
    routine: [32m'_bt_check_unique'[39m,
    query: [32m'insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"'[39m,
    parameters: [
      [32m'ledger_transaction_y5L4fjrdATFAievWaze5q'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [32m't'[39m,
      [32m'org_lUWsaqMZplGU718uSAPqs'[39m,
      [32m'settle_invoice_usage_costs'[39m,
      [32m'invoice_settlement'[39m,
      [32m'inv_MpYxaaEtqEyflZRth14x2'[39m,
      [32m'Settlement of invoice inv_MpYxaaEtqEyflZRth14x2'[39m,
      [32m'{}'[39m,
      [32m'sub_ILWeZ8X9N5Kz2lRkxIX6z'[39m
    ],
    args: [
      [32m'ledger_transaction_y5L4fjrdATFAievWaze5q'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'org_lUWsaqMZplGU718uSAPqs'[39m,
      [32m'settle_invoice_usage_costs'[39m,
      [32m'invoice_settlement'[39m,
      [32m'inv_MpYxaaEtqEyflZRth14x2'[39m,
      [32m'Settlement of invoice inv_MpYxaaEtqEyflZRth14x2'[39m,
      [32m'{}'[39m,
      [32m'sub_ILWeZ8X9N5Kz2lRkxIX6z'[39m
    ],
    types: [
        [33m25[39m, [33m25[39m,    [33m25[39m,
        [33m16[39m, [33m25[39m, [33m22148[39m,
        [33m25[39m, [33m25[39m,    [33m25[39m,
      [33m3802[39m, [33m25[39m
    ]
  }
}

stderr | src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > processSettleInvoiceUsageCostsLedgerCommand > should be idempotent and not create duplicate records on re-execution
[createInsertFunction] Error inserting single item into ledger_transactions: Error: Failed to insert items into ledger_transactions: Failed query: insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"
params: ledger_transaction_y5L4fjrdATFAievWaze5q,__TEST__,__TEST__,true,org_lUWsaqMZplGU718uSAPqs,settle_invoice_usage_costs,invoice_settlement,inv_MpYxaaEtqEyflZRth14x2,Settlement of invoice inv_MpYxaaEtqEyflZRth14x2,{},sub_ILWeZ8X9N5Kz2lRkxIX6z
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:214:13
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
[90m    ... 4 lines matching cause stack trace ...[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts:509:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22 {
  [cause]: DrizzleQueryError: Failed query: insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"
  params: ledger_transaction_y5L4fjrdATFAievWaze5q,__TEST__,__TEST__,true,org_lUWsaqMZplGU718uSAPqs,settle_invoice_usage_costs,invoice_settlement,inv_MpYxaaEtqEyflZRth14x2,Settlement of invoice inv_MpYxaaEtqEyflZRth14x2,{},sub_ILWeZ8X9N5Kz2lRkxIX6z
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
  [90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:177:22
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:237:24
      at processSettleInvoiceUsageCostsLedgerCommand [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.ts:392:29[90m)[39m
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts:511:11
      at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
      at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
      at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m {
    query: [32m'insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"'[39m,
    params: [
      [32m'ledger_transaction_y5L4fjrdATFAievWaze5q'[39m,
      [32m'__TEST__'[39m,
      [32m'__TEST__'[39m,
      [33mtrue[39m,
      [32m'org_lUWsaqMZplGU718uSAPqs'[39m,
      [32m'settle_invoice_usage_costs'[39m,
      [32m'invoice_settlement'[39m,
      [32m'inv_MpYxaaEtqEyflZRth14x2'[39m,
      [32m'Settlement of invoice inv_MpYxaaEtqEyflZRth14x2'[39m,
      [32m'{}'[39m,
      [32m'sub_ILWeZ8X9N5Kz2lRkxIX6z'[39m
    ],
    cause: PostgresError: duplicate key value violates unique constraint "ledger_transactions_type_initiating_source_type_initiating_sour"
        at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
        at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
        at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
    [90m    at Socket.emit (node:events:507:28)[39m
    [90m    at addChunk (node:internal/streams/readable:559:12)[39m
    [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
    [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
    [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
        at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
        at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
        at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
        at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
        at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
        at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/insert.ts:428:27 {
      severity_local: [32m'ERROR'[39m,
      severity: [32m'ERROR'[39m,
      code: [32m'23505'[39m,
      detail: [32m'Key (type, initiating_source_type, initiating_source_id, livemode, organization_id)=(settle_invoice_usage_costs, invoice_settlement, inv_MpYxaaEtqEyflZRth14x2, t, org_lUWsaqMZplGU718uSAPqs) already exists.'[39m,
      schema_name: [32m'public'[39m,
      table_name: [32m'ledger_transactions'[39m,
      constraint_name: [32m'ledger_transactions_type_initiating_source_type_initiating_sour'[39m,
      file: [32m'nbtinsert.c'[39m,
      line: [32m'664'[39m,
      routine: [32m'_bt_check_unique'[39m,
      query: [32m'insert into "ledger_transactions" ("id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key") values ($1, default, default, $2, $3, $4, default, $5, $6, $7, $8, $9, $10, $11, default) returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "organization_id", "type", "initiating_source_type", "initiating_source_id", "description", "metadata", "subscription_id", "idempotency_key"'[39m,
      parameters: [36m[Array][39m,
      args: [36m[Array][39m,
      types: [36m[Array][39m
    }
  }
}

 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > processSettleInvoiceUsageCostsLedgerCommand > should be idempotent and not create duplicate records on re-execution 573ms
 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > processSettleInvoiceUsageCostsLedgerCommand > should throw an error if there is a data scope mismatch 708ms
 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > processSettleInvoiceUsageCostsLedgerCommand > should handle an invoice with no usage line items gracefully 709ms
 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > processSettleInvoiceUsageCostsLedgerCommand > should correctly propagate livemode from the command to all created records 988ms
[90m11:21:28:624[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:28:624[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:28:625[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:28:625[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:28:625[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:28:625[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:28:625[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:28:625[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:28:626[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:28:626[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:28:626[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:28:626[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:28:626[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:28:626[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:28:626[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:28:627[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:28:627[0m [34m[xhr][0m set global instance! xhr
[90m11:21:28:627[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:28:627[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:28:627[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:28:627[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:28:627[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:28:627[0m [34m[fetch][0m set global instance! fetch
[90m11:21:28:628[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:28:628[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:28:628[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:28:628[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:28:628[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:28:628[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:28:628[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:28:628[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:28:629[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:28:629[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:28:629[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:28:629[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:28:629[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:28:629[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:28:629[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:28:629[0m [34m[websocket][0m set global instance! websocket
[90m11:21:28:629[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:28:629[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:28:629[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:28:629[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:28:630[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:28:630[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:28:630[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:28:630[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:28:630[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:28:630[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:28:630[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:28:630[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:28:630[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:28:630[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:28:630[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:28:630[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:28:630[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:28:630[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:28:630[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:28:630[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:28:630[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:28:630[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:28:630[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:28:630[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:28:631[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:28:631[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:28:631[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:28:631[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:28:631[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:28:631[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:28:631[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:28:631[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:28:631[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:28:631[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:28:631[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:28:631[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:28:631[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:28:631[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:28:631[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:28:631[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:28:631[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:28:631[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:28:631[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:28:631[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:28:631[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:28:631[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:28:631[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:28:631[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:28:631[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:28:631[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:28:631[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:28:631[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:28:632[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:28:632[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:28:632[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:28:632[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:28:632[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:28:632[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:28:632[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:28:632[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:28:632[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:28:632[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:28:632[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:28:632[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:28:632[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:28:632[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:28:632[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:28:632[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:28:632[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:28:633[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:28:633[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:28:633[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:28:633[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:28:633[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:28:633[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:28:633[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:28:633[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:28:633[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:28:633[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:28:633[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:28:633[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:28:633[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:28:633[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:28:633[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:28:633[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:28:633[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:28:633[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:28:633[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:28:633[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:28:634[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:28:634[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:28:634[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:28:634[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:28:634[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:28:634[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:28:634[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > Settlement with prior credit balance > should settle usage costs correctly when a non-expiring credit exists 560ms
[90m11:21:28:747[0m [34m[websocket][0m constructing the interceptor...
 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Error Conditions > should throw "Subscription is in terminal state" if the subscription is terminal
[90m11:21:29:9[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:29:9[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:29:9[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:29:10[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:29:16[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:29:16[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:29:16[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:29:16[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > Settlement with prior credit balance > should settle usage costs correctly when an expiring credit exists 529ms
 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Error Conditions > should throw "Invalid timing" if an unrecognized timing value is provided
 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Immediate Adjustments > when prorateCurrentBillingPeriod is true > should create proration adjustments, remove deleted items, and execute a billing run 333ms
 × src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Customer Isolation (Same Organization) > should isolate payment methods between customers 5506ms
   → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
[90m11:21:29:754[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:29:754[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:29:754[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:29:755[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:29:755[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:29:755[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:29:755[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:29:755[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:29:755[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:29:755[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:29:755[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:29:755[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:29:755[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:29:755[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:29:755[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:29:755[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:29:755[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:29:755[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:29:756[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:29:756[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:29:756[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:29:756[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:29:756[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:29:756[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:29:756[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:29:756[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:29:756[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:29:756[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:29:756[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:29:756[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:29:756[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:29:756[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:29:756[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:29:756[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:29:756[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:29:756[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:29:756[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:29:756[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:29:756[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:29:757[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:29:757[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:29:757[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:29:757[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:29:757[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:29:757[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:29:757[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:29:757[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:29:757[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:29:757[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:29:757[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:29:757[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:29:757[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:29:757[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:29:757[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:29:757[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:29:757[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:29:757[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:29:757[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:29:757[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:29:757[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:29:757[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:29:757[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:29:757[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:29:757[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:29:757[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:29:757[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:29:757[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:29:757[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:29:757[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:29:757[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:29:758[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:29:758[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:29:758[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:29:758[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:29:758[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:29:758[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:29:758[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:29:758[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:29:758[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:29:758[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:29:758[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:29:758[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:29:758[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:29:758[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:29:758[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:29:758[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:29:758[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:29:758[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/ledgerManager/settleInvoiceUsageCostsLedgerCommand.test.ts > settleInvoiceUsageCostsLedgerCommand > Settlement with prior credit balance > should settle usage costs correctly with both expiring and non-expiring credits 595ms
 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Immediate Adjustments > when prorateCurrentBillingPeriod is false > should update subscription items without creating proration adjustments
 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Adjustments at End of Current Billing Period > should update subscription items with dates equal to the billing period end and not create proration adjustments 323ms
 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > calculateSplitInBillingPeriodBasedOnAdjustmentDate > should return correct percentages when adjustment date is at start, middle, and end
 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > calculateSplitInBillingPeriodBasedOnAdjustmentDate > should throw an error if the adjustment date is outside the billing period
 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Edge Cases and Error Handling > should handle a zero-duration billing period 383ms
 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Edge Cases and Error Handling > should handle the case where there are no existing subscription items
stderr | src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Edge Cases and Error Handling > should throw an error when subscription items have zero quantity
[createBulkInsertOrDoNothingFunction] Error bulk inserting with conflict handling into subscription_items: ZodError: [
  {
    "code": "custom",
    "path": [
      "quantity"
    ],
    "message": "Value must be a positive integer"
  }
]
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:872:29
    at Array.map (<anonymous>)
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:871:36
    at bulkCreateOrUpdateSubscriptionItems [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/subscriptionItemMethods.ts:144:30[90m)[39m
    at adjustSubscription [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/adjustSubscription.ts:134:35[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/adjustSubscription.test.ts:683:9
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
[createBulkInsertOrDoNothingFunction] Data count: [33m1[39m
[createBulkInsertOrDoNothingFunction] Target: [
  [36m<ref *1>[39m PgText {
    name: [32m'id'[39m,
    keyAsName: [33mfalse[39m,
    primary: [33mtrue[39m,
    notNull: [33mtrue[39m,
    default: [90mundefined[39m,
    defaultFn: [36m[Function (anonymous)][39m,
    onUpdateFn: [90mundefined[39m,
    hasDefault: [33mtrue[39m,
    isUnique: [33mtrue[39m,
    uniqueName: [32m'subscription_items_id_unique'[39m,
    uniqueType: [90mundefined[39m,
    dataType: [32m'string'[39m,
    columnType: [32m'PgText'[39m,
    enumValues: [90mundefined[39m,
    generated: [90mundefined[39m,
    generatedIdentity: [90mundefined[39m,
    config: {
      name: [32m'id'[39m,
      keyAsName: [33mfalse[39m,
      notNull: [33mtrue[39m,
      default: [90mundefined[39m,
      hasDefault: [33mtrue[39m,
      primaryKey: [33mtrue[39m,
      isUnique: [33mtrue[39m,
      uniqueName: [32m'subscription_items_id_unique'[39m,
      uniqueType: [90mundefined[39m,
      dataType: [32m'string'[39m,
      columnType: [32m'PgText'[39m,
      generated: [90mundefined[39m,
      enumValues: [90mundefined[39m,
      defaultFn: [36m[Function (anonymous)][39m
    },
    table: PgTable {
      id: [36m[Circular *1][39m,
      createdAt: [36m[PgTimestamp][39m,
      updatedAt: [36m[PgTimestamp][39m,
      createdByCommit: [36m[PgText][39m,
      updatedByCommit: [36m[PgText][39m,
      livemode: [36m[PgBoolean][39m,
      position: [36m[PgBigSerial53][39m,
      subscriptionId: [36m[PgText][39m,
      name: [36m[PgText][39m,
      addedDate: [36m[PgTimestamp][39m,
      priceId: [36m[PgText][39m,
      unitPrice: [36m[PgInteger][39m,
      quantity: [36m[PgInteger][39m,
      usageEventsPerUnit: [36m[PgInteger][39m,
      usageMeterId: [36m[PgText][39m,
      metadata: [36m[PgJsonb][39m,
      type: [36m[PgEnumColumn][39m,
      externalId: [36m[PgText][39m,
      expiredAt: [36m[PgTimestamp][39m,
      enableRLS: [36m[Function: enableRLS][39m,
      [[32mSymbol(drizzle:Name)[39m]: [32m'subscription_items'[39m,
      [[32mSymbol(drizzle:OriginalName)[39m]: [32m'subscription_items'[39m,
      [[32mSymbol(drizzle:Schema)[39m]: [90mundefined[39m,
      [[32mSymbol(drizzle:Columns)[39m]: [36m[Object][39m,
      [[32mSymbol(drizzle:ExtraConfigColumns)[39m]: [36m[Object][39m,
      [[32mSymbol(drizzle:BaseName)[39m]: [32m'subscription_items'[39m,
      [[32mSymbol(drizzle:IsAlias)[39m]: [33mfalse[39m,
      [[32mSymbol(drizzle:IsDrizzleTable)[39m]: [33mtrue[39m,
      [[32mSymbol(drizzle:ExtraConfigBuilder)[39m]: [36m[Function (anonymous)][39m,
      [[32mSymbol(drizzle:PgInlineForeignKeys)[39m]: [36m[Array][39m,
      [[32mSymbol(drizzle:EnableRLS)[39m]: [33mtrue[39m
    }
  }
]

 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Edge Cases and Error Handling > should throw an error when subscription items have zero quantity
 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Edge Cases and Error Handling > should handle subscription items with zero unit price
stderr | src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Edge Cases and Error Handling > should handle subscription items with negative unit price or quantity
[createUpdateFunction] Error updating subscription_items with id si_SIuJRvRvPvMU6q9UD0SUm: ZodError: [
  {
    "code": "custom",
    "path": [
      "unitPrice"
    ],
    "message": "Value must be a positive integer"
  },
  {
    "code": "custom",
    "path": [
      "quantity"
    ],
    "message": "Value must be a positive integer"
  }
]
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:273:41
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/subscriptionItemMethods.ts:152:14
    at Array.map (<anonymous>)
    at bulkCreateOrUpdateSubscriptionItems [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/subscriptionItemMethods.ts:151:18[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at adjustSubscription [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/adjustSubscription.ts:134:29[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/adjustSubscription.test.ts:775:11
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m

 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Edge Cases and Error Handling > should handle subscription items with negative unit price or quantity
 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Edge Cases and Error Handling > should handle billing periods in the past appropriately
 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Bulk Operations > should correctly bulk update subscription items and insert proration adjustments 357ms
stderr | src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Bulk Operations > should handle errors during bulk operations gracefully and rollback
[createUpdateFunction] Error updating subscription_items with id si_SIxcEMKOe2B8nn4joFisA: DrizzleQueryError: Failed query: update "subscription_items" set "id" = $1, "updated_at" = $2, "livemode" = $3, "subscription_id" = $4, "name" = $5, "added_date" = $6, "price_id" = $7, "unit_price" = $8, "quantity" = $9, "usage_events_per_unit" = $10, "usage_meter_id" = $11, "metadata" = $12, "type" = $13, "external_id" = $14, "expired_at" = $15 where "subscription_items"."id" = $16 returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "subscription_id", "name", "added_date", "price_id", "unit_price", "quantity", "usage_events_per_unit", "usage_meter_id", "metadata", "type", "external_id", "expired_at"
params: si_SIxcEMKOe2B8nn4joFisA,2025-09-07T15:21:32.468Z,true,sub_l2ysbNl8VAGFxrHbLhalN,Item,2025-09-07T15:21:32.465Z,invalid_price_id,100,1,,,,static,,,si_SIxcEMKOe2B8nn4joFisA
    at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:73:11[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:17
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:276:24
    at async Promise.all (index 0)
    at bulkCreateOrUpdateSubscriptionItems [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableMethods/subscriptionItemMethods.ts:150:24[90m)[39m
    at adjustSubscription [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/adjustSubscription.ts:134:29[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/subscriptions/adjustSubscription.test.ts:937:13
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m {
  query: [32m'update "subscription_items" set "id" = $1, "updated_at" = $2, "livemode" = $3, "subscription_id" = $4, "name" = $5, "added_date" = $6, "price_id" = $7, "unit_price" = $8, "quantity" = $9, "usage_events_per_unit" = $10, "usage_meter_id" = $11, "metadata" = $12, "type" = $13, "external_id" = $14, "expired_at" = $15 where "subscription_items"."id" = $16 returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "subscription_id", "name", "added_date", "price_id", "unit_price", "quantity", "usage_events_per_unit", "usage_meter_id", "metadata", "type", "external_id", "expired_at"'[39m,
  params: [
    [32m'si_SIxcEMKOe2B8nn4joFisA'[39m,
    [32m'2025-09-07T15:21:32.468Z'[39m,
    [33mtrue[39m,
    [32m'sub_l2ysbNl8VAGFxrHbLhalN'[39m,
    [32m'Item'[39m,
    [32m'2025-09-07T15:21:32.465Z'[39m,
    [32m'invalid_price_id'[39m,
    [33m100[39m,
    [33m1[39m,
    [1mnull[22m,
    [1mnull[22m,
    [1mnull[22m,
    [32m'static'[39m,
    [1mnull[22m,
    [1mnull[22m,
    [32m'si_SIxcEMKOe2B8nn4joFisA'[39m
  ],
  cause: PostgresError: insert or update on table "subscription_items" violates foreign key constraint "subscription_items_price_id_prices_id_fk"
      at ErrorResponse [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:788:26[90m)[39m
      at handle [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:474:6[90m)[39m
      at Socket.data [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/connection.js:315:9[90m)[39m
  [90m    at Socket.emit (node:events:507:28)[39m
  [90m    at addChunk (node:internal/streams/readable:559:12)[39m
  [90m    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)[39m
  [90m    at Socket.Readable.push (node:internal/streams/readable:390:5)[39m
  [90m    at TCP.onStreamRead (node:internal/stream_base_commons:189:23)[39m
      at Query [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/query.js:35:9[90m)[39m
      at Function.unsafe [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:121:21[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:64:26
      at PostgresJsPreparedQuery.queryWithCache [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/session.ts:71:18[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:63:17
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:58:30
      at Object.startActiveSpan [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/tracing.ts:27:11[90m)[39m
      at PostgresJsPreparedQuery.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/postgres-js/session.ts:39:17[90m)[39m
      at QueryPromise.execute [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/drizzle-orm@0.44.5_@opentelemetry+api@1.9.0_@types+pg@8.6.1_kysely@0.28.4_postgres@3.4.5/node_modules/[4msrc[24m/pg-core/query-builders/update.ts:603:26[90m)[39m {
    severity_local: [32m'ERROR'[39m,
    severity: [32m'ERROR'[39m,
    code: [32m'23503'[39m,
    detail: [32m'Key (price_id)=(invalid_price_id) is not present in table "prices".'[39m,
    schema_name: [32m'public'[39m,
    table_name: [32m'subscription_items'[39m,
    constraint_name: [32m'subscription_items_price_id_prices_id_fk'[39m,
    file: [32m'ri_triggers.c'[39m,
    line: [32m'2596'[39m,
    routine: [32m'ri_ReportViolation'[39m,
    query: [32m'update "subscription_items" set "id" = $1, "updated_at" = $2, "livemode" = $3, "subscription_id" = $4, "name" = $5, "added_date" = $6, "price_id" = $7, "unit_price" = $8, "quantity" = $9, "usage_events_per_unit" = $10, "usage_meter_id" = $11, "metadata" = $12, "type" = $13, "external_id" = $14, "expired_at" = $15 where "subscription_items"."id" = $16 returning "id", "created_at", "updated_at", "created_by_commit", "updated_by_commit", "livemode", "position", "subscription_id", "name", "added_date", "price_id", "unit_price", "quantity", "usage_events_per_unit", "usage_meter_id", "metadata", "type", "external_id", "expired_at"'[39m,
    parameters: [
      [32m'si_SIxcEMKOe2B8nn4joFisA'[39m,
      [32m'2025-09-07T15:21:32.468Z'[39m,
      [32m't'[39m,
      [32m'sub_l2ysbNl8VAGFxrHbLhalN'[39m,
      [32m'Item'[39m,
      [32m'2025-09-07T15:21:32.465Z'[39m,
      [32m'invalid_price_id'[39m,
      [32m'100'[39m,
      [32m'1'[39m,
      [1mnull[22m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'static'[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'si_SIxcEMKOe2B8nn4joFisA'[39m
    ],
    args: [
      [32m'si_SIxcEMKOe2B8nn4joFisA'[39m,
      [32m'2025-09-07T15:21:32.468Z'[39m,
      [33mtrue[39m,
      [32m'sub_l2ysbNl8VAGFxrHbLhalN'[39m,
      [32m'Item'[39m,
      [32m'2025-09-07T15:21:32.465Z'[39m,
      [32m'invalid_price_id'[39m,
      [33m100[39m,
      [33m1[39m,
      [1mnull[22m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'static'[39m,
      [1mnull[22m,
      [1mnull[22m,
      [32m'si_SIxcEMKOe2B8nn4joFisA'[39m
    ],
    types: [
         [33m25[39m, [33m1184[39m,   [33m16[39m,   [33m25[39m,
         [33m25[39m, [33m1114[39m,   [33m25[39m,   [33m23[39m,
         [33m23[39m,   [33m23[39m,   [33m25[39m, [33m3802[39m,
      [33m22142[39m,   [33m25[39m, [33m1114[39m,   [33m25[39m
    ]
  }
}

[90m11:21:32:482[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:32:482[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:32:482[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:32:482[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:32:482[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:32:482[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:32:482[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:32:482[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:32:482[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:32:482[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:32:482[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:32:482[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:32:482[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:32:482[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:32:482[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:32:482[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:32:482[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:32:482[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:32:482[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:32:482[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:32:482[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:32:482[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:32:482[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:32:482[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:32:482[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:32:483[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:32:483[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:32:483[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:32:483[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:32:483[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:32:483[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:32:483[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:32:483[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:32:483[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:32:483[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:32:483[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:32:483[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:32:483[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:32:483[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:32:483[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:32:483[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:32:483[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:32:483[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:32:483[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:32:483[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:32:483[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:32:483[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:32:483[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:32:483[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:32:483[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:32:483[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:32:483[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:32:483[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:32:483[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:32:483[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:32:483[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:32:483[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:32:483[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:32:483[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:32:483[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:32:483[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:32:483[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:32:483[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:32:483[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:32:483[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:32:483[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:32:483[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:32:483[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:32:484[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:32:484[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:32:484[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:32:484[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:32:484[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:32:484[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:32:484[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:32:484[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:32:484[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:32:484[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:32:484[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:32:484[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:32:484[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:32:484[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:32:484[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:32:484[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:32:484[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:32:484[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:32:484[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:32:484[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/subscriptions/adjustSubscription.test.ts > adjustSubscription Integration Tests > Bulk Operations > should handle errors during bulk operations gracefully and rollback
stderr | src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Customer Isolation (Same Organization) > should isolate payments between customers
[selectById] Error selecting subscriptions with id sub_nyFM4Gipn9QMJDYSDTk96: Error: No subscriptions found with id: sub_nyFM4Gipn9QMJDYSDTk96
    at selectById [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:138:15[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:534:29
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:110:20
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:522:22
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

[90m11:21:33:191[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:33:191[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:33:191[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:33:191[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:33:193[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:33:193[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:33:193[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:33:193[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:35:474[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:35:474[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:35:474[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:35:474[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:35:476[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:35:476[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:35:476[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:35:476[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:35:737[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:35:864[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:35:864[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:35:864[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:35:864[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:35:866[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:35:866[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:35:866[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:35:866[0m [34m[setup-server][0m constructing the interceptor...
 × src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Customer Isolation (Same Organization) > should isolate payments between customers 6251ms
   → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
[90m11:21:36:1[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:36:1[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:36:2[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:36:2[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:36:80[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:36:80[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:36:80[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:36:81[0m [34m[setup-server][0m constructing the interceptor...
stderr | src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Customer Isolation (Same Organization) > should prevent updating other customers data
[createUpdateFunction] Error updating customers with id cust_PpOjhzkKYSiTDats1TAqr: Error: No customers found with id: cust_PpOjhzkKYSiTDats1TAqr
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:291:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:599:32
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:110:20
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:593:29
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

 ✓ src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Customer Isolation (Same Organization) > should prevent updating other customers data 510ms
[90m11:21:37:81[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:37:81[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:37:81[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:37:81[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:37:83[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:37:83[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:37:83[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:37:83[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:38:190[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:38:190[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:38:190[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:38:191[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:38:193[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:38:193[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:38:193[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:38:193[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:38:146[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:38:329[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:38:329[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:38:330[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:330[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:38:330[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:38:330[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:38:330[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:38:330[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:330[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:38:330[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:330[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:38:330[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:38:330[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:38:330[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:330[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:38:331[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:38:331[0m [34m[xhr][0m set global instance! xhr
[90m11:21:38:331[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:331[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:38:331[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:38:331[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:38:331[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:331[0m [34m[fetch][0m set global instance! fetch
[90m11:21:38:331[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:331[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:38:331[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:38:331[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:38:332[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:38:332[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:38:332[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:38:332[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:38:332[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:38:332[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:38:332[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:38:332[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:38:332[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:38:332[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:38:332[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:332[0m [34m[websocket][0m set global instance! websocket
[90m11:21:38:332[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:38:333[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:38:333[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:333[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:38:333[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:38:333[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:38:333[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:38:333[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:38:333[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:333[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:38:333[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:38:333[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:38:333[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:38:333[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:333[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:38:333[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:38:333[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:38:333[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:38:333[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:333[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:38:333[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:38:333[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:38:333[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:38:333[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:38:333[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:38:333[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:38:333[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:38:333[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:38:333[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:38:333[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:38:334[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:38:334[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:38:334[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:38:334[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:38:334[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:334[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:38:334[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:38:334[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:38:334[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:38:334[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:38:334[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:334[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:38:334[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:38:334[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:38:334[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:38:334[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:334[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:38:334[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:38:334[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:38:334[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:38:334[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:334[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:38:334[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:38:334[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:38:334[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:38:334[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:38:334[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:38:334[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:38:334[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:38:334[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:38:334[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:38:334[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:38:334[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:38:334[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:38:334[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:38:334[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:38:334[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:335[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:38:335[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:38:335[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:38:335[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:38:335[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:38:335[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:335[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:38:335[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:38:335[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:38:335[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:38:335[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:335[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:38:335[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:38:335[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:38:335[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:38:335[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:335[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:38:335[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:38:335[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:38:335[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:38:335[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:38:335[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:38:335[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:38:335[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:38:335[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:38:335[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:38:335[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:38:335[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:38:335[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:38:354[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:38:354[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:38:354[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:38:354[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:38:377[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:38:377[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:38:377[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:38:377[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:38:411[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:38:411[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:38:411[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:38:411[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:38:413[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:38:413[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:38:414[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:38:414[0m [34m[setup-server][0m constructing the interceptor...
stderr | src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Checkout Session Validation > should throw an error when checkout session exists but status is not Open
Error: Checkout session is not open: chckt_session_xjiuLM8xqoyyfWAfMHqZx
    at Module.confirmCheckoutSessionTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/utils/bookkeeping/confirmCheckoutSession.ts:45:13[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/utils/bookkeeping/confirmCheckoutSession.test.ts:129:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

stderr | src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Checkout Session Validation > should throw an error when checkout session exists but status is not Open
Error: Checkout session is not open: chckt_session_xjiuLM8xqoyyfWAfMHqZx
    at Module.confirmCheckoutSessionTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/utils/bookkeeping/confirmCheckoutSession.ts:45:13[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/utils/bookkeeping/confirmCheckoutSession.test.ts:147:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

stderr | src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Checkout Session Validation > should throw an error when checkout session exists but status is not Open
Error: Checkout session is not open: chckt_session_xjiuLM8xqoyyfWAfMHqZx
    at Module.confirmCheckoutSessionTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/utils/bookkeeping/confirmCheckoutSession.ts:45:13[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/utils/bookkeeping/confirmCheckoutSession.test.ts:166:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

[90m11:21:38:915[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:38:915[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:38:915[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:38:915[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:38:917[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:38:918[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:38:918[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:38:918[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Checkout Session Validation > should throw an error when checkout session exists but status is not Open 471ms
[90m11:21:38:943[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:38:943[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:38:943[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:943[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:38:943[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:38:943[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:38:943[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:38:943[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:944[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:38:944[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:944[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:38:944[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:38:944[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:38:944[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:944[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:38:944[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:38:944[0m [34m[xhr][0m set global instance! xhr
[90m11:21:38:944[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:944[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:38:944[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:38:944[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:38:944[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:944[0m [34m[fetch][0m set global instance! fetch
[90m11:21:38:944[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:944[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:38:945[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:38:945[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:38:945[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:38:945[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:38:945[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:38:945[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:38:945[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:38:945[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:38:945[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:38:945[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:38:945[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:38:946[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:38:946[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:946[0m [34m[websocket][0m set global instance! websocket
[90m11:21:38:946[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:38:946[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:38:946[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:946[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:38:946[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:38:946[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:38:946[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:38:946[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:38:946[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:946[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:38:946[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:38:946[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:38:946[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:38:946[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:946[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:38:946[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:38:946[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:38:946[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:38:946[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:946[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:38:946[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:38:946[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:38:946[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:38:946[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:38:947[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:38:947[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:38:947[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:38:947[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:38:947[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:38:947[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:38:947[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:38:947[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:38:947[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:38:947[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:38:947[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:947[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:38:947[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:38:947[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:38:947[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:38:947[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:38:947[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:947[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:38:947[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:38:947[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:38:947[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:38:947[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:947[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:38:947[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:38:947[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:38:947[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:38:947[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:947[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:38:947[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:38:947[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:38:947[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:38:947[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:38:947[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:38:947[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:38:947[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:38:948[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:38:948[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:38:948[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:38:948[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:38:948[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:38:948[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:38:948[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:38:948[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:38:948[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:38:948[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:38:948[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:38:948[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:38:948[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:38:948[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:948[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:38:948[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:38:948[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:38:948[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:38:948[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:948[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:38:948[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:38:948[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:38:948[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:38:948[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:38:948[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:38:948[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:38:948[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:38:948[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:38:948[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:38:948[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:38:948[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:38:948[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:38:948[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:38:948[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:38:948[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:38:948[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:38:948[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:39:44[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:39:45[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:39:45[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:39:45[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:39:45[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:39:45[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:39:45[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:39:45[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:39:46[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:39:46[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:39:46[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:39:46[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:39:46[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:39:46[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:39:46[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:39:49[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:39:49[0m [34m[xhr][0m set global instance! xhr
[90m11:21:39:49[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:39:49[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:39:49[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:39:50[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:39:50[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:39:50[0m [34m[fetch][0m set global instance! fetch
[90m11:21:39:50[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:39:50[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:39:50[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:39:50[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:39:50[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:39:51[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:39:51[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:39:51[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:39:51[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:39:51[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:39:51[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:39:51[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:39:52[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:39:52[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:39:52[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:39:52[0m [34m[websocket][0m set global instance! websocket
[90m11:21:39:52[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:39:52[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:39:52[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:39:52[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:39:52[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:39:52[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:39:52[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:39:52[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:39:52[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:39:52[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:39:52[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:39:52[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:39:52[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:39:52[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:39:52[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:39:53[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:39:53[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:39:53[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:39:53[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:39:53[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:39:53[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:39:53[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:39:53[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:39:53[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:39:53[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:39:53[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:39:53[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:39:53[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:39:53[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:39:53[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:39:53[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:39:53[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:39:53[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:39:53[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:39:53[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:39:53[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:39:53[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:39:53[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:39:53[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:39:54[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:39:54[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:39:54[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:39:54[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:39:54[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:39:54[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:39:54[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:39:54[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:39:54[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:39:54[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:39:54[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:39:54[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:39:54[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:39:54[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:39:54[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:39:54[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:39:54[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:39:54[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:39:54[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:39:54[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:39:54[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:39:54[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:39:54[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:39:54[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:39:54[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:39:55[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:39:55[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:39:55[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:39:55[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:39:55[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:39:55[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:39:55[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:39:55[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:39:55[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:39:55[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:39:55[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:39:55[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:39:55[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:39:55[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:39:55[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:39:55[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:39:55[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:39:55[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:39:55[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:39:55[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:39:55[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:39:55[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:39:55[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:39:55[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:39:55[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:39:55[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:39:55[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:39:55[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:39:55[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:39:55[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:39:55[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:39:55[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Fee Calculation > should skip fee calculation when session type is AddPaymentMethod
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Fee Calculation > should use existing fee calculation when one is already present
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Customer Handling > should retrieve customer via customerId when set on the session
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should return correct pagination metadata when there are more results 535ms
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/expireCreditsAtEndOfBillingPeriod.test.ts > expireCreditsAtEndOfBillingPeriod > should do nothing and return empty entries if there are no ledger accounts for the subscription 466ms
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Customer Handling > should retrieve customer from linked purchase when no customerId but purchaseId is set
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/expireCreditsAtEndOfBillingPeriod.test.ts > expireCreditsAtEndOfBillingPeriod > should do nothing and return empty entries if aggregateAvailableBalanceForUsageCredit returns no balances
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should return correct pagination metadata when there are no more results 335ms
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Customer Handling > should create a new customer when no customerId/purchaseId exists but customerEmail is provided
stderr | src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Customer Handling > should throw an error when no customerId, purchaseId, or customerEmail are available
Error: Checkout session has no customer email, and no purchase: chckt_session_xeW3FWU17Oe3PUZQzVS26
    at Module.confirmCheckoutSessionTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/utils/bookkeeping/confirmCheckoutSession.ts:88:15[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/utils/bookkeeping/confirmCheckoutSession.test.ts:352:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Customer Handling > should throw an error when no customerId, purchaseId, or customerEmail are available
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/expireCreditsAtEndOfBillingPeriod.test.ts > expireCreditsAtEndOfBillingPeriod > should not expire credits and return empty entries if balances exist but none are expiring by the previous billing period end date 354ms
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should handle different page sizes correctly 480ms
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Customer Handling > should skip Stripe customer creation when customer record has stripeCustomerId 304ms
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/expireCreditsAtEndOfBillingPeriod.test.ts > expireCreditsAtEndOfBillingPeriod > should correctly expire credits that expire exactly at the previous billing period end date 480ms
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Customer Handling > should create Stripe customer and update customer record when stripeCustomerId is missing 318ms
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should return empty result set when no records match filter 474ms
stderr | src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Customer Handling > should throw an error if stripeCustomerId is missing and no customerEmail exists
Error: Checkout session has no customer email: chckt_session_2g3GOg0WbndIEbK3detS1
    at Module.confirmCheckoutSessionTransaction [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/utils/bookkeeping/confirmCheckoutSession.ts:125:15[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/utils/bookkeeping/confirmCheckoutSession.test.ts:473:7
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Customer Handling > should throw an error if stripeCustomerId is missing and no customerEmail exists
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/expireCreditsAtEndOfBillingPeriod.test.ts > expireCreditsAtEndOfBillingPeriod > should correctly calculate the expired amount for a partially used credit 439ms
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should maintain correct order by creation date (newest first) 359ms
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Setup Intent Handling > should update setup intent when stripeSetupIntentId is set and fetched setup intent has no customer
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Setup Intent Handling > should not update setup intent when it already has a customer
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/expireCreditsAtEndOfBillingPeriod.test.ts > expireCreditsAtEndOfBillingPeriod > should correctly expire credits that expire before the previous billing period end date 351ms
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should paginate to next page correctly 388ms
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Payment Intent Handling > should update payment intent with customer ID, amount, and application fee when applicable
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/expireCreditsAtEndOfBillingPeriod.test.ts > expireCreditsAtEndOfBillingPeriod > should handle a mix of expiring and non-expiring credits correctly 398ms
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Payment Intent Handling > should update payment intent with amount only (no application fee) when total amount due is zero
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should handle backward pagination correctly 357ms
[90m11:21:42:58[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:42:59[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:42:59[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:42:59[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:42:59[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:42:59[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:42:59[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:42:59[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:42:59[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:42:59[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:42:59[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:42:59[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:42:60[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:42:60[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:42:60[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:42:60[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:42:60[0m [34m[xhr][0m set global instance! xhr
[90m11:21:42:60[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:42:60[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:42:60[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:42:60[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:42:60[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:42:60[0m [34m[fetch][0m set global instance! fetch
[90m11:21:42:60[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:42:60[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:42:61[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:42:61[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:42:61[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:42:61[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:42:61[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:42:61[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:42:61[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:42:61[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:42:61[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:42:61[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:42:61[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:42:62[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:42:62[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:42:62[0m [34m[websocket][0m set global instance! websocket
[90m11:21:42:62[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:42:62[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:42:62[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:42:62[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:42:62[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:42:62[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:42:62[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:42:62[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:42:62[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:42:62[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:42:62[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:42:62[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:42:62[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:42:62[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:42:62[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:42:62[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:42:62[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:42:62[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:42:62[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:42:62[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:42:62[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:42:62[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:42:62[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:42:62[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:42:63[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:42:63[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:42:63[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:42:63[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:42:63[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:42:63[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:42:63[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:42:63[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:42:63[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:42:63[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:42:63[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:42:63[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:42:63[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:42:63[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:42:63[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:42:63[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:42:63[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:42:63[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:42:63[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:42:63[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:42:63[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:42:63[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:42:63[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:42:63[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:42:63[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:42:63[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:42:63[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:42:63[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:42:63[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:42:63[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:42:63[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:42:63[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:42:63[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:42:63[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:42:63[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:42:63[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:42:63[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:42:63[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:42:63[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:42:63[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:42:64[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:42:64[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:42:64[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:42:64[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:42:64[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:42:64[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:42:64[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:42:64[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:42:64[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:42:64[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:42:64[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:42:64[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:42:64[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:42:64[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:42:64[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:42:64[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:42:64[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:42:64[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:42:64[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:42:64[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:42:64[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:42:64[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:42:64[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:42:64[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:42:64[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:42:64[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:42:64[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:42:64[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:42:65[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:42:65[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:42:65[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:42:65[0m [34m[websocket:apply][0m intercepted already applied!
 × src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Customer Isolation (Same Organization) > should prevent canceling other customers subscriptions 5615ms
   → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Payment Intent Handling > should not update payment intent when session type is AddPaymentMethod
[90m11:21:42:331[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:42:331[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:42:331[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:42:331[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:42:331[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:42:331[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:42:331[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:42:331[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:42:331[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:42:331[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:42:332[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:332[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:42:332[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:42:332[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:42:332[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:42:332[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:42:332[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:42:332[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:42:332[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:332[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:42:332[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:42:332[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:42:332[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:42:332[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:42:332[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:42:332[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:42:332[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:332[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:42:332[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:332[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:42:332[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:42:332[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:42:332[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:42:332[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:42:332[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:42:333[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:333[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:42:333[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:42:333[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:42:333[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:42:333[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:42:333[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:42:333[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:42:333[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:42:333[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:333[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:42:333[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:42:333[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:333[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:42:333[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:42:333[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:333[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:333[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:42:333[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:42:333[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:42:333[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:42:333[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:42:333[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:42:333[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:42:333[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:42:333[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:42:333[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:333[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:42:333[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:42:333[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:333[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:42:333[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:42:333[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:333[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:334[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:42:334[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:42:334[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:42:334[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:42:334[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:42:334[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:42:334[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:42:334[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:42:334[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:42:334[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:334[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:42:334[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:42:334[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:334[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:42:334[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:42:334[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:334[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:334[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:42:334[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/ledgerManager/billingPeriodTransitionLedgerCommand/expireCreditsAtEndOfBillingPeriod.test.ts > expireCreditsAtEndOfBillingPeriod > should correctly map all properties for the CreditGrantExpiredInsert ledger entry, including when livemode is false 380ms
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should return correct total count for filtered and unfiltered results 448ms
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Edge Cases > should handle checkout session with both purchaseId and customerId (prioritizing customerId) 317ms
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Edge Cases > should handle checkout sessions with no payment intent or setup intent
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should not return duplicate items when using pageAfter 470ms
[90m11:21:42:955[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:42:955[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:42:955[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:42:955[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:42:955[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:42:955[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:42:955[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:42:955[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:42:955[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:42:955[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:42:956[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:956[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:42:956[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:42:956[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:42:956[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:42:956[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:42:956[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:42:956[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:42:956[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:956[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:42:956[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:42:956[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:42:956[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:42:956[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:42:956[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:42:956[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:42:956[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:956[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:42:956[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:956[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:42:956[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:42:956[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:42:956[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:42:956[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:42:956[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:42:956[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:956[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:42:956[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:42:956[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:42:957[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:42:957[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:42:957[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:42:957[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:42:957[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:42:957[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:957[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:42:957[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:42:957[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:957[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:42:957[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:42:957[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:957[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:957[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:42:957[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:42:957[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:42:957[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:42:957[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:42:957[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:42:957[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:42:957[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:42:957[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:42:957[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:957[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:42:957[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:42:957[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:957[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:42:957[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:42:957[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:957[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:957[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:42:958[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:42:958[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:42:958[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:42:958[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:42:958[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:42:958[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:42:958[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:42:958[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:42:958[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:958[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:42:958[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:42:958[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:958[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:42:958[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:42:958[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:42:958[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:42:958[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:42:958[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/utils/bookkeeping/confirmCheckoutSession.test.ts > confirmCheckoutSessionTransaction > Return Value > should return the customer object with all expected properties
[90m11:21:42:963[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_hTJGalNTOq4OROm2USieY
[90m11:21:42:963[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:42:963[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
[90m11:21:43:208[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:43:208[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:43:208[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:208[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:43:209[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:43:209[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:43:209[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:43:209[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:209[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:43:209[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:209[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:43:209[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:43:209[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:43:209[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:210[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:43:210[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:43:210[0m [34m[xhr][0m set global instance! xhr
[90m11:21:43:210[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:210[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:43:210[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:43:210[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:43:210[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:210[0m [34m[fetch][0m set global instance! fetch
[90m11:21:43:210[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:210[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:43:210[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:43:211[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:43:211[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:43:211[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:43:211[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:43:211[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:43:211[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:43:211[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:43:211[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:43:211[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:43:211[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:43:211[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:43:211[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:212[0m [34m[websocket][0m set global instance! websocket
[90m11:21:43:212[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:43:212[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:43:212[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:212[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:43:212[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:43:212[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:43:212[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:43:212[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:43:212[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:212[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:43:212[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:43:212[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:43:212[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:43:213[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:213[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:43:213[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:43:216[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:43:216[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:43:216[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:216[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:43:216[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:43:217[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:43:217[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:43:217[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:43:217[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:43:217[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:43:217[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:43:217[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:43:217[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:43:217[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:43:217[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:43:217[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:43:217[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:43:218[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:43:218[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:218[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:43:218[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:43:218[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:43:218[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:43:218[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:43:218[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:218[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:43:218[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:43:218[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:43:218[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:43:218[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:218[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:43:218[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:43:218[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:43:218[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:43:218[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:218[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:43:218[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:43:219[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:43:219[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:43:219[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:43:219[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:43:219[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:43:219[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:43:219[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:43:219[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:43:219[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:43:219[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:43:219[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:43:219[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:43:219[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:43:219[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:219[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:43:219[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:43:219[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:43:219[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:43:219[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:43:219[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:219[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:43:219[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:43:219[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:43:219[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:43:219[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:219[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:43:219[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:43:219[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:43:219[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:43:219[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:219[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:43:220[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:43:220[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:43:220[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:43:220[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:43:220[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:43:220[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:43:220[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:43:220[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:43:220[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:43:220[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:43:220[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:43:220[0m [34m[websocket:apply][0m intercepted already applied!
stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with free subscription upgrading to paid > should cancel free subscription and create paid subscription atomically
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_hTJGalNTOq4OROm2USieY

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:43:250[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:43:250[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:43:284[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with free subscription upgrading to paid > should cancel free subscription and create paid subscription atomically
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_hTJGalNTOq4OROm2USieY

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with free subscription upgrading to paid > should cancel free subscription and create paid subscription atomically
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_hTJGalNTOq4OROm2USieY

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should not return duplicate items when using pageBefore 484ms
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > chargeStatusToPaymentStatus > converts a Stripe "succeeded" status to an internal Succeeded status
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > chargeStatusToPaymentStatus > converts a Stripe "failed" status to an internal Failed status
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with free subscription upgrading to paid > should cancel free subscription and create paid subscription atomically 1303ms
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > chargeStatusToPaymentStatus > defaults unknown Stripe charge statuses to Processing
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should navigate to first page when goToFirst is true 320ms
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > updatePaymentToReflectLatestChargeStatus > updates the payment status when the charge status differs from the current payment status
[90m11:21:43:964[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:43:964[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:43:964[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:965[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:43:965[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:43:965[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:43:965[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:43:965[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:965[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:43:965[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:965[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:43:965[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:43:965[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:43:965[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:966[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:43:966[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:43:966[0m [34m[xhr][0m set global instance! xhr
[90m11:21:43:966[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:966[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:43:966[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:43:966[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:43:966[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:966[0m [34m[fetch][0m set global instance! fetch
[90m11:21:43:966[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:966[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:43:966[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:43:967[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:43:967[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:43:967[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:43:967[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:43:967[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:43:967[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:43:967[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:43:967[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:43:967[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:43:967[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:43:967[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:43:967[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:967[0m [34m[websocket][0m set global instance! websocket
[90m11:21:43:968[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:43:968[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:43:968[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:968[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:43:968[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:43:968[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:43:968[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:43:968[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:43:968[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:968[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:43:968[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:43:968[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:43:968[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:43:968[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:968[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:43:968[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:43:968[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:43:968[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:43:968[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:968[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:43:968[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:43:968[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:43:968[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:43:968[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:43:968[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:43:968[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:43:968[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:43:968[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:43:968[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:43:968[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:43:968[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:43:968[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:43:969[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:43:969[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:43:969[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:969[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:43:969[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:43:969[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:43:969[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:43:969[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:43:969[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:969[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:43:969[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:43:969[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:43:969[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:43:969[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:969[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:43:969[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:43:969[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:43:969[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:43:969[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:969[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:43:969[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:43:969[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:43:969[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:43:969[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:43:969[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:43:969[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:43:969[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:43:969[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_Xvda2PRB9viBwGNnQpgeu
[90m11:21:43:969[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:43:969[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:43:969[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:43:969[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
[90m11:21:43:969[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:43:969[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:43:969[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:43:969[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:43:969[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:43:969[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:43:969[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:43:969[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:43:970[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:43:970[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:43:970[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:43:970[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:970[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:43:970[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:43:970[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:43:970[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:43:970[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:970[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:43:970[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:43:970[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:43:970[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:43:970[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:43:970[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:43:970[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:43:970[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:43:970[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:43:970[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:43:970[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:43:970[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:43:970[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:43:970[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:43:970[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:43:970[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:43:970[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:43:970[0m [34m[websocket:apply][0m intercepted already applied!
stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with free subscription upgrading to paid > should preserve metadata from free subscription to paid subscription
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_Xvda2PRB9viBwGNnQpgeu

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:43:978[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:43:978[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:44:63[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with free subscription upgrading to paid > should preserve metadata from free subscription to paid subscription
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_Xvda2PRB9viBwGNnQpgeu

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with free subscription upgrading to paid > should preserve metadata from free subscription to paid subscription
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_Xvda2PRB9viBwGNnQpgeu

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > updatePaymentToReflectLatestChargeStatus > does not update the payment status if the current status already matches the charge status
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should navigate to last page when goToLast is true 406ms
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with free subscription upgrading to paid > should preserve metadata from free subscription to paid subscription 642ms
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > updatePaymentToReflectLatestChargeStatus > updates the associated invoice status when an invoiceId exists
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with free subscription upgrading to paid > should handle billing periods correctly during upgrade
[90m11:21:44:443[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:44:444[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:44:444[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > updatePaymentToReflectLatestChargeStatus > updates the associated purchase status when a purchaseId exists
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should handle goToLast with partial last page correctly 304ms
[90m11:21:44:543[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:44:543[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:44:543[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:44:543[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:44:546[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:44:546[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:44:546[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:44:546[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > updatePaymentToReflectLatestChargeStatus > throws an error if there is no associated invoice
[90m11:21:44:614[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:44:614[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:44:615[0m [34m[fetch][0m request has been handled, returning mock promise...
[90m11:21:44:690[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_JAXoIdU29sSUvAaYY0HqF
[90m11:21:44:690[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:44:690[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer without existing subscription > should create new subscription without canceling anything
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_JAXoIdU29sSUvAaYY0HqF

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:44:767[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:44:767[0m [34m[fetch][0m emitting the "response" event...
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/index.js" points to missing source files
[90m11:21:44:775[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer without existing subscription > should create new subscription without canceling anything
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_JAXoIdU29sSUvAaYY0HqF

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/class-registry.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/registry.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/custom-transformer-registry.js" points to missing source files
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > updatePaymentToReflectLatestChargeStatus > handles cases gracefully when there is no associated purchase
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/plainer.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/double-indexed-kv.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/util.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/is.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/pathstringifier.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/transformer.js" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/superjson@2.2.1/node_modules/superjson/dist/accessDeep.js" points to missing source files
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should handle goToFirst from middle page correctly 369ms
stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer without existing subscription > should create new subscription without canceling anything
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_JAXoIdU29sSUvAaYY0HqF

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer without existing subscription > should create new subscription without canceling anything 576ms
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > updatePaymentToReflectLatestChargeStatus > maintains idempotency when called multiple times with the same charge status
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > updatePaymentToReflectLatestChargeStatus > updates the payment status to Failed when the charge status is failed
[90m11:21:45:117[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:45:117[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:45:117[0m [34m[fetch][0m emitting the "request" event for 5 listener(s)...
[90m11:21:45:126[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:45:127[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:45:127[0m [34m[fetch][0m request has been handled, returning mock promise...
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with multiple free subscriptions > should cancel most recent free subscription when multiple exist
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > updatePaymentToReflectLatestChargeStatus > updates the failure message when the charge status is failed
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should handle goToLast from first page correctly 349ms
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > upsertPaymentForStripeCharge > throws an error if the charge does not include a payment_intent
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > upsertPaymentForStripeCharge > throws an error if payment intent metadata is missing
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should handle goToFirst and goToLast with filtered results
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > upsertPaymentForStripeCharge > throws an error if metadata does not contain any of billingRunId, invoiceId, or checkoutSessionId
stderr | src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Organization Isolation > should prevent customerA_Org1 from accessing any data in Org2
[selectById] Error selecting invoices with id inv_1W2bNHSDwn26btrw4xCVI: Error: No invoices found with id: inv_1W2bNHSDwn26btrw4xCVI
    at selectById [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:138:15[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:434:33
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:110:20
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:410:22
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

[90m11:21:45:628[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:45:628[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:45:628[0m [34m[fetch][0m emitting the "request" event for 6 listener(s)...
[90m11:21:45:636[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:45:636[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:45:636[0m [34m[fetch][0m request has been handled, returning mock promise...
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > upsertPaymentForStripeCharge > throws an error if the invoice ID cannot be determined
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > upsertPaymentForStripeCharge > handles charges with missing billing details gracefully
 ✓ src/utils/bookkeeping.test.ts > createCustomerBookkeeping > customer creation with automatic subscription > should create a customer with a default subscription when no pricing model is specified 1525ms
[90m11:21:45:792[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_gW50zCGNQ76suQMlLWmif
[90m11:21:45:792[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:45:792[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should handle goToFirst and goToLast with empty result set 300ms
stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with existing paid subscription > should allow creating second paid subscription while canceling free
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_gW50zCGNQ76suQMlLWmif

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:45:808[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:45:808[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:45:812[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with existing paid subscription > should allow creating second paid subscription while canceling free
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_gW50zCGNQ76suQMlLWmif

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with existing paid subscription > should allow creating second paid subscription while canceling free
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_gW50zCGNQ76suQMlLWmif

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:45:978[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:45:978[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:45:978[0m [34m[fetch][0m emitting the "request" event for 7 listener(s)...
[90m11:21:45:986[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:46:62[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:46:62[0m [34m[fetch][0m request has been handled, returning mock promise...
[90m11:21:46:124[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:46:124[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:46:125[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:46:125[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:46:125[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:46:125[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:46:125[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:46:125[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:46:126[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:46:126[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:46:126[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:46:126[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:46:126[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:46:126[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:46:126[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:46:126[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:46:126[0m [34m[xhr][0m set global instance! xhr
[90m11:21:46:126[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:46:126[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:46:126[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:46:126[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:46:126[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:46:127[0m [34m[fetch][0m set global instance! fetch
[90m11:21:46:127[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:46:127[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:46:127[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:46:127[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:46:127[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:46:127[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:46:127[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:46:127[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:46:127[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:46:127[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:46:127[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:46:128[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:46:128[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:46:128[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:46:128[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:46:128[0m [34m[websocket][0m set global instance! websocket
[90m11:21:46:128[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:46:128[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:46:128[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:46:128[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:46:128[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:46:128[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:46:128[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:46:128[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:46:129[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:46:129[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:46:129[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:46:129[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:46:129[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:46:129[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:46:129[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:46:129[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:46:129[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:46:129[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:46:129[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:46:129[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:46:129[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:46:129[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:46:129[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:46:129[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:46:129[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:46:129[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:46:129[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:46:129[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:46:129[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:46:129[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:46:129[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:46:129[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:46:130[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:46:130[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:46:130[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:46:130[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:46:130[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:46:130[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:46:130[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:46:130[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:46:130[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:46:130[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:46:130[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:46:130[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:46:130[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:46:130[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:46:130[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:46:130[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:46:130[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:46:130[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:46:130[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:46:131[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:46:131[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:46:131[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:46:131[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:46:131[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:46:131[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:46:131[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:46:131[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:46:131[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:46:131[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:46:131[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:46:131[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:46:131[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:46:131[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:46:131[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:46:131[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:46:131[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:46:131[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:46:131[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:46:131[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:46:131[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:46:131[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:46:131[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:46:131[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:46:131[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:46:131[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:46:131[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:46:131[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:46:131[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:46:132[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:46:132[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:46:132[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:46:132[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:46:132[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:46:132[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:46:132[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:46:132[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:46:132[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:46:132[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:46:132[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:46:132[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:46:132[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:46:132[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:46:132[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:46:132[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with existing paid subscription > should allow creating second paid subscription while canceling free 981ms
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should handle goToLast with single page of results 392ms
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > upsertPaymentForStripeCharge > handles partially refunded charges 315ms
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > processPaymentIntentStatusUpdated > throws an error when the PaymentIntent has no metadata
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Customer with existing paid subscription > should not cancel existing paid subscription
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > processPaymentIntentStatusUpdated > throws an error when the PaymentIntent has no latest_charge
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Transaction rollback on failure > should rollback cancellation if subscription creation fails
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should maintain correct order when using goToFirst and goToLast 330ms
[90m11:21:46:562[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:46:563[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:46:563[0m [34m[fetch][0m emitting the "request" event for 8 listener(s)...
[90m11:21:46:569[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:46:569[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:46:570[0m [34m[fetch][0m request has been handled, returning mock promise...
 ✓ src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > skips processing for out-of-order event 400ms
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Idempotency handling > should handle duplicate setup intent processing correctly
[90m11:21:46:689[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/charges/ch_br
[90m11:21:46:689[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:46:689[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
 ✓ src/db/tableUtils.test.ts > createCursorPaginatedSelectFunction > should ignore cursor parameters when goToFirst or goToLast are used
[90m11:21:46:846[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/payment_methods/pm_CexoqxwTzqiVza7XoKl8S
[90m11:21:46:847[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:46:847[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Non-subscription checkout types > should not cancel free subscription for AddPaymentMethod checkout
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_CexoqxwTzqiVza7XoKl8S

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:46:854[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:46:859[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/charges/ch_1757258506723__succeededXViS5FzlPKt8IpggagIMC
[90m11:21:46:859[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:46:859[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
[90m11:21:46:854[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:46:889[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Non-subscription checkout types > should not cancel free subscription for AddPaymentMethod checkout
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_CexoqxwTzqiVza7XoKl8S

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > processPaymentIntentStatusUpdated > Billing Run Flow > correctly processes a payment when metadata contains a billingRunId and a valid subscription
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_br

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:46:891[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:46:892[0m [34m[fetch][0m emitting the "response" event...
stderr | src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Non-subscription checkout types > should not cancel free subscription for AddPaymentMethod checkout
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/payment_methods/pm_CexoqxwTzqiVza7XoKl8S

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:46:897[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > processPaymentIntentStatusUpdated > Billing Run Flow > correctly processes a payment when metadata contains a billingRunId and a valid subscription
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_br

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > processPaymentIntentStatusUpdated > Billing Run Flow > correctly processes a payment when metadata contains a billingRunId and a valid subscription
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_br

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > processPaymentIntentStatusUpdated > Billing Run Flow > correctly processes a payment when metadata contains a billingRunId and a valid subscription 564ms
stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentSucceeded event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_1757258506723__succeededXViS5FzlPKt8IpggagIMC

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Non-subscription checkout types > should not cancel free subscription for AddPaymentMethod checkout 348ms
[90m11:21:47:67[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:47:68[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:47:71[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:47:72[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:47:72[0m [34m[fetch][0m emitting the "request" event for 9 listener(s)...
[90m11:21:47:77[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:47:78[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:47:78[0m [34m[fetch][0m request has been handled, returning mock promise...
[90m11:21:47:78[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentSucceeded event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_1757258506723__succeededXViS5FzlPKt8IpggagIMC

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentSucceeded event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_1757258506723__succeededXViS5FzlPKt8IpggagIMC

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:47:109[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/charges/ch_br_err
[90m11:21:47:109[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:47:109[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > processPaymentIntentStatusUpdated > Billing Run Flow > throws an error when no invoice exists for the billing run
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_br_err

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping.test.ts > createCustomerBookkeeping > customer creation with automatic subscription > should create a customer with subscription from specified pricing model 1406ms
[90m11:21:47:154[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:47:154[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:47:159[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > processPaymentIntentStatusUpdated > Billing Run Flow > throws an error when no invoice exists for the billing run
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_br_err

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Non-subscription checkout types > should not cancel free subscription for ActivateSubscription checkout
stderr | src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > processPaymentIntentStatusUpdated > Billing Run Flow > throws an error when no invoice exists for the billing run
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_br_err

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > processPaymentIntentStatusUpdated > Billing Run Flow > throws an error when no invoice exists for the billing run
[selectById] Error selecting billing_runs with id br_err: Error: No billing runs found with id: br_err
    at selectById [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:138:15[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at upsertPaymentForStripeCharge [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/utils/bookkeeping/processPaymentIntentStatusUpdated.ts:85:24[90m)[39m
    at processPaymentIntentStatusUpdated [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/utils/bookkeeping/processPaymentIntentStatusUpdated.ts:317:19[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/adminTransaction.ts:38:18
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts:573:9
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

[90m11:21:47:219[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:47:219[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:47:219[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:47:219[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:47:219[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:47:219[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:47:219[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:47:219[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:47:219[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:47:219[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:47:219[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:219[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:47:219[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:47:219[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:47:219[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:47:219[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:47:219[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:47:219[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:47:219[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:219[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:47:219[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:47:219[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:47:219[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:47:219[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:47:219[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:47:219[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:47:220[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:220[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:47:220[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:220[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:47:220[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:47:220[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:47:220[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:47:220[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:47:220[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:47:220[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:220[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:47:220[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:47:220[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:47:220[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:47:220[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:47:220[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:47:220[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:47:220[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:47:220[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:220[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:47:220[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:47:220[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:220[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:47:220[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:47:220[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:220[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:220[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:47:220[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:47:220[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:47:220[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:47:220[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:47:220[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:47:220[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:47:220[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:47:220[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:47:220[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:220[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:47:220[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:47:220[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:220[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:47:221[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:47:221[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:221[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:221[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:47:221[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:47:221[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:47:221[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:47:221[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:47:221[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:47:221[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:47:221[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:47:221[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:47:221[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:221[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:47:221[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:47:221[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:221[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:47:221[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:47:221[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:221[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:221[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:47:221[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/utils/bookkeeping/processPaymentIntentStatusUpdated.test.ts > Process payment intent status updated > processPaymentIntentStatusUpdated > Billing Run Flow > throws an error when no invoice exists for the billing run
[90m11:21:47:246[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:47:246[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:47:246[0m [34m[fetch][0m emitting the "request" event for 10 listener(s)...
[90m11:21:47:252[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:47:252[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:47:252[0m [34m[fetch][0m request has been handled, returning mock promise...
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Edge cases > should handle customer with already canceled free subscription
 ✓ src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentSucceeded event correctly 799ms
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Edge cases > should handle customer with free subscription canceled for other reasons
[90m11:21:47:647[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/charges/ch_idem_1757258507506__succeededzTXA0x9LGIMoXGZz5g229
[90m11:21:47:647[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:47:647[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
[90m11:21:47:652[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:47:652[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:47:652[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:47:652[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:47:652[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:47:652[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:47:652[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:47:652[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:47:652[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:47:652[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:47:652[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:652[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:47:652[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:47:653[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:47:653[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:47:653[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:47:653[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:47:653[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:47:653[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:653[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:47:653[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:47:653[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:47:653[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:47:653[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:47:653[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:47:653[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:47:653[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:653[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:47:653[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:653[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:47:653[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:47:653[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:47:653[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:47:653[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:47:653[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:47:653[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:653[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:47:653[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:47:653[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:47:653[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:47:653[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:47:653[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:47:653[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:47:653[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:47:653[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:653[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:47:653[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:47:653[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:653[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:47:653[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:47:653[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:653[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:653[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:47:653[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:47:653[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:47:653[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:47:654[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:47:654[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:47:654[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:47:654[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:47:654[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:47:654[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:654[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:47:654[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:47:654[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:654[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:47:654[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:47:654[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:654[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:654[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:47:654[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:47:654[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:47:654[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:47:654[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:47:654[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:47:654[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:47:654[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:47:654[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:47:654[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:654[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:47:654[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:47:654[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:654[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:47:654[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:47:654[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:47:654[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:47:654[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:47:654[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes the same PaymentIntentSucceededEvent twice and issues command only once
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_idem_1757258507506__succeededzTXA0x9LGIMoXGZz5g229

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > processSetupIntentSucceeded - Subscription Upgrade Flow > Edge cases > should handle free subscription with trial period
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > cancelFreeSubscriptionIfExists - Helper Function > should cancel active free subscription
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > cancelFreeSubscriptionIfExists - Helper Function > should return null when no free subscription exists
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > cancelFreeSubscriptionIfExists - Helper Function > should return null when free subscription is already canceled
 ✓ src/utils/bookkeeping/processSetupIntent.upgrade.test.ts > cancelFreeSubscriptionIfExists - Helper Function > should handle multiple free subscriptions by canceling most recent
[90m11:21:47:656[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:47:656[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:47:660[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes the same PaymentIntentSucceededEvent twice and issues command only once
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_idem_1757258507506__succeededzTXA0x9LGIMoXGZz5g229

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes the same PaymentIntentSucceededEvent twice and issues command only once
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_idem_1757258507506__succeededzTXA0x9LGIMoXGZz5g229

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:47:754[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:47:755[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:47:755[0m [34m[fetch][0m emitting the "request" event for 11 listener(s)...
[90m11:21:47:761[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:47:761[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:47:761[0m [34m[fetch][0m request has been handled, returning mock promise...
 ✓ src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes the same PaymentIntentSucceededEvent twice and issues command only once 479ms
 × src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Organization Isolation > should prevent customerA_Org1 from accessing any data in Org2 5890ms
   → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
[90m11:21:48:66[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/charges/ch_1757258507998___failedX0i6fC8SWPxcGnfFAATA9
[90m11:21:48:66[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:48:66[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentPaymentFailed event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_1757258507998___failedX0i6fC8SWPxcGnfFAATA9

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:48:74[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:48:74[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:48:113[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentPaymentFailed event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_1757258507998___failedX0i6fC8SWPxcGnfFAATA9

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentPaymentFailed event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_1757258507998___failedX0i6fC8SWPxcGnfFAATA9

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentPaymentFailed event correctly 350ms
[90m11:21:48:262[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:48:262[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:48:262[0m [34m[fetch][0m emitting the "request" event for 12 listener(s)...
[90m11:21:48:268[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:48:268[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:48:268[0m [34m[fetch][0m request has been handled, returning mock promise...
 ✓ src/utils/bookkeeping.test.ts > createCustomerBookkeeping > customer creation with automatic subscription > should create customer without subscription if no default product exists 1174ms
[90m11:21:48:475[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:48:475[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:48:475[0m [34m[fetch][0m emitting the "request" event for 13 listener(s)...
[90m11:21:48:481[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:48:481[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:48:481[0m [34m[fetch][0m request has been handled, returning mock promise...
[90m11:21:48:587[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/charges/ch_inv_z8VI1Dtjo3kgJpBLX9VG1___failed
[90m11:21:48:587[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:48:587[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentCanceled event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_inv_z8VI1Dtjo3kgJpBLX9VG1___failed

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:48:594[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:48:595[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:48:601[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentCanceled event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_inv_z8VI1Dtjo3kgJpBLX9VG1___failed

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentCanceled event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_inv_z8VI1Dtjo3kgJpBLX9VG1___failed

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentCanceled event correctly 505ms
[90m11:21:48:653[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:48:822[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:48:823[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:48:823[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:48:823[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:48:830[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:48:830[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:48:831[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:48:831[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:48:983[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:48:983[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:48:983[0m [34m[fetch][0m emitting the "request" event for 14 listener(s)...
[90m11:21:48:989[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:48:989[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:48:989[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Organization Isolation > should maintain isolation between different users in different orgs
[selectById] Error selecting customers with id cust_oADgeLV8nhVz3stDINL8T: Error: No customers found with id: cust_oADgeLV8nhVz3stDINL8T
    at selectById [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:138:15[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:676:39
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:110:20
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:661:22
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

[90m11:21:49:83[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/charges/ch_billing_run_j15RUVJkXQTv80H6kmdHF__processing
[90m11:21:49:83[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:49:83[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentProcessing event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_billing_run_j15RUVJkXQTv80H6kmdHF__processing

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:49:122[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:49:122[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:49:126[0m [34m[fetch][0m request has been handled, returning mock promise...
stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentProcessing event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_billing_run_j15RUVJkXQTv80H6kmdHF__processing

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentProcessing event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_billing_run_j15RUVJkXQTv80H6kmdHF__processing

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentProcessing event correctly 523ms
[90m11:21:49:489[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:49:489[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:49:489[0m [34m[fetch][0m emitting the "request" event for 15 listener(s)...
[90m11:21:49:494[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:49:494[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:49:494[0m [34m[fetch][0m request has been handled, returning mock promise...
[90m11:21:49:312[0m [34m[websocket][0m constructing the interceptor...
 ✓ src/utils/bookkeeping.test.ts > createCustomerBookkeeping > customer creation with automatic subscription > should create customer without subscription if no default price exists 1241ms
[90m11:21:49:559[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:49:559[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:49:559[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:49:559[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:49:561[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:49:561[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:49:561[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:49:561[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:49:642[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:49:643[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:49:643[0m [34m[fetch][0m emitting the "request" event for 16 listener(s)...
[90m11:21:49:648[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:49:649[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:49:649[0m [34m[fetch][0m request has been handled, returning mock promise...
[90m11:21:49:728[0m [34m[fetch][0m [GET] https://api.stripe.com/v1/charges/ch_1757258509563___processing
[90m11:21:49:728[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:49:728[0m [34m[fetch][0m emitting the "request" event for 4 listener(s)...
stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentRequiresAction event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_1757258509563___processing

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:49:734[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:49:734[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:49:736[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:49:737[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:49:737[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:49:737[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:49:737[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:49:737[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:49:737[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:49:737[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:49:737[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:49:737[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:49:737[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:49:737[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:49:738[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:49:738[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:49:738[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:49:738[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:49:738[0m [34m[xhr][0m set global instance! xhr
[90m11:21:49:738[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:49:738[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:49:738[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:49:738[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:49:738[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:49:738[0m [34m[fetch][0m set global instance! fetch
[90m11:21:49:738[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:49:738[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:49:739[0m [34m[fetch][0m request has been handled, returning mock promise...
[90m11:21:49:739[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:49:739[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:49:739[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentRequiresAction event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_1757258509563___processing

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

[90m11:21:49:739[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:49:739[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:49:739[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:49:739[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:49:739[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:49:739[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:49:740[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:49:740[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:49:740[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:49:740[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:49:741[0m [34m[websocket][0m set global instance! websocket
[90m11:21:49:741[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:49:741[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:49:741[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:49:741[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:49:741[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:49:741[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:49:741[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:49:741[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:49:741[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:49:742[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:49:742[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:49:742[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:49:742[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:49:742[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:49:742[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:49:742[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:49:742[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:49:742[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:49:742[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:49:742[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:49:742[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:49:742[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:49:742[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:49:742[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:49:742[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:49:743[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:49:743[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:49:743[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:49:743[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:49:743[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:49:743[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:49:743[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:49:743[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:49:743[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:49:743[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:49:743[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:49:743[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:49:743[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:49:743[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:49:743[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:49:744[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:49:744[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:49:744[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:49:744[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:49:744[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:49:744[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:49:744[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:49:744[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:49:744[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:49:744[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:49:744[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:49:744[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:49:744[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:49:744[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:49:744[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:49:744[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:49:745[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:49:745[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:49:745[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:49:745[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:49:745[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:49:745[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:49:745[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:49:745[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:49:745[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:49:745[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:49:745[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:49:745[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:49:745[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:49:745[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:49:745[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:49:745[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:49:745[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:49:745[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:49:745[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:49:745[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:49:745[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:49:745[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:49:745[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:49:745[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:49:745[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:49:745[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:49:745[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:49:745[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:49:745[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:49:745[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:49:745[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:49:745[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:49:745[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:49:745[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:49:745[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:49:746[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:49:746[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:49:746[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:49:746[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:49:746[0m [34m[websocket:apply][0m intercepted already applied!
stderr | src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentRequiresAction event correctly
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://api.stripe.com/v1/charges/ch_1757258509563___processing

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks

 ✓ src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > processes a PaymentIntentRequiresAction event correctly 649ms
[90m11:21:50:150[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:50:150[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:50:150[0m [34m[fetch][0m emitting the "request" event for 17 listener(s)...
[90m11:21:50:156[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:50:156[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:50:156[0m [34m[fetch][0m request has been handled, returning mock promise...
 ✓ src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > throws an error if no invoice is found for the billing period
 ✓ src/db/tableUtils.test.ts > RLS Integration Tests: organizationId integrity on pricingModels > should ALLOW a user to manage pricingModels, products, and prices within their organization 3620ms
[90m11:21:50:399[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:50:399[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:50:399[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:50:399[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:50:399[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:50:399[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:50:399[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:50:399[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:50:399[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:50:399[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:50:399[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:399[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:50:399[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:50:399[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:50:399[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:50:399[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:50:399[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:50:399[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:50:399[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:399[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:50:399[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:50:399[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:50:399[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:50:399[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:50:399[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:50:399[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:50:399[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:399[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:50:399[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:400[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:50:400[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:50:400[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:50:400[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:50:400[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:50:400[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:50:400[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:400[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:50:400[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:50:400[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:50:400[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:50:400[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:50:400[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:50:400[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:50:400[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:50:400[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:400[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:50:400[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:50:400[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:400[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:50:400[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:50:400[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:400[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:400[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:50:400[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:50:400[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:50:400[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:50:400[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:50:400[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:50:401[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:50:401[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:50:401[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:50:401[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:401[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:50:401[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:50:401[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:401[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:50:401[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:50:401[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:401[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:401[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:50:401[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:50:401[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:50:401[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:50:401[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:50:401[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:50:401[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:50:401[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:50:401[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:50:401[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:401[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:50:401[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:50:401[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:401[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:50:401[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:50:401[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:401[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:401[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:50:401[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/subscriptions/processBillingRunPaymentIntents.test.ts > processPaymentIntentEventForBillingRun integration tests > throws an error if no latest charge is found in the event
stdout | src/server/routers/customerBillingPortalRouter.integration.test.ts > Customer Billing Portal Router > getBilling > returns complete billing information without pagination
[9827b0ff] 🟡 TRPC Request: query getBilling {
  requestId: [32m'9827b0ff'[39m,
  type: [32m'query'[39m,
  path: [32m'getBilling'[39m,
  has_input: [33mtrue[39m,
  input: {},
  auth_type: [32m'api_key'[39m
}

[90m11:21:50:657[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:50:657[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:50:657[0m [34m[fetch][0m emitting the "request" event for 18 listener(s)...
[90m11:21:50:662[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:50:663[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:50:663[0m [34m[fetch][0m request has been handled, returning mock promise...
 ✓ src/utils/bookkeeping.test.ts > createCustomerBookkeeping > customer creation with automatic subscription > should handle subscription with trial period correctly 1180ms
[90m11:21:50:755[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:50:756[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:50:756[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:50:756[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:50:756[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:50:756[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:50:756[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:50:756[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:50:756[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:50:756[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:50:756[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:756[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:50:756[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:50:756[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:50:756[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:50:756[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:50:756[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:50:756[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:50:756[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:756[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:50:756[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:50:756[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:50:756[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:50:756[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:50:756[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:50:756[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:50:756[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:756[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:50:756[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:756[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:50:757[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:50:757[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:50:757[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:50:757[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:50:757[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:50:757[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:757[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:50:757[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:50:757[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:50:757[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:50:757[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:50:757[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:50:757[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:50:757[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:50:757[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:757[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:50:757[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:50:757[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:757[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:50:757[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:50:757[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:757[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:757[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:50:757[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:50:757[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:50:757[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:50:757[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:50:757[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:50:757[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:50:757[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:50:757[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:50:757[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:757[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:50:757[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:50:757[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:757[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:50:757[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:50:757[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:757[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:757[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:50:757[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:50:757[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:50:757[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:50:758[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:50:758[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:50:758[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:50:758[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:50:758[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:50:758[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:758[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:50:758[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:50:758[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:758[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:50:758[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:50:758[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:50:758[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:50:758[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:50:758[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/tableUtils.test.ts > RLS Integration Tests: organizationId integrity on pricingModels > should DENY a user from creating a pricingModel for another organization due to RLS 376ms
[90m11:21:50:883[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:50:883[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:50:883[0m [34m[fetch][0m emitting the "request" event for 19 listener(s)...
[90m11:21:50:889[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:50:889[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:50:889[0m [34m[fetch][0m request has been handled, returning mock promise...
[90m11:21:51:390[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:51:390[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:51:390[0m [34m[fetch][0m emitting the "request" event for 20 listener(s)...
[90m11:21:51:395[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:51:396[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:51:396[0m [34m[fetch][0m request has been handled, returning mock promise...
[90m11:21:51:898[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:51:898[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:51:898[0m [34m[fetch][0m emitting the "request" event for 21 listener(s)...
[90m11:21:51:903[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:51:903[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:51:903[0m [34m[fetch][0m request has been handled, returning mock promise...
 ✓ src/utils/bookkeeping.test.ts > createCustomerBookkeeping > customer creation with automatic subscription > should create customer without subscription when no pricing model exists at all 1212ms
[90m11:21:51:988[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:51:988[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:51:988[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:51:988[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:51:990[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:51:991[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:51:991[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:51:991[0m [34m[setup-server][0m constructing the interceptor...
stderr | src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Organization Isolation > should maintain isolation between different users in different orgs
[createUpdateFunction] Error updating subscriptions with id sub_o9HJ72Mtsbng7Ke6ZXMBA: Error: No subscriptions found with id: sub_o9HJ72Mtsbng7Ke6ZXMBA
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:291:17
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:628:32
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:110:20
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:622:29
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

 ✓ src/utils/bookkeeping.test.ts > createCustomerBookkeeping > customer creation with automatic subscription > should prevent cross-organization customer creation
[90m11:21:52:164[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:52:164[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:52:164[0m [34m[fetch][0m emitting the "request" event for 22 listener(s)...
[90m11:21:52:169[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:52:169[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:52:169[0m [34m[fetch][0m request has been handled, returning mock promise...
[90m11:21:52:671[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:52:671[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:52:671[0m [34m[fetch][0m emitting the "request" event for 23 listener(s)...
[90m11:21:52:676[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:52:676[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:52:676[0m [34m[fetch][0m request has been handled, returning mock promise...
[90m11:21:53:21[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:53:156[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:53:156[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:53:156[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:53:156[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:53:160[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:53:160[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:53:160[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:53:160[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:53:178[0m [34m[fetch][0m [POST] https://api.stripe.com/v1/customers
[90m11:21:53:178[0m [34m[fetch][0m awaiting for the mocked response...
[90m11:21:53:178[0m [34m[fetch][0m emitting the "request" event for 24 listener(s)...
[90m11:21:53:183[0m [34m[fetch][0m received mocked response! {"rawResponse":{}}
[90m11:21:53:183[0m [34m[fetch][0m emitting the "response" event...
[90m11:21:53:183[0m [34m[fetch][0m request has been handled, returning mock promise...
 ✓ src/utils/bookkeeping.test.ts > createCustomerBookkeeping > customer creation with automatic subscription > should properly set subscription metadata and name 1175ms
 ✓ src/utils/bookkeeping.test.ts > createPricingModelBookkeeping > pricing model creation with automatic default product > should create a pricing model with a default product and price
 ✓ src/utils/bookkeeping.test.ts > createPricingModelBookkeeping > pricing model creation with automatic default product > should create a non-default pricing model with default product
[90m11:21:53:361[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:53:361[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:53:361[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:53:361[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:53:361[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:53:361[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:53:361[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:53:361[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:53:361[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:53:361[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:53:361[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:53:361[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:53:361[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:53:361[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:53:361[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:53:361[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:53:361[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:53:361[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:53:361[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:53:361[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:53:361[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:53:362[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:53:362[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:53:362[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:53:362[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:53:362[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:53:362[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:53:362[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:53:362[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:53:362[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:53:362[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:53:362[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:53:362[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:53:362[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:53:362[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:53:362[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:53:362[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:53:362[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:53:362[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:53:362[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:53:362[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:53:362[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:53:362[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:53:362[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:53:362[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:53:362[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:53:362[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:53:362[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:53:362[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:53:362[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:53:362[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:53:362[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:53:362[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:53:362[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:53:363[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:53:363[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:53:363[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:53:363[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:53:363[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:53:363[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:53:363[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:53:363[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:53:363[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:53:363[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:53:363[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:53:363[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:53:363[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:53:363[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:53:363[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:53:363[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:53:363[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:53:363[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:53:363[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:53:363[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:53:363[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:53:363[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:53:363[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:53:363[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:53:363[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:53:363[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:53:363[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:53:363[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:53:363[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:53:363[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:53:363[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:53:363[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:53:363[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:53:363[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/utils/bookkeeping.test.ts > createPricingModelBookkeeping > pricing model creation with automatic default product > should use organization default currency for the default price
 × src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Organization Isolation > should maintain isolation between different users in different orgs 5699ms
   → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
[90m11:21:53:646[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:53:827[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:53:827[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:53:827[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:53:827[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:53:834[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:53:834[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:53:834[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:53:834[0m [34m[setup-server][0m constructing the interceptor...
stderr | src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Organization Isolation > should prevent customerD_Org2 from accessing any Org1 data
[selectById] Error selecting customers with id cust_yyYHtdYfXv1Hdg5wdiIjI: Error: No customers found with id: cust_yyYHtdYfXv1Hdg5wdiIjI
    at selectById [90m(/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/tableUtils.ts:138:15[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:791:39
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:110:20
    at scope [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:259:18[90m)[39m
    at Function.begin [90m(file:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/postgres@3.4.5/node_modules/[4mpostgres[24m/src/index.js:242:14[90m)[39m
    at [90m/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39msrc/db/customerRLS.test.ts:779:22
    at [90mfile:///Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/[39mnode_modules/[4m.pnpm[24m/@vitest+runner@3.0.5/node_modules/[4m@vitest[24m/runner/dist/index.js:561:22

[90m11:21:54:675[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:54:676[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:54:676[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:54:676[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:54:678[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:54:678[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:54:678[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:54:678[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:54:701[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:54:701[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:54:701[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:54:702[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:54:702[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:54:702[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:54:702[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:54:702[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:54:702[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:54:702[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:54:702[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:54:702[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:54:702[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:54:702[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:54:702[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:54:702[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:54:703[0m [34m[xhr][0m set global instance! xhr
[90m11:21:54:703[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:54:703[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:54:703[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:54:703[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:54:703[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:54:703[0m [34m[fetch][0m set global instance! fetch
[90m11:21:54:703[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:54:703[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:54:703[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:54:703[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:54:703[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:54:703[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:54:703[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:54:703[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:54:703[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:54:703[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:54:703[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:54:704[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:54:704[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:54:704[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:54:704[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:54:704[0m [34m[websocket][0m set global instance! websocket
[90m11:21:54:704[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:54:704[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:54:704[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:54:704[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:54:704[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:54:704[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:54:704[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:54:704[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:54:704[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:54:704[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:54:704[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:54:704[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:54:704[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:54:704[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:54:704[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:54:704[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:54:704[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:54:704[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:54:704[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:54:704[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:54:704[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:54:705[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:54:705[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:54:705[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:54:705[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:54:705[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:54:705[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:54:705[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:54:705[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:54:705[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:54:705[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:54:705[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:54:705[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:54:705[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:54:705[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:54:705[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:54:705[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:54:705[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:54:705[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:54:705[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:54:705[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:54:705[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:54:705[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:54:705[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:54:705[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:54:705[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:54:705[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:54:705[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:54:705[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:54:705[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:54:705[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:54:705[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:54:705[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:54:705[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:54:705[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:54:705[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:54:705[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:54:705[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:54:705[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:54:705[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:54:705[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:54:706[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:54:706[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:54:706[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:54:706[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:54:706[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:54:706[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:54:706[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:54:706[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:54:706[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:54:706[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:54:706[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:54:706[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:54:706[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:54:706[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:54:706[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:54:706[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:54:706[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:54:706[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:54:706[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:54:706[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:54:706[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:54:706[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:54:706[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:54:706[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:54:706[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:54:706[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:54:706[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:54:706[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:54:706[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:54:706[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:54:706[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:54:706[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:54:706[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:54:706[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:54:706[0m [34m[websocket:apply][0m intercepted already applied!
 ✓ src/db/tableMethods/billingPeriodItemMethods.test.ts > selectBillingPeriodsWithItemsAndSubscriptionForDateRange > should return empty array if no billing periods found
 ✓ src/db/tableMethods/billingPeriodItemMethods.test.ts > selectBillingPeriodsWithItemsAndSubscriptionForDateRange > should correctly retrieve billing periods that overlap with the date range 436ms
 ✓ src/db/tableMethods/billingPeriodItemMethods.test.ts > selectBillingPeriodsWithItemsAndSubscriptionForDateRange > should not return billing periods that do not overlap with the date range 436ms
 ✓ src/db/tableMethods/billingPeriodItemMethods.test.ts > selectBillingPeriodsWithItemsAndSubscriptionForDateRange > should handle billing periods that partially overlap with the date range 346ms
[90m11:21:56:400[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:56:400[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:56:400[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:56:400[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:56:401[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:56:401[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:56:401[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:56:401[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:21:56:401[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:21:56:401[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:56:401[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:56:401[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:56:401[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:56:401[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:21:56:401[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:21:56:401[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:21:56:401[0m [34m[xhr][0m set global instance! xhr
[90m11:21:56:401[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:56:401[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:56:401[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:56:307[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:56:402[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:56:422[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:21:56:422[0m [34m[fetch][0m set global instance! fetch
[90m11:21:56:422[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:56:422[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:56:422[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:56:423[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:56:423[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:21:56:423[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:56:423[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:56:423[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:21:56:423[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:56:423[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:56:423[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:21:56:423[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:56:424[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:56:424[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:21:56:424[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:21:56:424[0m [34m[websocket][0m set global instance! websocket
[90m11:21:56:424[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:56:424[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:56:424[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:56:424[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:56:424[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:56:424[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:56:424[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:56:424[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:56:424[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:56:424[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:56:424[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:56:424[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:56:424[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:56:424[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:56:424[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:56:424[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:56:424[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:56:424[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:56:424[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:56:424[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:56:424[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:56:425[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:56:425[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:56:425[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:56:425[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:56:425[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:56:425[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:56:425[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:56:425[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:56:425[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:56:425[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:56:425[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:56:425[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:56:425[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:56:425[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:56:425[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:56:425[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:56:425[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:56:425[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:56:425[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:56:425[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:56:425[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:56:425[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:56:425[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:56:425[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:56:425[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:56:425[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:56:425[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:56:425[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:56:425[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:56:425[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:56:425[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:56:425[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:56:425[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:56:425[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:56:426[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:56:426[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:56:426[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:56:426[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:56:426[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:56:426[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:56:426[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:56:426[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:56:426[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:56:426[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:21:56:426[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:21:56:426[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:21:56:426[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:21:56:426[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:21:56:426[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:21:56:426[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:56:426[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:21:56:426[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:56:426[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:21:56:426[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:21:56:426[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:56:426[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:21:56:426[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:56:426[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:21:56:426[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:21:56:426[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:56:426[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:21:56:426[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:21:56:426[0m [34m[setup-server][0m set global instance! setup-server
[90m11:21:56:426[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:21:56:426[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:21:56:426[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:21:56:426[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:21:56:426[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:21:56:426[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:21:56:426[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:21:56:426[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:21:56:426[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:21:56:426[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:21:56:426[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:21:56:426[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:21:56:446[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:56:446[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:56:446[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:56:446[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:56:448[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:56:448[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:56:448[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:56:448[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:56:383[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:56:550[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:56:550[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:56:550[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:56:550[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:56:577[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:56:577[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:56:577[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:56:577[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/db/tableMethods/billingPeriodItemMethods.test.ts > selectBillingPeriodsWithItemsAndSubscriptionForDateRange > should handle billing periods that completely contain the date range
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > cancelSubscriptionImmediately > should cancel an active subscription and update billing periods 479ms
 ✓ src/db/tableMethods/billingPeriodItemMethods.test.ts > selectBillingPeriodsWithItemsAndSubscriptionForDateRange > should handle multiple billing periods that overlap with the date range 322ms
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > cancelSubscriptionImmediately > should not modify a subscription already in a terminal state
 ✓ src/db/tableMethods/billingPeriodItemMethods.test.ts > selectBillingPeriodsWithItemsAndSubscriptionForDateRange > should handle billing periods with multiple items 353ms
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > cancelSubscriptionImmediately > should throw an error if the cancellation date is before the subscription start date
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > cancelSubscriptionImmediately > should handle subscriptions with no billing periods gracefully
 ✓ src/db/tableMethods/billingPeriodItemMethods.test.ts > selectBillingPeriodsWithItemsAndSubscriptionForDateRange > should handle billing periods with different subscription intervals 380ms
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > cancelSubscriptionImmediately > should correctly handle boundary conditions for billing period dates 301ms
[90m11:21:58:49[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:58:49[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:58:49[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:58:49[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:58:49[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:58:49[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:58:49[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:21:58:49[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:21:58:49[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:21:58:49[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:21:58:49[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:21:58:49[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:21:58:49[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:58:49[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:21:58:49[0m [34m[xhr][0m cleared global instance! xhr
[90m11:21:58:50[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:21:58:50[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:21:58:50[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:21:58:50[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:21:58:50[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:21:58:50[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:58:50[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:21:58:50[0m [34m[fetch][0m cleared global instance! fetch
[90m11:21:58:50[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:21:58:50[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:21:58:50[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:21:58:50[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:21:58:50[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:21:58:50[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:58:50[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:58:50[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:21:58:50[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:21:58:50[0m [34m[websocket][0m cleared global instance! websocket
[90m11:21:58:50[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:21:58:50[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:21:58:50[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:21:58:50[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:21:58:50[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:58:50[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:58:50[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:58:50[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:58:50[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:58:50[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:58:51[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:58:51[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:58:51[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:58:51[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:58:51[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:58:51[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:58:51[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:58:51[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:58:51[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:58:51[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:58:51[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:58:51[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:58:51[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:58:51[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:58:51[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:58:51[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:58:51[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:58:51[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:58:51[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:58:51[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:58:51[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:58:51[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:58:51[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:58:51[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:58:51[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:58:51[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:58:51[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:58:51[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:21:58:51[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:21:58:51[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:21:58:51[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:21:58:51[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:21:58:51[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:21:58:51[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:21:58:51[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:21:58:51[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:21:58:51[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:21:58:51[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:21:58:51[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:21:58:51[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:21:58:51[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:21:58:51[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:21:58:51[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:21:58:51[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:21:58:51[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/db/tableMethods/billingPeriodItemMethods.test.ts > selectBillingPeriodsWithItemsAndSubscriptionForDateRange > should handle billing periods with different statuses 336ms
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > scheduleSubscriptionCancellation > should schedule cancellation at the end of the current billing period 388ms
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > scheduleSubscriptionCancellation > should schedule cancellation at a specified future date 385ms
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > scheduleSubscriptionCancellation > should make no update if the subscription is already in a terminal state
[90m11:21:58:895[0m [34m[websocket][0m constructing the interceptor...
[90m11:21:59:45[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:59:46[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:59:46[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:59:46[0m [34m[setup-server][0m constructing the interceptor...
[90m11:21:59:48[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:21:59:48[0m [34m[xhr][0m constructing the interceptor...
[90m11:21:59:48[0m [34m[fetch][0m constructing the interceptor...
[90m11:21:59:48[0m [34m[setup-server][0m constructing the interceptor...
 × src/db/customerRLS.test.ts > Customer Role RLS Policies > Cross-Organization Isolation > should prevent customerD_Org2 from accessing any Org1 data 5451ms
   → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > scheduleSubscriptionCancellation > should throw an error if no current billing period exists for `AtEndOfCurrentBillingPeriod` 343ms
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > scheduleSubscriptionCancellation > should throw an error if the cancellation date is before the subscription start date
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > scheduleSubscriptionCancellation > should handle boundary conditions for billing period dates correctly 303ms
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > Edge Cases and Error Handling > should handle subscriptions with no billing periods gracefully 330ms
 × src/server/routers/customerBillingPortalRouter.integration.test.ts > Customer Billing Portal Router > getBilling > returns complete billing information without pagination 10626ms
   → Test timed out in 10000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > Edge Cases and Error Handling > should handle overlapping billing periods correctly 399ms
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > Edge Cases and Error Handling > should handle concurrent cancellation requests without data inconsistencies 397ms
stdout | src/server/routers/customerBillingPortalRouter.integration.test.ts > Customer Billing Portal Router > getBilling > returns paginated billing data when pagination parameters provided
[4230b5de] 🟡 TRPC Request: query getBilling {
  requestId: [32m'4230b5de'[39m,
  type: [32m'query'[39m,
  path: [32m'getBilling'[39m,
  has_input: [33mtrue[39m,
  input: { invoicePagination: { page: [33m1[39m, pageSize: [33m2[39m } },
  auth_type: [32m'api_key'[39m
}

 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > Edge Cases and Error Handling > should throw an error for invalid subscription input
[90m11:22:01:221[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:22:01:221[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:22:01:221[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:22:01:221[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:22:01:221[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:22:01:221[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:22:01:221[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:22:01:221[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:22:01:221[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:22:01:221[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:22:01:221[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:22:01:221[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:22:01:221[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:22:01:221[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:22:01:221[0m [34m[xhr][0m cleared global instance! xhr
[90m11:22:01:221[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:22:01:221[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:22:01:221[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:22:01:221[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:22:01:221[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:22:01:221[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:22:01:221[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:22:01:221[0m [34m[fetch][0m cleared global instance! fetch
[90m11:22:01:221[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:22:01:221[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:22:01:222[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:22:01:222[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:22:01:222[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:22:01:222[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:22:01:222[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:22:01:222[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:22:01:222[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:22:01:222[0m [34m[websocket][0m cleared global instance! websocket
[90m11:22:01:222[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:22:01:222[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:22:01:222[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:22:01:222[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:22:01:222[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:22:01:222[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:22:01:222[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:22:01:222[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:22:01:222[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:22:01:222[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:22:01:222[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:22:01:222[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:22:01:222[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:22:01:222[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:22:01:222[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:22:01:222[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:22:01:222[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:22:01:222[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:22:01:222[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:22:01:222[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:22:01:222[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:22:01:222[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:22:01:222[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:22:01:222[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:22:01:222[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:22:01:222[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:22:01:222[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:22:01:222[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:22:01:222[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:22:01:222[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:22:01:222[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:22:01:222[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:22:01:222[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:22:01:222[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:22:01:222[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:22:01:223[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:22:01:223[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:22:01:223[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:22:01:223[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:22:01:223[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:22:01:223[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:22:01:223[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:22:01:223[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:22:01:223[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:22:01:223[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:22:01:223[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:22:01:223[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:22:01:223[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:22:01:223[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:22:01:223[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:22:01:223[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:22:01:223[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:22:01:223[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:22:01:223[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:22:01:223[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/subscriptions/cancelSubscription.test.ts > Subscription Cancellation Test Suite > Integration Tests (Partial Scope) > should integrate correctly with subscription lifecycle operations
[90m11:22:03:69[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:22:03:69[0m [34m[xhr][0m constructing the interceptor...
[90m11:22:03:69[0m [34m[fetch][0m constructing the interceptor...
[90m11:22:03:69[0m [34m[setup-server][0m constructing the interceptor...
[90m11:22:03:72[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:22:03:72[0m [34m[xhr][0m constructing the interceptor...
[90m11:22:03:72[0m [34m[fetch][0m constructing the interceptor...
[90m11:22:03:72[0m [34m[setup-server][0m constructing the interceptor...
[90m11:22:03:99[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:22:03:99[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:22:03:99[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:22:03:99[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:22:03:99[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:22:03:99[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:22:03:99[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:22:03:99[0m [34m[client-request-interceptor:apply][0m no running instance found, setting up a new instance...
[90m11:22:03:99[0m [34m[client-request-interceptor][0m set global instance! client-request-interceptor
[90m11:22:03:99[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:22:03:99[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:22:03:100[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:22:03:100[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:22:03:100[0m [34m[xhr:apply][0m no running instance found, setting up a new instance...
[90m11:22:03:100[0m [34m[xhr:setup][0m patching "XMLHttpRequest" module...
[90m11:22:03:100[0m [34m[xhr:setup][0m native "XMLHttpRequest" module patched! XMLHttpRequest
[90m11:22:03:100[0m [34m[xhr][0m set global instance! xhr
[90m11:22:03:100[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:22:03:100[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:22:03:100[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:22:03:100[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:22:03:100[0m [34m[fetch:apply][0m no running instance found, setting up a new instance...
[90m11:22:03:100[0m [34m[fetch][0m set global instance! fetch
[90m11:22:03:100[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:22:03:100[0m [34m[setup-server][0m set global instance! setup-server
[90m11:22:03:101[0m [34m[client-request-interceptor:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:22:03:101[0m [34m[xhr:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:22:03:101[0m [34m[fetch:on][0m adding "request" event listener: async ({ request, requestId, controller }) => {
        const response = await handleRequest(
          request,
          requestId,
          this.handlersController.currentHandlers().filter(isHandlerKind("RequestHandler")),
          this.resolvedOptions,
          this.emitter,
          {
            onPassthroughResponse(request2) {
              const acceptHeader = request2.headers.get("accept");
              if (acceptHeader) {
                const nextAcceptHeader = acceptHeader.replace(
                  /(,\s+)?msw\/passthrough/,
                  ""
                );
                if (nextAcceptHeader) {
                  request2.headers.set("accept", nextAcceptHeader);
                } else {
                  request2.headers.delete("accept");
                }
              }
            }
          }
        );
        if (response) {
          controller.respondWith(response);
        }
        return;
      }
[90m11:22:03:101[0m [34m[client-request-interceptor:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:22:03:101[0m [34m[xhr:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:22:03:101[0m [34m[fetch:on][0m adding "unhandledException" event listener: ({ error }) => {
      if (error instanceof InternalError) {
        throw error;
      }
    }
[90m11:22:03:101[0m [34m[client-request-interceptor:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:22:03:101[0m [34m[xhr:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:22:03:101[0m [34m[fetch:on][0m adding "response" event listener: ({ response, isMockedResponse, request, requestId }) => {
        this.emitter.emit(
          isMockedResponse ? "response:mocked" : "response:bypass",
          {
            response,
            request,
            requestId
          }
        );
      }
[90m11:22:03:101[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:22:03:101[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:22:03:101[0m [34m[websocket][0m retrieved global instance: undefined
[90m11:22:03:101[0m [34m[websocket:apply][0m no running instance found, setting up a new instance...
[90m11:22:03:102[0m [34m[websocket][0m set global instance! websocket
[90m11:22:03:102[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:22:03:102[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:22:03:102[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:22:03:102[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:22:03:102[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:22:03:102[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:22:03:102[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:22:03:102[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:22:03:102[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:22:03:102[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:22:03:102[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:22:03:102[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:22:03:102[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:22:03:102[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:22:03:102[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:22:03:102[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:22:03:102[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:22:03:102[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:22:03:102[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:22:03:102[0m [34m[setup-server][0m set global instance! setup-server
[90m11:22:03:102[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:22:03:102[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:22:03:102[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:22:03:102[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:22:03:102[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:22:03:102[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:22:03:102[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:22:03:102[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:22:03:102[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:22:03:102[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:22:03:102[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:22:03:102[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:22:03:102[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:22:03:102[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:22:03:102[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:22:03:102[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:22:03:102[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:22:03:102[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:22:03:102[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:22:03:102[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:22:03:102[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:22:03:103[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:22:03:103[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:22:03:103[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:22:03:103[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:22:03:103[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:22:03:103[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:22:03:103[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:22:03:103[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:22:03:103[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:22:03:103[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:22:03:103[0m [34m[setup-server][0m set global instance! setup-server
[90m11:22:03:103[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:22:03:103[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:22:03:103[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:22:03:103[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:22:03:103[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:22:03:103[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:22:03:103[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:22:03:103[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:22:03:103[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:22:03:103[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:22:03:103[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:22:03:103[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:22:03:103[0m [34m[setup-server:apply][0m applying the interceptor...
[90m11:22:03:103[0m [34m[setup-server][0m retrieved global instance: undefined
[90m11:22:03:103[0m [34m[setup-server:apply][0m no running instance found, setting up a new instance...
[90m11:22:03:103[0m [34m[setup-server:setup][0m applying all 3 interceptors...
[90m11:22:03:103[0m [34m[setup-server:setup][0m applying "_ClientRequestInterceptor" interceptor...
[90m11:22:03:103[0m [34m[client-request-interceptor:apply][0m applying the interceptor...
[90m11:22:03:103[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:22:03:103[0m [34m[client-request-interceptor:apply][0m found a running instance, reusing...
[90m11:22:03:103[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:22:03:103[0m [34m[setup-server:setup][0m applying "_XMLHttpRequestInterceptor" interceptor...
[90m11:22:03:103[0m [34m[xhr:apply][0m applying the interceptor...
[90m11:22:03:103[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:22:03:103[0m [34m[xhr:apply][0m found a running instance, reusing...
[90m11:22:03:103[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:22:03:103[0m [34m[setup-server:setup][0m applying "_FetchInterceptor" interceptor...
[90m11:22:03:103[0m [34m[fetch:apply][0m applying the interceptor...
[90m11:22:03:103[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:22:03:103[0m [34m[fetch:apply][0m found a running instance, reusing...
[90m11:22:03:103[0m [34m[setup-server:setup][0m adding interceptor dispose subscription
[90m11:22:03:103[0m [34m[setup-server][0m set global instance! setup-server
[90m11:22:03:103[0m [34m[client-request-interceptor:apply][0m proxying the "request" listener
[90m11:22:03:103[0m [34m[xhr:apply][0m proxying the "request" listener
[90m11:22:03:103[0m [34m[fetch:apply][0m proxying the "request" listener
[90m11:22:03:103[0m [34m[client-request-interceptor:apply][0m proxying the "unhandledException" listener
[90m11:22:03:103[0m [34m[xhr:apply][0m proxying the "unhandledException" listener
[90m11:22:03:103[0m [34m[fetch:apply][0m proxying the "unhandledException" listener
[90m11:22:03:103[0m [34m[client-request-interceptor:apply][0m proxying the "response" listener
[90m11:22:03:103[0m [34m[xhr:apply][0m proxying the "response" listener
[90m11:22:03:103[0m [34m[fetch:apply][0m proxying the "response" listener
[90m11:22:03:103[0m [34m[websocket:on][0m adding "connection" event listener: async (connection) => {
    const handlers = options.getHandlers();
    const connectionEvent = new MessageEvent("connection", {
      data: connection
    });
    const matchingHandlers = [];
    for (const handler of handlers) {
      if (isHandlerKind("EventHandler")(handler) && handler.predicate({
        event: connectionEvent,
        parsedResult: handler.parse({
          event: connectionEvent
        })
      })) {
        matchingHandlers.push(handler);
      }
    }
    if (matchingHandlers.length > 0) {
      options?.onMockedConnection(connection);
      for (const handler of matchingHandlers) {
        handler[kDispatchEvent](connectionEvent);
      }
    } else {
      const request = new Request(connection.client.url, {
        headers: {
          upgrade: "websocket",
          connection: "upgrade"
        }
      });
      await onUnhandledRequest(
        request,
        options.getUnhandledRequestStrategy()
      ).catch((error) => {
        const errorEvent = new Event("error");
        Object.defineProperty(errorEvent, "cause", {
          enumerable: true,
          configurable: false,
          value: error
        });
        connection.client.socket.dispatchEvent(errorEvent);
      });
      options?.onPassthroughConnection(connection);
      connection.server.connect();
    }
  }
[90m11:22:03:103[0m [34m[websocket:apply][0m applying the interceptor...
[90m11:22:03:103[0m [34m[websocket:apply][0m intercepted already applied!
[90m11:22:03:838[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:22:03:838[0m [34m[xhr][0m constructing the interceptor...
[90m11:22:03:838[0m [34m[fetch][0m constructing the interceptor...
[90m11:22:03:838[0m [34m[setup-server][0m constructing the interceptor...
[90m11:22:03:841[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:22:03:841[0m [34m[xhr][0m constructing the interceptor...
[90m11:22:03:841[0m [34m[fetch][0m constructing the interceptor...
[90m11:22:03:841[0m [34m[setup-server][0m constructing the interceptor...
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/index.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/utils/index.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/adapters/index.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/generator/index.mjs" points to missing source files
 ✓ src/utils/bookkeeping/discountRedemptionTracking.test.ts > Discount Redemption Tracking > incrementNumberOfPaymentsForDiscountRedemption > should increment numberOfPaymentsMade when numberOfPayments is not set 632ms
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/utils/method.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/utils/path.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/utils/procedure.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/utils/zod.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/adapters/express.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/adapters/next.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/adapters/standalone.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/adapters/nuxt.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/adapters/fastify.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/adapters/fetch.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/adapters/node-http/index.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/adapters/koa.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/generator/paths.mjs" points to missing source files
 ✓ src/utils/bookkeeping/discountRedemptionTracking.test.ts > Discount Redemption Tracking > incrementNumberOfPaymentsForDiscountRedemption > does not mark as fully redeemed when payment is the first successful payment
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/adapters/node-http/core.mjs" points to missing source files
[90m11:22:04:133[0m [34m[websocket][0m constructing the interceptor...
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/adapters/node-http/errors.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/generator/schema.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/adapters/node-http/input.mjs" points to missing source files
Sourcemap for "/Users/brooksflannery/Documents/github/flowglad/.conductor/BrooksFlannery-maputo/platform/flowglad-next/node_modules/.pnpm/trpc-to-openapi@3.0.1_@trpc+server@11.5.0_typescript@5.5.4__zod-openapi@5.4.0_zod@4.1.5__zod@4.1.5/node_modules/trpc-to-openapi/dist/esm/adapters/node-http/procedures.mjs" points to missing source files
[90m11:22:04:251[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:22:04:251[0m [34m[xhr][0m constructing the interceptor...
[90m11:22:04:251[0m [34m[fetch][0m constructing the interceptor...
[90m11:22:04:251[0m [34m[setup-server][0m constructing the interceptor...
[90m11:22:04:315[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:22:04:316[0m [34m[xhr][0m constructing the interceptor...
[90m11:22:04:316[0m [34m[fetch][0m constructing the interceptor...
[90m11:22:04:316[0m [34m[setup-server][0m constructing the interceptor...
 ✓ src/utils/bookkeeping/discountRedemptionTracking.test.ts > Discount Redemption Tracking > incrementNumberOfPaymentsForDiscountRedemption > marks as fully redeemed when payment is the last payment needed 312ms
 ✓ src/utils/bookkeeping/discountRedemptionTracking.test.ts > Discount Redemption Tracking > incrementNumberOfPaymentsForDiscountRedemption > marks as fully redeemed when payment is beyond the required number
 ✓ src/utils/bookkeeping/discountRedemptionTracking.test.ts > Discount Redemption Tracking > safelyIncrementDiscountRedemptionSubscriptionPayment > returns early when discount redemption is already fully redeemed
 ✓ src/utils/bookkeeping/discountRedemptionTracking.test.ts > Discount Redemption Tracking > safelyIncrementDiscountRedemptionSubscriptionPayment > returns early when discount duration is Forever
 × src/db/customerRLS.test.ts > Customer Role RLS Policies > Query Filtering and Aggregation > should filter queries with WHERE conditions correctly 6211ms
   → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ✓ src/utils/bookkeeping/discountRedemptionTracking.test.ts > Discount Redemption Tracking > safelyIncrementDiscountRedemptionSubscriptionPayment > marks as fully redeemed when discount duration is Once 364ms
[90m11:22:05:855[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:22:05:855[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:22:05:855[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:22:05:855[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:22:05:855[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:22:05:855[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:22:05:856[0m [34m[client-request-interceptor][0m retrieved global instance: _ClientRequestInterceptor
[90m11:22:05:856[0m [34m[client-request-interceptor][0m cleared global instance! client-request-interceptor
[90m11:22:05:856[0m [34m[client-request-interceptor:dispose][0m global symbol deleted: undefined
[90m11:22:05:856[0m [34m[client-request-interceptor:dispose][0m disposing of 1 subscriptions...
[90m11:22:05:856[0m [34m[client-request-interceptor:dispose][0m disposed of all subscriptions! 0
[90m11:22:05:856[0m [34m[client-request-interceptor:dispose][0m destroyed the listener!
[90m11:22:05:856[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:22:05:856[0m [34m[xhr][0m retrieved global instance: _XMLHttpRequestInterceptor
[90m11:22:05:856[0m [34m[xhr][0m cleared global instance! xhr
[90m11:22:05:856[0m [34m[xhr:dispose][0m global symbol deleted: undefined
[90m11:22:05:856[0m [34m[xhr:dispose][0m disposing of 1 subscriptions...
[90m11:22:05:856[0m [34m[xhr:setup][0m native "XMLHttpRequest" module restored! XMLHttpRequest
[90m11:22:05:856[0m [34m[xhr:dispose][0m disposed of all subscriptions! 0
[90m11:22:05:856[0m [34m[xhr:dispose][0m destroyed the listener!
[90m11:22:05:856[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:22:05:856[0m [34m[fetch][0m retrieved global instance: _FetchInterceptor
[90m11:22:05:856[0m [34m[fetch][0m cleared global instance! fetch
[90m11:22:05:856[0m [34m[fetch:dispose][0m global symbol deleted: undefined
[90m11:22:05:856[0m [34m[fetch:dispose][0m disposing of 1 subscriptions...
[90m11:22:05:856[0m [34m[fetch][0m restored native "globalThis.fetch"! fetch
[90m11:22:05:856[0m [34m[fetch:dispose][0m disposed of all subscriptions! 0
[90m11:22:05:856[0m [34m[fetch:dispose][0m destroyed the listener!
[90m11:22:05:856[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:22:05:856[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:22:05:856[0m [34m[websocket:dispose][0m disposing the interceptor...
[90m11:22:05:856[0m [34m[websocket][0m retrieved global instance: _WebSocketInterceptor
[90m11:22:05:857[0m [34m[websocket][0m cleared global instance! websocket
[90m11:22:05:857[0m [34m[websocket:dispose][0m global symbol deleted: undefined
[90m11:22:05:857[0m [34m[websocket:dispose][0m disposing of 1 subscriptions...
[90m11:22:05:857[0m [34m[websocket:dispose][0m disposed of all subscriptions! 0
[90m11:22:05:857[0m [34m[websocket:dispose][0m destroyed the listener!
[90m11:22:05:857[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:22:05:857[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:22:05:857[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:22:05:857[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:22:05:857[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:22:05:857[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:22:05:857[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:22:05:857[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:22:05:857[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:22:05:857[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:22:05:857[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:22:05:857[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:22:05:857[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:22:05:857[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:22:05:857[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:22:05:857[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:22:05:857[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:22:05:857[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:22:05:857[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:22:05:857[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:22:05:857[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:22:05:857[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:22:05:857[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:22:05:857[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:22:05:857[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:22:05:857[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:22:05:857[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:22:05:857[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:22:05:857[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:22:05:857[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:22:05:857[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:22:05:857[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:22:05:857[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:22:05:857[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
[90m11:22:05:857[0m [34m[setup-server:dispose][0m disposing the interceptor...
[90m11:22:05:857[0m [34m[setup-server][0m retrieved global instance: BatchInterceptor
[90m11:22:05:858[0m [34m[setup-server][0m cleared global instance! setup-server
[90m11:22:05:858[0m [34m[setup-server:dispose][0m global symbol deleted: undefined
[90m11:22:05:858[0m [34m[setup-server:dispose][0m disposing of 3 subscriptions...
[90m11:22:05:858[0m [34m[client-request-interceptor:dispose][0m disposing the interceptor...
[90m11:22:05:858[0m [34m[client-request-interceptor][0m retrieved global instance: undefined
[90m11:22:05:858[0m [34m[client-request-interceptor:dispose][0m no interceptors running, skipping dispose...
[90m11:22:05:858[0m [34m[xhr:dispose][0m disposing the interceptor...
[90m11:22:05:858[0m [34m[xhr][0m retrieved global instance: undefined
[90m11:22:05:858[0m [34m[xhr:dispose][0m no interceptors running, skipping dispose...
[90m11:22:05:858[0m [34m[fetch:dispose][0m disposing the interceptor...
[90m11:22:05:858[0m [34m[fetch][0m retrieved global instance: undefined
[90m11:22:05:858[0m [34m[fetch:dispose][0m no interceptors running, skipping dispose...
[90m11:22:05:858[0m [34m[setup-server:dispose][0m disposed of all subscriptions! 0
[90m11:22:05:858[0m [34m[setup-server:dispose][0m destroyed the listener!
[90m11:22:05:858[0m [34m[websocket:dispose][0m cannot dispose, already disposed!
 ✓ src/utils/bookkeeping/discountRedemptionTracking.test.ts > Discount Redemption Tracking > safelyIncrementDiscountRedemptionSubscriptionPayment > increments number of payments when discount duration is NumberOfPayments 360ms
[90m11:22:08:274[0m [34m[websocket][0m constructing the interceptor...
[90m11:22:08:431[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:22:08:432[0m [34m[xhr][0m constructing the interceptor...
[90m11:22:08:432[0m [34m[fetch][0m constructing the interceptor...
[90m11:22:08:432[0m [34m[setup-server][0m constructing the interceptor...
[90m11:22:08:435[0m [34m[client-request-interceptor][0m constructing the interceptor...
[90m11:22:08:436[0m [34m[xhr][0m constructing the interceptor...
[90m11:22:08:436[0m [34m[fetch][0m constructing the interceptor...
[90m11:22:08:436[0m [34m[setup-server][0m constructing the interceptor...
