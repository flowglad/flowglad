You are creating a new trigger.dev task. Follow these instructions carefully:

1. Import required dependencies:
- Always import { logger, task } from '@trigger.dev/sdk/v3'
- Import any additional dependencies needed for your specific task

2. Create and export the task using this pattern:
```ts src/trigger/hello-world.ts
import { logger, task, wait } from '@trigger.dev/sdk/v3'
import {UnicornRider } from '@/db/schema/unicornRiders'

export const helloWorldTask = task({
    // key should correspond to filename
  id: 'hello-world',
  run: async (payload: { unicornRider: UnicornRider.Record }, { ctx }) => {
    logger.log('Hello, world!', { payload, ctx })
    return {
      message: 'Hello, world!',
    }
  },
})
```

# Notes
- If an operation is sensitive and should only occur once, you should make sure that there is an idempotent function to invoke it, like so:
```
// top of file
import { createTriggerIdempotencyKey } from '@/utils/backendCore'
....
export const idempotentSendOrganizationSubscriptionCreatedNotification =
  async (subscription: Subscription.Record) => {
    await sendOrganizationSubscriptionCreatedNotificationTask.trigger(
      {
        subscription,
      },
      {
        idempotencyKey: await createTriggerIdempotencyKey( // ALWAYS use `createTriggerIdempotencyKey` from our backendCore so we don't break tests
          `send-organization-subscription-created-notification-${subscription.id}`
        ),
      }
    )
  }
```