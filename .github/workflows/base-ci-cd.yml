name: Base CI

on:
  workflow_call:
  pull_request:
    branches: [main]

jobs:
  flowglad-next-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: platform/flowglad-next
    env:
      NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
      NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
      STACK_SECRET_SERVER_KEY: ${{ secrets.STACK_SECRET_SERVER_KEY }}
      STRIPE_TEST_MODE_SECRET_KEY: ${{ secrets.STRIPE_TEST_MODE_SECRET_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      TRIGGER_SECRET_KEY: ${{ secrets.TRIGGER_SECRET_KEY }}
      UNKEY_ROOT_KEY: ${{ secrets.UNKEY_ROOT_KEY }}
      UNKEY_API_ID: ${{ secrets.UNKEY_API_ID }}
      NEXT_PUBLIC_CDN_URL: ${{ secrets.NEXT_PUBLIC_CDN_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Setup Node.js
        uses: actions/setup-node@9ced9a43a244f3ac94f13bfd896db8c8f30da67a # v3
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        with:
          version: 8
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@6f8efc29b200d32929f49075959781ed54ec270c # v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install-packages
      - name: Run linting and typechecking
        run: pnpm check

  openapi-check:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: platform/flowglad-next
    env:
      NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
      NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
      STACK_SECRET_SERVER_KEY: ${{ secrets.STACK_SECRET_SERVER_KEY }}
      STRIPE_TEST_MODE_SECRET_KEY: ${{ secrets.STRIPE_TEST_MODE_SECRET_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      TRIGGER_SECRET_KEY: ${{ secrets.TRIGGER_SECRET_KEY }}
      UNKEY_ROOT_KEY: ${{ secrets.UNKEY_ROOT_KEY }}
      UNKEY_API_ID: ${{ secrets.UNKEY_API_ID }}
      NEXT_PUBLIC_CDN_URL: ${{ secrets.NEXT_PUBLIC_CDN_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Setup Node.js
        uses: actions/setup-node@9ced9a43a244f3ac94f13bfd896db8c8f30da67a # v3
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        with:
          version: 8
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@6f8efc29b200d32929f49075959781ed54ec270c # v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install-packages
      - name: Generate OpenAPI documentation
        run: pnpm tsx src/scripts/openApiDoc.ts --skip-env-pull

  flowglad-next-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: platform/flowglad-next
    env:
      NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
      NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
      STACK_SECRET_SERVER_KEY: ${{ secrets.STACK_SECRET_SERVER_KEY }}
      STRIPE_TEST_MODE_SECRET_KEY: ${{ secrets.STRIPE_TEST_MODE_SECRET_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      TRIGGER_SECRET_KEY: ${{ secrets.TRIGGER_SECRET_KEY }}
      UNKEY_ROOT_KEY: ${{ secrets.UNKEY_ROOT_KEY }}
      UNKEY_API_ID: ${{ secrets.UNKEY_API_ID }}
      NEXT_PUBLIC_CDN_URL: ${{ secrets.NEXT_PUBLIC_CDN_URL }}
      NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Setup Node.js
        uses: actions/setup-node@9ced9a43a244f3ac94f13bfd896db8c8f30da67a # v3
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        with:
          version: 8
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@6f8efc29b200d32929f49075959781ed54ec270c # v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install-packages
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # v2
      - name: Set up Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1
      - name: Setup Docker for tests
        run: |
          docker-compose -f docker-compose.test.yml down --volumes || true
          docker-compose -f docker-compose.test.yml up --build -d
          docker-compose -f docker-compose.test.yml ps
      - name: Run test setup
        run: pnpm test:setup
      - name: Run tests
        run: pnpm test
      - name: Run test teardown
        run: pnpm test:teardown

  packages-build-and-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    env:
      NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
      NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
      STACK_SECRET_SERVER_KEY: ${{ secrets.STACK_SECRET_SERVER_KEY }}
      STRIPE_TEST_MODE_SECRET_KEY: ${{ secrets.STRIPE_TEST_MODE_SECRET_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      TRIGGER_SECRET_KEY: ${{ secrets.TRIGGER_SECRET_KEY }}
      UNKEY_ROOT_KEY: ${{ secrets.UNKEY_ROOT_KEY }}
      UNKEY_API_ID: ${{ secrets.UNKEY_API_ID }}
      NEXT_PUBLIC_CDN_URL: ${{ secrets.NEXT_PUBLIC_CDN_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Setup Node.js
        uses: actions/setup-node@9ced9a43a244f3ac94f13bfd896db8c8f30da67a # v3
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        with:
          version: 8
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@6f8efc29b200d32929f49075959781ed54ec270c # v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Run build (all packages)
        run: pnpm build
      - name: Run linting and typechecking (all packages)
        run: pnpm check

  packages-react-tests:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
      NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
      STACK_SECRET_SERVER_KEY: ${{ secrets.STACK_SECRET_SERVER_KEY }}
      STRIPE_TEST_MODE_SECRET_KEY: ${{ secrets.STRIPE_TEST_MODE_SECRET_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      TRIGGER_SECRET_KEY: ${{ secrets.TRIGGER_SECRET_KEY }}
      UNKEY_ROOT_KEY: ${{ secrets.UNKEY_ROOT_KEY }}
      UNKEY_API_ID: ${{ secrets.UNKEY_API_ID }}
      NEXT_PUBLIC_CDN_URL: ${{ secrets.NEXT_PUBLIC_CDN_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Setup Node.js
        uses: actions/setup-node@9ced9a43a244f3ac94f13bfd896db8c8f30da67a # v3
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        with:
          version: 8
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@6f8efc29b200d32929f49075959781ed54ec270c # v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Run build
        run: pnpm build
      - name: Run tests
        run: pnpm test
        working-directory: packages/react

  check-todo:
    runs-on: ubuntu-latest
    name: Check for todo comments
    steps:
      - name: Install ripgrep
        run: |
         sudo apt-get update
         sudo apt-get install ripgrep
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Run todo check
        run: ./ci/check_todo.sh

  check-job-dependencies:
    runs-on: ubuntu-latest
    name: Check all-jobs-succeed depends on all jobs
    steps:
      - name: Install yq (for YAML parsing)
        run: go install github.com/mikefarah/yq/v4@latest
      - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      - name: Run dependency check
        run: ./ci/check_job_dependencies.sh
        
  all-jobs-succeed:
      name: All checks succeeded
      # On failure, we run and unconditionally exit with a failing status code.
      # On success, this job is skipped. Jobs skipped using `if:` are considered
      # to have succeeded:
      #
      # https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/troubleshooting-required-status-checks#handling-skipped-but-required-checks
      if: failure()
      runs-on: ubuntu-latest
      needs: [flowglad-next-lint, openapi-check, flowglad-next-tests, packages-build-and-lint, packages-react-tests, check-todo, check-job-dependencies]
      steps:
        - name: Mark the job as failed
          run: exit 1