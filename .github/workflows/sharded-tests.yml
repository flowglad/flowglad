name: Sharded Tests

on:
  workflow_call:
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run tests on'
        required: true
        default: 'main'
        type: string

jobs:
  flowglad-next-sharded-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
      fail-fast: false
    defaults:
      run:
        working-directory: platform/flowglad-next
    env:
      NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
      NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
      STACK_SECRET_SERVER_KEY: ${{ secrets.STACK_SECRET_SERVER_KEY }}
      STRIPE_TEST_MODE_SECRET_KEY: ${{ secrets.STRIPE_TEST_MODE_SECRET_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      TRIGGER_SECRET_KEY: ${{ secrets.TRIGGER_SECRET_KEY }}
      UNKEY_ROOT_KEY: ${{ secrets.UNKEY_ROOT_KEY }}
      UNKEY_API_ID: ${{ secrets.UNKEY_API_ID }}
      NEXT_PUBLIC_CDN_URL: ${{ secrets.NEXT_PUBLIC_CDN_URL }}
      NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
      - name: Setup Node.js
        uses: actions/setup-node@9ced9a43a244f3ac94f13bfd896db8c8f30da67a # v3
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        with:
          version: 8
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@6f8efc29b200d32929f49075959781ed54ec270c # v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install-packages
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # v2
      - name: Set up Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1
      - name: Setup Docker for tests
        run: |
          docker-compose -f docker-compose.test.yml down --volumes || true
          docker-compose -f docker-compose.test.yml up --build -d
          docker-compose -f docker-compose.test.yml ps
      - name: Run test setup
        run: pnpm test:setup
      - name: Create vitest reports directory
        run: mkdir -p .vitest-reports
      - name: Run sharded tests
        run: pnpm vitest run --reporter=blob --outputFile=.vitest-reports/blob-${{ matrix.shardIndex }}.json --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
      - name: Upload blob report to GitHub Actions Artifacts
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.shardIndex }}
          path: .vitest-reports/blob-${{ matrix.shardIndex }}.json
          include-hidden-files: true
          retention-days: 1
      - name: Run test teardown
        if: always()
        run: pnpm test:teardown

  merge-reports:
    if: ${{ !cancelled() }}
    needs: [flowglad-next-sharded-tests]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: platform/flowglad-next
    env:
      NEXT_PUBLIC_STACK_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_STACK_PROJECT_ID }}
      NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY: ${{ secrets.NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY }}
      STACK_SECRET_SERVER_KEY: ${{ secrets.STACK_SECRET_SERVER_KEY }}
      STRIPE_TEST_MODE_SECRET_KEY: ${{ secrets.STRIPE_TEST_MODE_SECRET_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      TRIGGER_SECRET_KEY: ${{ secrets.TRIGGER_SECRET_KEY }}
      UNKEY_ROOT_KEY: ${{ secrets.UNKEY_ROOT_KEY }}
      UNKEY_API_ID: ${{ secrets.UNKEY_API_ID }}
      NEXT_PUBLIC_CDN_URL: ${{ secrets.NEXT_PUBLIC_CDN_URL }}
      NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}
      - name: Setup Node.js
        uses: actions/setup-node@9ced9a43a244f3ac94f13bfd896db8c8f30da67a # v3
        with:
          node-version: '18'
      - name: Install pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        with:
          version: 8
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - name: Setup pnpm cache
        uses: actions/cache@6f8efc29b200d32929f49075959781ed54ec270c # v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install-packages
      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: .vitest-reports
          pattern: blob-report-*
          merge-multiple: true
      - name: Debug downloaded artifacts
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing current directory:"
          ls -la
          echo "Listing .vitest-reports directory:"
          ls -la .vitest-reports/ || echo "Directory does not exist"
          echo "Listing .vitest-reports contents:"
          find .vitest-reports -type f 2>/dev/null || echo "No files found"
          echo "Checking if any blob files exist:"
          find . -name "blob-*.json" 2>/dev/null || echo "No blob files found"
      - name: Ensure .vitest-reports directory exists
        run: |
          mkdir -p .vitest-reports
          echo "Created .vitest-reports directory"
      - name: Copy blob files to .vitest-reports
        run: |
          find .vitest-reports -name "blob-*.json" -exec cp {} .vitest-reports/ \; 2>/dev/null || echo "No blob files to copy"
          echo "Blob files in .vitest-reports:"
          ls -la .vitest-reports/
      - name: Merge reports
        run: pnpm vitest run --merge-reports
